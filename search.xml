<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDK源码详解</title>
      <link href="/2020/02/02/jdk-yuan-ma-xiang-jie/"/>
      <url>/2020/02/02/jdk-yuan-ma-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK源码详解"><a href="#JDK源码详解" class="headerlink" title="JDK源码详解"></a>JDK源码详解</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1-基础"></a>1-基础</h2><h3 id="1-1-String、Long-源码解析和面试题"><a href="#1-1-String、Long-源码解析和面试题" class="headerlink" title="1.1-String、Long 源码解析和面试题"></a>1.1-String、Long 源码解析和面试题</h3><p>String 和 Long 大家都很熟悉，本小节主要结合实际的工作场景，来一起看下 String 和 Long 的底层源码实现，看看平时我们使用时，有无需要注意的点，总结一下这些 API 都适用于哪些场景。</p><h4 id="1-1-1-String"><a href="#1-1-1-String" class="headerlink" title="1.1.1-String"></a>1.1.1-String</h4><ol><li><h5 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a><strong>不变性</strong></h5><p>我们常常听人说，HashMap 的 key 建议使用不可变类，比如说 String 这种不可变类。这里说的不可变指的是类值一旦被初始化，就不能再被改变了，如果被修改，将会是新的类，我们写个 demo 来演示一下。</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>s <span class="token operator">=</span><span class="token string">"world"</span><span class="token punctuation">;</span></code></pre><p>从代码上来看，s 的值好像被修改了，但从 debug 的日志来看，其实是 s 的内存地址已经被修改了，也就说 <code>s =“world”</code> 这个看似简单的赋值，其实已经把 s 的引用指向了新的 String，debug 的截图显示内存地址已经被修改，两张截图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/String1.jpeg" alt="String1"></p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/String2.jpeg" alt="String2"></p><p>我们从源码上查看一下原因：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** The value is used for character storage. */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><p>我们可以看出来两点：</p><ul><li>String 被 final 修饰，说明 String 类绝不可能被继承了，也就是说任何对 String 的操作方法，都不会被继承覆写；</li><li>String 中保存数据的是一个 char 的数组 value。我们发现 value 也是被 final 修饰的，也就是说 value 一旦被赋值，内存地址是绝对无法修改的，而且 value 的权限是 private 的，外部绝对访问不到，String 也没有开放出可以对 value 进行赋值的方法，所以说 value 一旦产生，内存地址就根本无法被修改。</li></ul><p>以上两点就是 String 不变性的原因，充分利用了 final 关键字的特性，如果你自定义类时，希望也是不可变的，也可以模仿 String 的这两点操作。</p><p><strong>因为 String 具有不变性，所以 String 的大多数操作方法，都会返回新的 String，</strong>如下面这种写法是不对的：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span><span class="token string">"hello world !!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种写法是替换不掉的，必须接受 replace 方法返回的参数才行，这样才行：str = str.replace("l","dd");</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><h5 id="字符串乱码"><a href="#字符串乱码" class="headerlink" title="字符串乱码"></a><strong>字符串乱码</strong></h5><p>在生活中，我们经常碰到这样的场景，进行二进制转化操作时，本地测试的都没有问题，到其它环境机器上时，有时会出现字符串乱码的情况，这个主要是因为在二进制转化操作时，并没有强制规定文件编码，而不同的环境默认的文件编码不一致导致的。</p><p>我们也写了一个 demo 来模仿一下字符串乱码：</p><pre class=" language-java"><code class="language-java">String str  <span class="token operator">=</span><span class="token string">"nihao 你好 喬亂"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串转化成 byte 数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte 数组转化成字符串</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果打印为：</span>nihao <span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">?</span><span class="token operator">?</span></code></pre><p>打印的结果为？？，这就是常见的乱码表现形式。这时候有同学说，是不是我把代码修改成 <code>String s2 = new String(bytes,&quot;ISO-8859-1&quot;);</code> 就可以了？这是不行的。主要是因为 ISO-8859-1 这种编码对中文的支持有限，导致中文会显示乱码。唯一的解决办法，就是在所有需要用到编码的地方，都统一使用 UTF-8，对于 String 来说，getBytes 和 new String 两个方法都会使用到编码，我们把这两处的编码替换成 UTF-8 后，打印出的结果就正常了。</p></li></ol><ol start="3"><li><h5 id="首字母大小写"><a href="#首字母大小写" class="headerlink" title="首字母大小写"></a><strong>首字母大小写</strong></h5><p>如果我们的项目被 Spring 托管的话，有时候我们会通过 <code>applicationContext.getBean(className);</code> 这种方式得到 <code>SpringBean</code>，这时 className 必须是要满足首字母小写的，除了该场景，在反射场景下面，我们也经常要使类属性的首字母小写，这时候我们一般都会这么做：</p><p><code>name.substring(0, 1).toLowerCase() + name.substring(1);</code>，使用 substring 方法，该方法主要是为了截取字符串连续的一部分，substring 有两个方法：</p><ul><li><code>public String substring(int beginIndex, int endIndex)</code> beginIndex：开始位置，endIndex：结束位置；</li><li><code>public String substring(int beginIndex)</code>beginIndex：开始位置，结束位置为文本末尾。</li></ul><p>substring 方法的底层使用的是字符数组范围截取的方法 ：<code>Arrays.copyOfRange(字符数组, 开始位置, 结束位置);</code> 从字符数组中进行一段范围的拷贝。</p><p>相反的，如果要修改成首字母大写，只需要修改成 <code>name.substring(0, 1).toUpperCase() + name.substring(1)</code> 即可。</p></li></ol><ol start="4"><li><h5 id="相等判断"><a href="#相等判断" class="headerlink" title="相等判断"></a><strong>相等判断</strong></h5><p>我们判断相等有两种办法，<code>equals</code> 和 <code>equalsIgnoreCase</code>。后者判断相等时，会忽略大小写，近期看见一些面试题在问：如果让你写判断两个 String 相等的逻辑，应该如何写，我们来一起看下 equals 的源码，整理一下思路：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断内存地址是否相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 待比较的对象是否是 String，如果不是 String，直接返回不相等</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 两个字符串的长度是否相等，不等则直接返回不相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 依次比较每个字符是否相等，若有一个不等，直接返回不相等</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从 equals 的源码可以看出，逻辑非常清晰，完全是根据 String 底层的结构来编写出相等的代码。这也提供了一种思路给我们：如果有人问如何判断两者是否相等时，我们可以从两者的底层结构出发，这样可以迅速想到一种贴合实际的思路和方法，就像 String 底层的数据结构是 char 的数组一样，判断相等时，就挨个比较 char 数组中的字符是否相等即可。</p></li></ol><ol start="5"><li><h5 id="替换、删除"><a href="#替换、删除" class="headerlink" title="替换、删除"></a><strong>替换、删除</strong></h5><p>替换在工作中也经常使用，有 replace 替换所有字符、replaceAll 批量替换字符串、replaceFirst 替换遇到的第一个字符串三种场景。</p><p>其中在使用 replace 时需要注意，replace 有两个方法，一个入参是 char，一个入参是 String，前者表示替换所有字符，如：<code>name.replace(&#39;a&#39;,&#39;b&#39;)</code>，后者表示替换所有字符串，如：<code>name.replace(&quot;a&quot;,&quot;b&quot;)</code>，两者就是单引号和多引号的区别。</p><p>需要注意的是， replace 并不只是替换一个，是替换所有匹配到的字符或字符串哦。</p><p>写了一个 demo 演示一下三种场景：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  String str <span class="token operator">=</span><span class="token string">"hello word !!"</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"替换之前 :{}"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"替换所有字符 :{}"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"替换全部 :{}"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"替换第一个 l :{}"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出的结果是：</span>替换之前 <span class="token operator">:</span>hello word <span class="token operator">!</span><span class="token operator">!</span>替换所有字符 <span class="token operator">:</span>heddo word <span class="token operator">!</span><span class="token operator">!</span>替换全部 <span class="token operator">:</span>hello worl <span class="token operator">!</span><span class="token operator">!</span>替换第一个 <span class="token operator">:</span>helo worl <span class="token operator">!</span><span class="token operator">!</span></code></pre><p>当然我们想要删除某些字符，也可以使用 replace 方法，把想删除的字符替换成 “” 即可。</p></li></ol><ol start="6"><li><h5 id="拆分和合并"><a href="#拆分和合并" class="headerlink" title="拆分和合并"></a><strong>拆分和合并</strong></h5><p>拆分我们使用 split 方法，该方法有两个入参数。第一个参数是我们拆分的标准字符，第二个参数是一个 int 值，叫 limit，来限制我们需要拆分成几个元素。如果 limit 比实际能拆分的个数小，按照 limit 的个数进行拆分。</p><p>我们演示一个 demo：</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span><span class="token string">"boo:and:foo"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我们对 s 进行了各种拆分，演示的代码和结果是：</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and:foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"boo"</span><span class="token punctuation">,</span><span class="token string">"and"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">":and:f"</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"o:and:foo"</span><span class="token punctuation">]</span></code></pre><p>从演示的结果来看，limit 对拆分的结果，是具有限制作用的，还有就是拆分结果里面不会出现被拆分的字段。</p><p>那如果字符串里面有一些空值呢，拆分的结果如下：</p><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span><span class="token string">",a,,b,"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> 结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span></code></pre><p>从拆分结果中，我们可以看到，空值是拆分不掉的，仍然成为结果数组的一员，如果我们想删除空值，只能自己拿到结果后再做操作，但 Guava（Google 开源的技术工具） 提供了一些可靠的工具类，可以帮助我们快速去掉空值，如下：</p><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span><span class="token string">",a, ,  b  c ,"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Splitter 是 Guava 提供的 API </span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 去掉空格</span>    <span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 去掉空值</span>    <span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Guava 去掉空格的分割方法：{}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出的结果为：</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b  c"</span><span class="token punctuation">]</span></code></pre><p>从打印的结果中，可以看到去掉了空格和空值，这正是我们工作中常常期望的结果，所以推荐使用 Guava 的 API 对字符串进行分割。</p><p>合并我们使用 join 方法，此方法是静态的，我们可以直接使用。方法有两个入参，参数一是合并的分隔符，参数二是合并的数据源，数据源支持数组和 List，在使用的时候，我们发现有两个不太方便的地方：</p><ul><li>不支持依次 join 多个字符串，比如我们想依次 join 字符串 s 和 s1，如果你这么写的话 <code>String.join(&quot;,&quot;,s).join(&quot;,&quot;,s1)</code> 最后得到的是 s1 的值，第一次 join 的值被第二次 join 覆盖了；</li><li>如果 join 的是一个 List，无法自动过滤掉 null 值。</li></ul><p>而 Guava 正好提供了 API，解决上述问题，我们来演示一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 依次 join 多个字符串，Joiner 是 Guava 提供的 API</span>Joiner joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String result <span class="token operator">=</span> joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"依次 join 多个字符串:{}"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"china"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"自动删除 list 中空值:{}"</span><span class="token punctuation">,</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出的结果为；</span>依次 join 多个字符串<span class="token operator">:</span>hello<span class="token punctuation">,</span>china自动删除 list 中空值<span class="token operator">:</span>hello<span class="token punctuation">,</span>china</code></pre><p>从结果中，我们可以看到 Guava 不仅仅支持多个字符串的合并，还帮助我们去掉了 List 中的空值，这就是我们在工作中常常需要得到的结果。</p></li></ol><h4 id="1-1-2-Long"><a href="#1-1-2-Long" class="headerlink" title="1.1.2-Long"></a>1.1.2-Long</h4><ol><li><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><strong>缓存</strong></h5><p>Long 最被我们关注的就是 Long 的缓存问题，Long 自己实现了一种缓存机制，缓存了从 -128 到 127 内的所有 Long 值，如果是这个范围内的 Long 值，就不会初始化，而是从缓存中拿，缓存初始化源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LongCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LongCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 缓存，范围从 -128 到 127，+1 是因为有个 0</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Long cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 容器初始化时，进行加载</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 缓存 Long 值，注意这里是 i - 128 ，所以再拿的时候就需要 + 128</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="1-1-3-面试题"><a href="#1-1-3-面试题" class="headerlink" title="1.1.3-面试题"></a>1.1.3-面试题</h4><ol><li><h5 id="为什么使用-Long-时，大家推荐多使用-valueOf-方法，少使用-parseLong-方法"><a href="#为什么使用-Long-时，大家推荐多使用-valueOf-方法，少使用-parseLong-方法" class="headerlink" title="为什么使用 Long 时，大家推荐多使用 valueOf 方法，少使用 parseLong 方法"></a><strong>为什么使用 Long 时，大家推荐多使用 valueOf 方法，少使用 parseLong 方法</strong></h5><p>答：因为 Long 本身有缓存机制，缓存了 -128 到 127 范围内的 Long，valueOf 方法会从缓存中去拿值，如果命中缓存，会减少资源的开销，parseLong 方法就没有这个机制。</p></li><li><h5 id="如何解决-String-乱码的问题"><a href="#如何解决-String-乱码的问题" class="headerlink" title="如何解决 String 乱码的问题"></a><strong>如何解决 String 乱码的问题</strong></h5><p>答：乱码的问题的根源主要是两个：字符集不支持复杂汉字、二进制进行转化时字符集不匹配，所以在 String 乱码时我们可以这么做：</p><ul><li>所有可以指定字符集的地方强制指定字符集，比如 new String 和 getBytes 这两个地方；</li><li>我们应该使用 UTF-8 这种能完整支持复杂汉字的字符集。</li></ul></li><li><h5 id="为什么大家都说-String-是不可变的"><a href="#为什么大家都说-String-是不可变的" class="headerlink" title="为什么大家都说 String 是不可变的"></a><strong>为什么大家都说 String 是不可变的</strong></h5><p>答：主要是因为 String 和保存数据的 char 数组，都被 final 关键字所修饰，所以是不可变的，具体细节描述可以参考上文。</p></li><li><h5 id="String-一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题"><a href="#String-一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题" class="headerlink" title="String 一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题"></a><strong>String 一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题</strong></h5><p>答：这些都属于问 String 的基本操作题目，考察我们平时对 String 的使用熟练程度，可以参考上文。</p></li></ol><h3 id="1-2-Java常用关键字详解"><a href="#1-2-Java常用关键字详解" class="headerlink" title="1.2-Java常用关键字详解"></a>1.2-Java常用关键字详解</h3><p>Java 中的关键字很多，大约有 50+，在命名上我们不能和这些关键字冲突的，编译会报错，每个关键字都代表着不同场景下的不同含义，接下来我们挑选 6 个比较重要的关键字，深入学习一下。</p><h4 id="1-2-1-static"><a href="#1-2-1-static" class="headerlink" title="1.2.1-static"></a>1.2.1-static</h4><p>意思是静态的、全局的，一旦被修饰，说明被修饰的东西在一定范围内是共享的，谁都可以访问，这时候需要注意并发读写的问题。</p><ol><li><h5 id="修饰的对象"><a href="#修饰的对象" class="headerlink" title="修饰的对象"></a><strong>修饰的对象</strong></h5><p>static 只能修饰类变量、方法和方法块。</p><p><strong>当 static 修饰类变量时</strong>，如果该变量是 public 的话，表示该变量任何类都可以直接访问，而且无需初始化类，直接使用 <strong>类名.static 变量</strong> 这种形式访问即可。</p><p>这时候我们非常需要注意的一点就是线程安全的问题了，因为当多个线程同时对共享变量进行读写时，很有可能会出现并发问题，如我们定义了：<code>public static List list = new ArrayList();</code>这样的共享变量。这个 list 如果同时被多个线程访问的话，就有线程安全的问题，这时候一般有两个解决办法：</p><ul><li>把线程不安全的 ArrayList 换成 线程安全的 CopyOnWriteArrayList；</li><li>每次访问时，手动加锁。</li></ul><p>所以在使用 static 修饰类变量时，如何保证线程安全是我们常常需要考虑的。</p><p><strong>当 static 修饰方法时</strong>，代表该方法和当前类是无关的，任意类都可以直接访问（如果权限是 public 的话）。</p><p>有一点需要注意的是，该方法内部只能调用同样被 static 修饰的方法，不能调用普通方法，我们常用的 util 类里面的各种方法，我们比较喜欢用 static 修饰方法，好处就是调用特别方便。</p><p>static 方法内部的变量在执行时是没有线程安全问题的。方法执行时，数据运行在栈里面，栈的数据每个线程都是隔离开的，所以不会有线程安全的问题，所以 util 类的各个 static 方法，我们是可以放心使用的。</p><p><strong>当 static 修饰方法块时</strong>，我们叫做静态块，静态块常常用于在类启动之前，初始化一些值。</p><p>比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 进行一些初始化的工作</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码演示了静态块做一些初始化的工作，但需要注意的是，静态块只能调用同样被 static 修饰的变量，并且 static 的变量需要写在静态块的前面，不然编译也会报错。</p></li></ol><ol start="2"><li><h5 id="初始化时机"><a href="#初始化时机" class="headerlink" title="初始化时机"></a><strong>初始化时机</strong></h5><p>对于被 static 修饰的类变量、方法块和静态方法的初始化时机。</p><p>我们写了一个测试 demo，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/static.jpeg" alt="static"></p><p>打印出来的结果是：</p><pre class=" language-java"><code class="language-java">父类静态变量初始化父类静态块初始化子类静态变量初始化子类静态块初始化main 方法执行父类构造器初始化子类构造器初始化</code></pre><p>从结果中，我们可以看出两点：</p><ul><li>父类的静态变量和静态块比子类优先初始化；</li><li>静态变量和静态块比类构造器优先初始化。</li></ul><p>被 static 修饰的方法，在类初始化的时候并不会初始化，只有当自己被调用时，才会被执行。</p></li></ol><h4 id="1-2-2-final"><a href="#1-2-2-final" class="headerlink" title="1.2.2-final"></a>1.2.2-final</h4><p>final 的意思是不变的，一般来说用于以下三种场景：</p><ol><li>被 final 修饰的类，表明该类是无法继承的；</li><li>被 final 修饰的方法，表明该方法是无法覆写的；</li><li>被 final 修饰的变量，说明该变量在声明的时候，就必须初始化完成，而且以后也不能修改其内存地址。</li></ol><p>第三点注意下，我们说的是无法修改其内存地址，并没有说无法修改其值。因为对于 List、Map 这些集合类来说，被 final 修饰后，是可以修改其内部值的，但却无法修改其初始化时的内存地址。</p><p>例子我们就不举了，1-1 小节 String 的不变性就是一个很好的例子。</p><h4 id="1-2-3-try、catch、finally"><a href="#1-2-3-try、catch、finally" class="headerlink" title="1.2.3-try、catch、finally"></a>1.2.3-try、catch、finally</h4><p>这三个关键字常用于我们捕捉异常的一整套流程，try 用来确定代码执行的范围，catch 捕捉可能会发生的异常，finally 用来执行一定要执行的代码块，除了这些，我们还需要清楚，每个地方如果发生异常会怎么办。</p><p>我们举一个例子来演示一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCatchFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"try is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"try exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"catch is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"catch exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finally is run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个代码演示了在 try、catch 中都遇到了异常，代码的执行顺序为：try -&gt; catch -&gt; finally。</p><p>输出的结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/try-catch.jpeg" alt="try-catch"></p><p>可以看到两点：</p><ul><li>finally 先执行后，再抛出 catch 的异常；</li><li>最终捕获的异常是 catch 的异常，try 抛出来的异常已经被 catch 吃掉了，所以当我们遇见 catch 也有可能会抛出异常时，我们可以先打印出 try 的异常，这样 try 的异常在日志中就会有所体现。</li></ul><h4 id="1-2-4-volatile"><a href="#1-2-4-volatile" class="headerlink" title="1.2.4-volatile"></a>1.2.4-volatile</h4><p>volatile 的意思是可见的，常用来修饰某个共享变量，意思是当共享变量的值被修改后，会及时通知到其它线程上，其它线程就能知道当前共享变量的值已经被修改了。</p><p>我们再说原理之前，先说下基础知识。就是在多核 CPU 下，为了提高效率，线程在拿值时，是直接和 CPU 缓存打交道的，而不是内存。主要是因为 CPU 缓存执行速度更快，比如线程要拿值 C，会直接从 CPU 缓存中拿， CPU 缓存中没有，就会从内存中拿，所以线程读的操作永远都是拿 CPU 缓存的值。</p><p>这时候会产生一个问题，CPU 缓存中的值和内存中的值可能并不是时刻都同步，导致线程计算的值可能不是最新的，共享变量的值有可能已经被其它线程所修改了，但此时修改是机器内存的值，CPU 缓存的值还是老的，导致计算会出现问题。</p><p>这时候有个机制，就是内存会主动通知 CPU 缓存。当前共享变量的值已经失效了，你需要重新来拉取一份，CPU 缓存就会重新从内存中拿取一份最新的值。</p><p>volatile 关键字就会触发这种机制，加了 volatile 关键字的变量，就会被识别成共享变量，内存中值被修改后，会通知到各个 CPU 缓存，使 CPU 缓存中的值也对应被修改，从而保证线程从 CPU 缓存中拿取出来的值是最新的。</p><p>我们画了一个图来说明一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/volatile.jpeg" alt="volatile"></p><p>从图中我们可以看到，线程 1 和线程 2 一开始都读取了 C 值，CPU 1 和 CPU 2 缓存中也都有了 C 值，然后线程 1 把 C 值修改了，这时候内存的值和 CPU 2 缓存中的 C 值就不等了，内存这时发现 C 值被 volatile 关键字修饰，发现其是共享变量，就会使 CPU 2 缓存中的 C 值状态置为无效，CPU 2 会从内存中重新拉取最新的值，这时候线程 2 再来读取 C 值时，读取的已经是内存中最新的值了。</p><h4 id="1-2-5-transient"><a href="#1-2-5-transient" class="headerlink" title="1.2.5-transient"></a>1.2.5-transient</h4><p>transient 关键字我们常用来修饰类变量，意思是当前变量是无需进行序列化的。在序列化时，就会忽略该变量，这些在序列化工具底层，就已经对 transient 进行了支持。</p><h4 id="1-2-6-default"><a href="#1-2-6-default" class="headerlink" title="1.2.6-default"></a>1.2.6-default</h4><p>default 关键字一般会用在接口的方法上，意思是对于该接口，子类是无需强制实现的，但自己必须有默认实现，我们举个例子如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/default.jpeg" alt="default"></p><p>default 关键字被很多源码使用，我们后面会说。</p><h4 id="1-2-7-面试题"><a href="#1-2-7-面试题" class="headerlink" title="1.2.7-面试题"></a>1.2.7-面试题</h4><ol><li><h5 id="如何证明-static-静态变量和类无关？"><a href="#如何证明-static-静态变量和类无关？" class="headerlink" title="如何证明 static 静态变量和类无关？"></a><strong>如何证明 static 静态变量和类无关？</strong></h5><p>答：从三个方面就可以看出静态变量和类无关。</p><ol><li>我们不需要初始化类就可直接使用静态变量；</li><li>我们在类中写个 main 方法运行，即便不写初始化类的代码，静态变量都会自动初始化；</li><li>静态变量只会初始化一次，初始化完成之后，不管我再 new 多少个类出来，静态变量都不会再初始化了。</li></ol><p>不仅仅是静态变量，静态方法块也和类无关。</p></li><li><h5 id="常常看见变量和方法被-static-和-final-两个关键字修饰，为什么这么做？"><a href="#常常看见变量和方法被-static-和-final-两个关键字修饰，为什么这么做？" class="headerlink" title="常常看见变量和方法被 static 和 final 两个关键字修饰，为什么这么做？"></a><strong>常常看见变量和方法被 static 和 final 两个关键字修饰，为什么这么做？</strong></h5><p>答：这么做有两个目的：</p><ol><li>变量和方法于类无关，可以直接使用，使用比较方便；</li><li>强调变量内存地址不可变，方法不可继承覆写，强调了方法内部的稳定性。</li></ol></li><li><h5 id="catch-中发生了未知异常，finally-还会执行么？"><a href="#catch-中发生了未知异常，finally-还会执行么？" class="headerlink" title="catch 中发生了未知异常，finally 还会执行么？"></a><strong>catch 中发生了未知异常，finally 还会执行么？</strong></h5><p>答：会的，catch 发生了异常，finally 还会执行的，并且是 finally 执行完成之后，才会抛出 catch 中的异常。</p><p>不过 catch 会吃掉 try 中抛出的异常，为了避免这种情况，在一些可以预见 catch 中会发生异常的地方，先把 try 抛出的异常打印出来，这样从日志中就可以看到完整的异常了。</p></li><li><h5 id="volatile-关键字的作用和原理"><a href="#volatile-关键字的作用和原理" class="headerlink" title="volatile 关键字的作用和原理"></a><strong>volatile 关键字的作用和原理</strong></h5><p>答：这个上文说的比较清楚，可以参考上文。</p></li></ol><h4 id="1-2-8-总结"><a href="#1-2-8-总结" class="headerlink" title="1.2.8-总结"></a>1.2.8-总结</h4><p>Java 的关键字属于比较基础的内容，我们需要清晰明确其含义，才能在后续源码阅读和工作中碰到这些关键字时了然于心，才能明白为什么会在这里使用这样的关键字。比如 String 源码是如何使用 final 关键字达到起不变性的，比如 Java 8 集合中 Map 是如何利用 default 关键字新增各种方法的，这些我们在后续内容都会提到。</p><h3 id="1-3-Arrays、Collections、Objects-常用方法源码解析"><a href="#1-3-Arrays、Collections、Objects-常用方法源码解析" class="headerlink" title="1.3-Arrays、Collections、Objects 常用方法源码解析"></a>1.3-Arrays、Collections、Objects 常用方法源码解析</h3><p>我们在工作中都会写工具类，但如何才能使写出来的工具类更好用，也是有一些技巧的。本章内容以三种平时工作中经常使用的工具类为例，从使用案例出发，再看看底层源码的实现，看看能否学习到一些工具类的技巧，以及三种工具类的实际使用场景。</p><h4 id="1-3-1-工具类通用的特征"><a href="#1-3-1-工具类通用的特征" class="headerlink" title="1.3.1-工具类通用的特征"></a>1.3.1-工具类通用的特征</h4><p>再看细节之前，我们先总结一下好的工具类都有哪些通用的特征写法：</p><ol><li>构造器必须是私有的。这样的话，工具类就无法被 new 出来，因为工具类在使用的时候，无需初始化，直接使用即可，所以不会开放出构造器出来。</li><li>工具类的工具方法必须被 static、final 关键字修饰。这样的话就可以保证方法不可变，并且可以直接使用，非常方便。</li></ol><p>我们需要注意的是，尽量不在工具方法中，对共享变量有做修改的操作访问（如果必须要做的话，必须加锁），因为会有线程安全的问题。除此之外，工具类方法本身是没有线程安全问题的，可以放心使用。</p><h4 id="1-3-2-Arrays"><a href="#1-3-2-Arrays" class="headerlink" title="1.3.2-Arrays"></a>1.3.2-Arrays</h4><p>Arrays 主要对数组提供了一些高效的操作，比如说排序、查找、填充、拷贝、相等判断等等。</p><ol><li><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h5><p>Arrays.sort 方法主要用于排序，入参支持 int、long、double 等各种基本类型的数组，也支持自定义类的数组，下面我们写个 demo 来演示一下自定义类数组的排序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">// 自定义类</span><span class="token keyword">class</span> <span class="token class-name">SortDTO</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String sortTarget<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">SortDTO</span><span class="token punctuation">(</span>String sortTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sortTarget <span class="token operator">=</span> sortTarget<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>SortDTO<span class="token operator">></span> list <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"220"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我们先把数组的大小初始化成 list 的大小，保证能够正确执行 toArray</span>  SortDTO<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"排序之前：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>SortDTO<span class="token operator">:</span><span class="token operator">:</span>getSortTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"排序之后：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果为：排序之前：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>排序之后：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>从输出的结果中可以看到，排序之后的数组已经是有顺序的了，也可以看到 sort 方法支持两个入参：要排序的数组和外部排序器。</p><p>大家都说 sort 方法排序的性能较高，主要原因是 sort 使用了双轴快速排序算法，具体算法就不细说了。</p></li></ol><ol start="2"><li><h5 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a><strong>二分查找法</strong></h5><p>Arrays.binarySearch 方法主要用于快速从数组中查找出对应的值。其支持的入参类型非常多，如 <code>byte、int、long</code> 各种类型的数组。返回参数是查找到的对应数组下标的值，如果查询不到，则返回负数。</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95.jpeg" alt="二分查找法"></p><p>我们写了一个 demo 如下：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>SortDTO<span class="token operator">></span> list <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"300"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"220"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SortDTO<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"搜索之前：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>SortDTO<span class="token operator">:</span><span class="token operator">:</span>getSortTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"先排序，结果为：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SortDTO</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>SortDTO<span class="token operator">:</span><span class="token operator">:</span>getSortTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"没有找到 200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"搜索结果：{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出的结果为：搜索之前：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>先排序，结果为：<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"220"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>搜索结果：<span class="token punctuation">{</span><span class="token string">"sortTarget"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">}</span></code></pre><p>从上述代码中我们需要注意两点：</p><ul><li>如果被搜索的数组是无序的，一定要先排序，否则二分搜索很有可能搜索不到，我们 demo 里面也先对数组进行了排序；</li><li>搜索方法返回的是数组的下标值。如果搜索不到，返回的下标值就会是负数，这时我们需要判断一下正负。如果是负数，还从数组中获取数据的话，会报数组越界的错误。demo 中对这种情况进行了判断，如果是负数，会提前抛出明确的异常。</li></ul><p>接下来，我们来看下二分法底层代码的实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// a：我们要搜索的数组，fromIndex：从那里开始搜索，默认是0； toIndex：搜索到何时停止，默认是数组大小</span><span class="token comment" spellcheck="true">// key：我们需要搜索的值 c：外部比较器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span>                                     T key<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果比较器 c 是空的，直接使用 key 的 Comparable.compareTo 方法进行排序</span>    <span class="token comment" spellcheck="true">// 假设 key 类型是 String 类型，String 默认实现了 Comparable 接口，就可以直接使用 compareTo 方法进行排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这是另外一个方法，使用内部排序器进行比较的方法</span>        <span class="token keyword">return</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始位置小于结束位置，就会一直循环搜索</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假设 low =0，high =10，那么 mid 就是 5，所以说二分的意思主要在这里，每次都是计算索引的中间值</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        T midVal <span class="token operator">=</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 比较数组中间值和给定的值的大小关系</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>midVal<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果数组中间值小于给定的值，说明我们要找的值在中间值的右边</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我们要找的值在中间值的左边</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 找到了</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key found</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回的值是负数，表示没有找到</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// key not found.</span><span class="token punctuation">}</span></code></pre><p>二分的主要意思是每次查找之前，都找到中间值，然后拿我们要比较的值和中间值比较，根据结果修改比较的上限或者下限，通过循环最终找到相等的位置索引，以上代码实现比较简洁，大家可以在自己理解的基础上，自己复写一遍。</p></li></ol><ol start="3"><li><h5 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a><strong>拷贝</strong></h5><p>数组拷贝我们经常遇到，有时需要拷贝整个数组，有时需要拷贝部分，比如 ArrayList 在 add（扩容） 或 remove（删除元素不是最后一个） 操作时，会进行一些拷贝。拷贝整个数组我们可以使用 copyOf 方法，拷贝部分我们可以使用 copyOfRange 方法，以 copyOfRange 为例，看下底层源码的实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// original 原始数组数据</span><span class="token comment" spellcheck="true">// from 拷贝起点</span><span class="token comment" spellcheck="true">// to 拷贝终点</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOfRange</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要拷贝的长度</span>    <span class="token keyword">int</span> newLength <span class="token operator">=</span> to <span class="token operator">-</span> from<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newLength <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>from <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化新数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用 native 方法进行拷贝，参数的意思分别是：</span>    <span class="token comment" spellcheck="true">// 被拷贝的数组、从数组那里开始、目标数组、从目的数组那里开始拷贝、拷贝的长度</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> from<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length <span class="token operator">-</span> from<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们发现，Arrays 的拷贝方法，实际上底层调用的是 System.arraycopy 这个 native 方法，如果你自己对底层拷贝方法比较熟悉的话，也可以直接使用。</p></li></ol><h4 id="1-3-3-Collections"><a href="#1-3-3-Collections" class="headerlink" title="1.3.3-Collections"></a>1.3.3-Collections</h4><p>Collections 是为了方便使用集合而产生的工具类，Arrays 方便数组使用，Collections 是方便集合使用。</p><p>Collections 也提供了 sort 和 binarySearch 方法，sort 底层使用的就是 Arrays.sort 方法，binarySearch 底层是自己重写了二分查找算法，实现的逻辑和 Arrays 的二分查找算法完全一致，这两个方法上 Collections 和 Arrays 的内部实现很类似，接下来我们来看下 Collections 独有的特性。</p><ol><li><h5 id="求集合中最大、小值"><a href="#求集合中最大、小值" class="headerlink" title="求集合中最大、小值"></a><strong>求集合中最大、小值</strong></h5><p>提供了 max 方法来取得集合中的最大值，min 方法来取得集合中的最小值，max 和 min 方法很相似的，我们以 max 方法为例来说明一下，max 提供了两种类型的方法，一个需要传外部排序器，一个不需要传排序器，但需要集合中的元素强制实现 Comparable 接口，后者的泛型定义很有意思，我们来看下（从右往左看）：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%B1%82%E9%9B%86%E5%90%88%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC.jpeg" alt="求集合最大值最小值"></p><p>从这段源码中，我们可以学习到两点：</p><ul><li>max 方法泛型 T 定义得非常巧妙，意思是泛型必须继承 Object 并且实现 Comparable 的接口。一般让我们来定义的话，我们可以会在方法里面去判断有无实现 Comparable 的接口，这种是在运行时才能知道结果。而这里泛型直接定义了必须实现 Comparable 接口，在编译的时候就可告诉使用者，当前类没有实现 Comparable 接口，使用起来很友好；</li><li>给我们提供了实现两种排序机制的好示例：自定义类实现 Comparable 接口和传入外部排序器。两种排序实现原理类似，但实现有所差别，我们在工作中如果需要些排序的工具类时，可以效仿。</li></ul></li></ol><ol start="2"><li><h5 id="多种类型的集合"><a href="#多种类型的集合" class="headerlink" title="多种类型的集合"></a><strong>多种类型的集合</strong></h5><p>Collections 对原始集合类进行了封装，提供了更好的集合类给我们，一种是线程安全的集合，一种是不可变的集合，针对 List、Map、Set 都有提供，我们先来看下线程安全的集合：</p><ul><li><p><strong>线程安全的集合</strong></p><p>线程安全的集合方法都是 synchronized 打头的，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95.jpeg" alt="线程安全的集合方法"></p><p>从方法命名我们都可以看出来，底层是通过 synchronized 轻量锁来实现的，我们以 synchronizedList 为例来说明下底层的实现：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/synchronizedList.jpeg" alt="synchronizedList"></p><p>可以看到 List 的所有操作方法都被加上了 synchronized 锁，所以多线程对集合同时进行操作，是线程安全的。</p></li><li><p><strong>不可变的集合</strong></p><p>得到不可变集合的方法都是以 unmodifiable 开头的。这类方法的意思是，我们会从原集合中，得到一个不可变的新集合，新集合只能访问，无法修改；一旦修改，就会抛出异常。这主要是因为只开放了查询方法，其余任何修改操作都会抛出异常，我们以 unmodifiableList 为例来看下底层实现机制：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/unmodifiableList.jpeg" alt="unmodifiableList"></p></li><li><p><strong>小结</strong></p><p>以上两种 List 其实解决了工作中的一些困惑，比如说 ArrayList 是线程不安全的，然后其内部数组很容易被修改，有的时候，我们希望 List 一旦生成后，就不能被修改，Collections 对 List 重新进行了封装，提供了两种类型的集合封装形式，从而解决了工作中的一些烦恼，如果你平时使用 List 时有一些烦恼，也可以学习此种方式，自己对原始集合进行封装，来解决 List 使用过程中的不方便。</p></li></ul></li></ol><h4 id="1-3-4-Objects"><a href="#1-3-4-Objects" class="headerlink" title="1.3.4-Objects"></a>1.3.4-Objects</h4><p>对于 Objects，我们经常使用的就是两个场景，相等判断和判空。</p><ol><li><h5 id="相等判断-1"><a href="#相等判断-1" class="headerlink" title="相等判断"></a><strong>相等判断</strong></h5><p>Objects 有提供 equals 和 deepEquals 两个方法来进行相等判断，前者是判断基本类型和自定义类的，后者是用来判断数组的，我们来看下底层的源码实现：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Objects-equals.jpeg" alt="Objects-equals"></p><p>从源码中，可以看出 Objects 对基本类型和复杂类型的对象，都有着比较细粒度的判断，可以放心使用。</p></li></ol><ol start="2"><li><h5 id="为空判断"><a href="#为空判断" class="headerlink" title="为空判断"></a><strong>为空判断</strong></h5><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Objects-isNull.jpeg" alt="Objects-isNull"></p><p>Objects 提供了各种关于空的一些判断，isNull 和 nonNull 对于对象是否为空返回 Boolean 值，requireNonNull 方法更加严格，如果一旦为空，会直接抛出异常，我们需要根据生活的场景选择使用。</p></li></ol><h4 id="1-3-5-面试题"><a href="#1-3-5-面试题" class="headerlink" title="1.3.5-面试题"></a>1.3.5-面试题</h4><ol><li><h5 id="工作中有没有遇到特别好用的工具类，如何写好一个工具类"><a href="#工作中有没有遇到特别好用的工具类，如何写好一个工具类" class="headerlink" title="工作中有没有遇到特别好用的工具类，如何写好一个工具类"></a>工作中有没有遇到特别好用的工具类，如何写好一个工具类</h5><p>答：有的，像 Arrays 的排序、二分查找、Collections 的不可变、线程安全集合类、Objects 的判空相等判断等等工具类，好的工具类肯定很好用，比如说使用 static final 关键字对方法进行修饰，工具类构造器必须是私有等等手段来写好工具类。</p></li><li><h5 id="写一个二分查找算法的实现"><a href="#写一个二分查找算法的实现" class="headerlink" title="写一个二分查找算法的实现"></a>写一个二分查找算法的实现</h5><p>答：可以参考 Arrays 的 binarySearch 方法的源码实现。</p></li><li><h5 id="如果我希望-ArrayList-初始化之后，不能被修改，该怎么办"><a href="#如果我希望-ArrayList-初始化之后，不能被修改，该怎么办" class="headerlink" title="如果我希望 ArrayList 初始化之后，不能被修改，该怎么办"></a>如果我希望 ArrayList 初始化之后，不能被修改，该怎么办</h5><p>答：可以使用 <code>Collections</code> 的 <code>unmodifiableList</code> 的方法，该方法会返回一个不能被修改的内部类集合，这些集合类只开放查询的方法，对于调用修改集合的方法会直接抛出异常。</p></li></ol><h4 id="1-3-6-总结"><a href="#1-3-6-总结" class="headerlink" title="1.3.6-总结"></a>1.3.6-总结</h4><p>从三大工具类中，我们不仅学习到了如何写好一个工具类，还熟悉了三大工具类的具体使用姿势，甚至了解了其底层的源码实现，有兴趣的话，可以自己也可以仿照写个好用的工具类加深学习。</p><h2 id="2-集合"><a href="#2-集合" class="headerlink" title="2-集合"></a>2-集合</h2><h3 id="2-1-ArrayList-源码解析和设计思路"><a href="#2-1-ArrayList-源码解析和设计思路" class="headerlink" title="2.1-ArrayList 源码解析和设计思路"></a>2.1-ArrayList 源码解析和设计思路</h3><p>ArrayList 我们几乎每天都会使用到，但真正面试的时候，发现还是有不少人对源码细节说不清楚，给面试官留下比较差的印象，本小节就和大家一起看看面试中和 ArrayList 相关的源码。</p><h4 id="2-1-1-整体架构"><a href="#2-1-1-整体架构" class="headerlink" title="2.1.1-整体架构"></a>2.1.1-整体架构</h4><p>ArrayList 整体架构比较简单，就是一个数组结构，比较简单，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayList.jpeg" alt="ArrayList"></p><p>图中展示是长度为 10 的数组，从 1 开始计数，index 表示数组的下标，从 0 开始计数，elementData 表示数组本身，源码中除了这两个概念，还有以下三个基本概念：</p><ul><li>DEFAULT_CAPACITY 表示数组的初始大小，默认是 10，这个数字要记住；</li><li>size 表示当前数组的大小，类型 int，没有使用 volatile 修饰，非线程安全的；</li><li>modCount 统计当前数组被修改的版本次数，数组结构有变动，就会 +1。</li></ul><p><strong>类注释</strong></p><p>看源码，首先要看类注释，我们看看类注释上面都说了什么，如下：</p><ul><li>允许 put null 值，会自动扩容；</li><li>size、isEmpty、get、set、add 等方法时间复杂度都是 O (1)；</li><li>是非线程安全的，多线程情况下，推荐使用线程安全类：Collections#synchronizedList；</li><li>增强 for 循环，或者使用迭代器迭代过程中，如果数组大小被改变，会快速失败，抛出异常。</li></ul><p>除了上述注释中提到的 4 点，初始化、扩容的本质、迭代器等问题也经常被问，接下来我们从源码出发，一一解析。</p><h4 id="2-1-2-源码解析"><a href="#2-1-2-源码解析" class="headerlink" title="2.1.2-源码解析"></a>2.1.2-源码解析</h4><ol><li><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h5><p>我们有三种初始化办法：<strong>无参数直接初始化</strong>、<strong>指定大小初始化</strong>、<strong>指定初始数据初始化</strong>。</p><p>源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参数直接初始化，数组大小为空</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指定初始数据初始化</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//elementData 是保存数组的容器，默认为 null</span>    elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果给定的集合（c）数据有值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>        <span class="token comment" spellcheck="true">//如果集合元素类型不是 Object 类型，我们会转成 Object</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 给定集合（c）无值，则默认空数组</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了源码的中文注释，我们补充两点：</p><ul><li><p>ArrayList 无参构造器初始化时，默认大小是空数组，并不是大家常说的 10，10 是在第一次 add 的时候扩容的数组值。</p></li><li><p>指定初始数据初始化时，我们发现一个这样子的注释 see 6260652，这是 Java 的一个 bug，意思是当给定集合内的元素不是 Object 类型时，我们会转化成 Object 的类型。一般情况下都不会触发此 bug，只有在下列场景下才会触发：ArrayList 初始化之后（ArrayList 元素非 Object 类型），再次调用 toArray 方法，得到 Object 数组，并且往 Object 数组赋值时，才会触发此 bug。</p><p>代码和原因如图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayList-%E5%88%9D%E5%A7%8B%E5%8C%96Bug.jpeg" alt="ArrayList-初始化Bug"></p><p>官方查看文档地址：<a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652，问题在" target="_blank" rel="noopener">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652，问题在</a> Java 9 中被解决。</p></li></ul></li></ol><ol start="2"><li><h5 id="新增和扩容实现"><a href="#新增和扩容实现" class="headerlink" title="新增和扩容实现"></a><strong>新增和扩容实现</strong></h5><p>新增就是往数组中添加元素，主要分成两步：</p><ul><li>判断是否需要扩容，如果需要执行扩容操作；</li><li>直接赋值。</li></ul><p>两步源码体现如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保数组大小是否足够，不够执行扩容，size 为当前数组的大小</span>  <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>  <span class="token comment" spellcheck="true">//直接赋值，线程不安全的</span>  elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们先看下扩容（ensureCapacityInternal）的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果初始化数组大小时，有给定初始值，以给定的大小为准，不走 if 逻辑</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    minCapacity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//确保容积足够</span>  <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//记录数组被修改</span>  modCount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果我们期望的最小容量大于目前数组的长度，那么就扩容</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//扩容，并把现有数据拷贝到新的数组里面去</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// oldCapacity >> 1 是把 oldCapacity 除以 2 的意思</span>  <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果扩容后的值 &lt; 我们的期望值，扩容后的值就等于我们的期望值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果扩容后的值 > jvm 所能分配的数组的最大值，那么就用 Integer 的最大值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过复制进行扩容</span>  elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注解应该比较详细，我们需要注意的四点是：</p><ul><li>扩容的规则并不是翻倍，是原来容量大小 + 容量大小的一半，直白来说，扩容后的大小是原来容量的 1.5 倍；</li><li>ArrayList 中的数组的最大值是 <code>Integer.MAX_VALUE</code>，超过这个值，JVM 就不会给数组分配内存空间了。</li><li>新增时，并没有对值进行严格的校验，所以 ArrayList 是允许 null 值的。</li></ul><p>从新增和扩容源码中，下面这点值得我们借鉴：</p><ul><li>源码在扩容的时候，有数组大小溢出意识，就是说扩容后数组的大小下界不能小于 0，上界不能大于 Integer 的最大值，这种意识我们可以学习。</li></ul><p>扩容完成之后，赋值是非常简单的，直接往数组上添加元素即可：<code>elementData [size++] = e</code>。也正是通过这种简单赋值，没有任何锁控制，所以这里的操作是线程不安全的。</p><p>对于新增和扩容的实现，画了一个动图，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayList-%E6%96%B0%E5%A2%9E%E5%92%8C%E6%89%A9%E5%AE%B9.jpeg" alt="ArrayList-新增和扩容"></p></li></ol><ol start="3"><li><h5 id="扩容的本质"><a href="#扩容的本质" class="headerlink" title="扩容的本质"></a><strong>扩容的本质</strong></h5><p>扩容是通过这行代码来实现的：<code>Arrays.copyOf(elementData, newCapacity);</code>，这行代码描述的本质是数组之间的拷贝，扩容是会先新建一个符合我们预期容量的新数组，然后把老数组的数据拷贝过去，我们通过 System.arraycopy 方法进行拷贝，此方法是 native 的方法。</p><p>源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @param src     被拷贝的数组 * @param srcPos  从数组那里开始 * @param dest    目标数组 * @param destPos 从目标数组那个索引位置开始拷贝 * @param length  拷贝的长度  * 此方法是没有返回值的，通过 dest 的引用进行传值 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>Object src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcPos<span class="token punctuation">,</span>                                    Object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span>                                    <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以通过下面这行代码进行调用，newElementData 表示新的数组：</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">,</span>newCapacity</code></pre></li><li><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h5><p>ArrayList 删除元素有很多种方式，比如根据数组索引删除、根据值删除或批量删除等等，原理和思路都差不多，我们选取根据值删除方式来进行源码说明：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果要删除的值是 null，找到第一个值是 null 的删除</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果要删除的值不为 null，找到第一个和要删除的值相等的删除</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 这里是根据  equals 来判断值相等的，相等后再根据索引位置进行删除</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们需要注意的两点是：</p><ul><li>新增的时候是没有对 null 进行校验的，所以删除的时候也是允许删除 null 值的；</li><li>找到值在数组中的索引位置，是通过 equals 来判断的，如果数组元素不是基本类型，需要我们关注 equals 的具体实现。</li></ul><p>上面代码已经找到要删除元素的索引位置了，下面代码是根据索引位置进行元素的删除：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 记录数组的结构要发生变动了</span>  modCount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// numMoved 表示删除 index 位置的元素后，需要从 index 后移动多少个元素到前面去</span>  <span class="token comment" spellcheck="true">// 减 1 的原因，是因为 size 从 1 开始算起，index 从 0开始算起</span>  <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从 index +1 位置开始被拷贝，拷贝的起始位置是 index，长度是 numMoved</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数组最后一个位置赋值 null，帮助 GC</span>  elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们可以看出，某一个元素被删除后，为了维护数组结构，我们都会把数组后面的元素往前移动，下面动图也演示了其过程：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayList-%E5%88%A0%E9%99%A4%E8%BF%87%E7%A8%8B.jpeg" alt="ArrayList-删除过程"></p></li></ol><ol start="5"><li><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><strong>迭代器</strong></h5><p>如果要自己实现迭代器，实现 java.util.Iterator 类就好了，ArrayList 也是这样做的，我们来看下迭代器的几个总要的参数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> cursor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 迭代过程中，下一个元素的位置，默认从 0 开始。</span><span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增场景：表示上一次迭代过程中，索引的位置；删除场景：为 -1。</span><span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expectedModCount 表示迭代过程中，期望的版本号；modCount 表示数组实际的版本号。</span></code></pre><p>迭代器一般来说有三个方法：</p><ul><li>hasNext 还有没有值可以迭代</li><li>next 如果有值可以迭代，迭代的值是多少</li><li>remove 删除当前迭代的值</li></ul><p>我们来分别看下三个方法的源码：</p><p><strong>hasNext</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cursor 表示下一个元素的位置，size 表示实际大小，如果两者相等，说明已经没有元素可以迭代了，如果不等，说明还可以迭代</span><span class="token punctuation">}</span></code></pre><p><strong>next</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//迭代过程中，判断版本号有无被修改，有被修改，抛 ConcurrentModificationException 异常</span>  <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//本次迭代过程中，元素的索引位置</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下一次迭代时，元素的位置，为下一次迭代做准备</span>  cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回元素值</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 版本号比较</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中可以看到，next 方法就干了两件事情，第一是检验能不能继续迭代，第二是找到迭代的值，并为下一次迭代做准备<code>（cursor+1）</code>。</p><p><strong>remove</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果上一次操作时，数组的位置已经小于 0 了，说明数组已经被删除完了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//迭代过程中，判断版本号有无被修改，有被修改，抛 ConcurrentModificationException 异常</span>  <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>    cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// -1 表示元素已经被删除，这里也防止重复删除</span>    lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除元素时 modCount 的值已经发生变化，在此赋值给 expectedModCount</span>    <span class="token comment" spellcheck="true">// 这样下次迭代时，两者的值是一致的了</span>    expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们需要注意的两点是：</p><ul><li>lastRet = -1 的操作目的，是防止重复删除操作</li><li>删除元素成功，数组当前 <code>modCount</code> 就会发生变化，这里会把 <code>expectedModCount</code> 重新赋值，下次迭代时两者的值就会一致了</li></ul></li></ol><ol start="6"><li><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>从我们上面新增或删除方法的源码解析，对数组元素的操作，只需要根据数组索引，直接新增和删除，所以时间复杂度是 O (1)。</p></li></ol><ol start="7"><li><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>我们需要强调的是，只有当 ArrayList 作为共享变量时，才会有线程安全问题，当 ArrayList 是方法内的局部变量时，是没有线程安全的问题的。</p><p>ArrayList 有线程安全问题的本质，是因为 ArrayList 自身的 elementData、size、modConut 在进行各种操作时，都没有加锁，而且这些变量的类型并非是可见（volatile）的，所以如果多个线程对这些变量进行操作时，可能会有值被覆盖的情况。</p><p>类注释中推荐我们使用 Collections#synchronizedList 来保证线程安全，SynchronizedList 是通过在每个方法上面加上锁来实现，虽然实现了线程安全，但是性能大大降低，具体实现源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// synchronized 是一种轻量锁，mutex 表示一个当前 SynchronizedList</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="2-1-3-总结"><a href="#2-1-3-总结" class="headerlink" title="2.1.3-总结"></a>2.1.3-总结</h4><p>本文从 ArrayList 整体架构出发，落地到初始化、新增、扩容、删除、迭代等核心源码实现，我们发现 ArrayList 其实就是围绕底层数组结构，各个 API 都是对数组的操作进行封装，让使用者无需感知底层实现，只需关注如何使用即可。</p><h3 id="2-2-LinkedList-源码解析"><a href="#2-2-LinkedList-源码解析" class="headerlink" title="2.2-LinkedList 源码解析"></a>2.2-LinkedList 源码解析</h3><p>LinkedList 适用于集合元素先入先出和先入后出的场景，在队列源码中被频繁使用，面试也经常问到，本小节让我们通过源码来加深对 LinkedList 的了解。</p><h4 id="2-2-1-整体架构"><a href="#2-2-1-整体架构" class="headerlink" title="2.2.1-整体架构"></a>2.2.1-整体架构</h4><p>LinkedList 底层数据结构是一个双向链表，整体结构如下图所示：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/LinkedList.jpeg" alt="LinkedList"></p><p>上图代表了一个双向链表结构，链表中的每个节点都可以向前或者向后追溯，我们有几个概念如下：</p><ul><li>链表每个节点我们叫做 Node，Node 有 prev 属性，代表前一个节点的位置，next 属性，代表后一个节点的位置；</li><li>first 是双向链表的头节点，它的前一个节点是 null。</li><li>last 是双向链表的尾节点，它的后一个节点是 null；</li><li>当链表中没有数据时，first 和 last 是同一个节点，前后指向都是 null；</li><li>因为是个双向链表，只要机器内存足够强大，是没有大小限制的。</li></ul><p>链表中的元素叫做 Node，我们看下 Node 的组成部分：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E item<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 节点值</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向的下一个节点</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向的前一个节点</span>    <span class="token comment" spellcheck="true">// 初始化参数顺序分别是：前一个节点、本身节点值、后一个节点</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-源码解析"><a href="#2-2-2-源码解析" class="headerlink" title="2.2.2-源码解析"></a>2.2.2-源码解析</h4><h5 id="1-新增"><a href="#1-新增" class="headerlink" title="1.新增"></a>1.新增</h5><p>追加节点时，我们可以选择追加到链表头部，还是追加到链表尾部，add 方法默认是从尾部开始追加，addFirst 方法是从头部开始追加，我们分别来看下两种不同的追加方式：</p><p><strong>从尾部追加（add）</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从尾部开始追加节点</span><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把尾节点数据暂存</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新建新的节点，初始化入参含义：</span>    <span class="token comment" spellcheck="true">// l 是新节点的前一个节点，当前值是尾节点值</span>    <span class="token comment" spellcheck="true">// e 表示当前新增节点，当前新增节点后一个节点是 null</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新建节点追加到尾部</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果链表为空（l 是尾节点，尾节点为空，链表即空），头部和尾部是同一个节点，都是新建的节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token operator">!</span><span class="token punctuation">[</span>图片描述<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">//img.mukewang.com/5d5fc69600013e4803600240.gif)</span>    <span class="token comment" spellcheck="true">//否则把前尾节点的下一个节点，指向当前尾节点。</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//大小和版本更改</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码上来看，尾部追加节点比较简单，只需要简单地把指向位置修改下即可，我们做个动图来描述下整个过程：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/LinkedList-%E6%96%B0%E5%A2%9E.jpeg" alt="LinkedList-新增"></p><p><strong>从头部追加（addFirst）</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从头部追加</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 头节点赋值给临时变量</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新建节点，前一个节点指向null，e 是新建节点，f 是新建节点的下一个节点，目前值是头节点的值</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新建节点成为头节点</span>    first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头节点为空，就是链表为空，头尾节点是一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上一个头节点的前一个节点指向当前节点</span>    <span class="token keyword">else</span>        f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>头部追加节点和尾部追加节点非常类似，只是前者是移动头节点的 prev 指向，后者是移动尾节点的 next 指向。</p><h5 id="2-节点删除"><a href="#2-节点删除" class="headerlink" title="2.节点删除"></a>2.节点删除</h5><p>节点删除的方式和追加类似，我们可以选择从头部删除，也可以选择从尾部删除，删除操作会把节点的值，前后指向节点都置为 null，帮助 GC 进行回收。</p><p><strong>从头部删除</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从头删除节点 f 是链表头节点</span><span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿出头节点的值，作为方法的返回值</span>    <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿出头节点的下一个节点</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//帮助 GC 回收头节点</span>    f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>    f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头节点的下一个节点成为头节点</span>    first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果 next 为空，表明链表为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>        last <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//链表不为空，头节点的前一个节点指向 null</span>    <span class="token keyword">else</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改链表大小和版本</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从尾部删除节点代码也是类似的，就不贴了。</p><p><strong>从源码中我们可以了解到，链表结构的节点新增、删除都非常简单，仅仅把前后节点的指向修改下就好了，所以 LinkedList 新增和删除速度很快。</strong></p><h5 id="3-节点查询"><a href="#3-节点查询" class="headerlink" title="3.节点查询"></a>3.节点查询</h5><p>链表查询某一个节点是比较慢的，需要挨个循环查找才行，我们看看 LinkedList 的源码是如何寻找节点的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据链表索引位置查询节点</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 index 处于队列的前半部分，从头开始找，size >> 1 是 size 除以 2 的意思。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直到 for 循环到 index 的前一个 node 停止</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果 index 处于队列的后半部分，从尾开始找</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直到 for 循环到 index 的后一个 node 停止</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中我们可以发现，LinkedList 并没有采用从头循环到尾的做法，而是采取了简单二分法，首先看看 index 是在链表的前半部分，还是后半部分。如果是前半部分，就从头开始寻找，反之亦然。通过这种方式，使循环的次数至少降低了一半，提高了查找的性能，这种思想值得我们借鉴。</p><h5 id="4-方法对比"><a href="#4-方法对比" class="headerlink" title="4.方法对比"></a>4.方法对比</h5><p>LinkedList 实现了 Queue 接口，在新增、删除、查询等方面增加了很多新的方法，这些方法在平时特别容易混淆，在链表为空的情况下，返回值也不太一样，我们列一个表格，方便大家记录：</p><table><thead><tr><th align="left">方法含义</th><th align="left">返回异常</th><th align="left">返回特殊值</th><th align="left">底层实现</th></tr></thead><tbody><tr><td align="left">新增</td><td align="left">add(e)</td><td align="left">offer(e)</td><td align="left">底层实现相同</td></tr><tr><td align="left">删除</td><td align="left">remove()</td><td align="left">poll(e)</td><td align="left">链表为空时，remove 会抛出异常，poll 返回 null。</td></tr><tr><td align="left">查找</td><td align="left">element()</td><td align="left">peek()</td><td align="left">链表为空时，element 会抛出异常，peek 返回 null。</td></tr></tbody></table><p>PS：Queue 接口注释建议 add 方法操作失败时抛出异常，但 LinkedList 实现的 add 方法一直返回 true。<br>LinkedList 也实现了 Deque 接口，对新增、删除和查找都提供从头开始，还是从尾开始两种方向的方法，比如 remove 方法，Deque 提供了 removeFirst 和 removeLast 两种方向的使用方式，但当链表为空时的表现都和 remove 方法一样，都会抛出异常。</p><h5 id="5-迭代器"><a href="#5-迭代器" class="headerlink" title="5.迭代器"></a>5.迭代器</h5><p>因为 LinkedList 要实现双向的迭代访问，所以我们使用 Iterator 接口肯定不行了，因为 Iterator 只支持从头到尾的访问。Java 新增了一个迭代接口，叫做：ListIterator，这个接口提供了向前和向后的迭代方法，如下所示：</p><table><thead><tr><th align="left">迭代顺序</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">从尾到头迭代方法</td><td align="left">hasPrevious、previous、previousIndex</td></tr><tr><td align="left">从头到尾迭代方法</td><td align="left">hasNext、next、nextIndex</td></tr></tbody></table><p>LinkedList 实现了 <code>ListIterator</code> 接口，如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 双向迭代器</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> lastReturned<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一次执行 next() 或者 previos() 方法时的节点位置</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一个节点</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一个节点的位置</span>    <span class="token comment" spellcheck="true">//expectedModCount：期望版本号；modCount：目前最新版本号</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    …………<span class="token punctuation">}</span></code></pre><p>我们先来看下从头到尾方向的迭代：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断还有没有下一个元素</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下一个节点的索引小于链表的大小，就有</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 取下一个元素</span><span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查期望版本号有无发生变化</span>    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//再次检查</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// next 是当前节点，在上一次执行 next() 方法时被赋值的。</span>    <span class="token comment" spellcheck="true">// 第一次执行时，是在初始化迭代器的时候，next 被赋值的</span>    lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// next 是下一个节点了，为下次迭代做准备</span>    next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述源码的思路就是直接取当前节点的下一个节点，而从尾到头迭代稍微复杂一点，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果上次节点索引位置大于 0，就还有节点可以迭代</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nextIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 取前一个节点</span><span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// next 为空场景：1:说明是第一次迭代，取尾节点(last);2:上一次操作把尾节点删除掉了</span>    <span class="token comment" spellcheck="true">// next 不为空场景：说明已经发生过迭代了，直接取前一个节点即可(next.prev)</span>    lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 索引位置变化</span>    nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里复杂点体现在需要判断 next 不为空和为空的场景，代码注释中有详细的描述。</p><p><strong>迭代器删除</strong></p><p>LinkedList 在删除元素时，也推荐通过迭代器进行删除，删除过程如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lastReturned 是本次迭代需要删除的值，分以下空和非空两种情况：</span>    <span class="token comment" spellcheck="true">// lastReturned 为空，说明调用者没有主动执行过 next() 或者 previos()，直接报错</span>    <span class="token comment" spellcheck="true">// lastReturned 不为空，是在上次执行 next() 或者 previos()方法时赋的值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除当前节点</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// next == lastReturned 的场景分析：从尾到头递归顺序，并且是第一次迭代，并且要删除最后一个元素的情况下</span>    <span class="token comment" spellcheck="true">// 这种情况下，previous() 方法里面设置了 lastReturned = next = last,所以 next 和 lastReturned会相等</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 这时候 lastReturned 是尾节点，lastNext 是 null，所以 next 也是 null，这样在 previous() 执行时，发现 next 是 null，就会把尾节点赋值给 next</span>        next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>    <span class="token keyword">else</span>        nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>    lastReturned <span class="token operator">=</span> null<span class="token punctuation">;</span>    expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-总结"><a href="#2-2-3-总结" class="headerlink" title="2.2.3-总结"></a>2.2.3-总结</h4><p>LinkedList 适用于要求有顺序、并且会按照顺序进行迭代的场景，主要是依赖于底层的链表结构，在面试中的频率还是蛮高的，相信理清楚上面的源码后，应对面试应该没有问题。</p><h3 id="2-3-List-源码会问哪些面试题"><a href="#2-3-List-源码会问哪些面试题" class="headerlink" title="2.3-List 源码会问哪些面试题"></a>2.3-List 源码会问哪些面试题</h3><p>List 作为工作中最常见的集合类型，在面试过程中，也是经常会被问到各种各样的面试题，一般来说，只要你看过源码，心中对 List 的总体结构和细节有所了解的话，基本问题都不大。</p><h4 id="2-3-1-面试题"><a href="#2-3-1-面试题" class="headerlink" title="2.3.1-面试题"></a>2.3.1-面试题</h4><h5 id="1-说说你自己对-ArrayList-的理解？"><a href="#1-说说你自己对-ArrayList-的理解？" class="headerlink" title="1. 说说你自己对 ArrayList 的理解？"></a>1. 说说你自己对 ArrayList 的理解？</h5><p>很多面试官喜欢这样子开头，考察面试同学对 ArrayList 有没有总结经验，介于 ArrayList 内容很多，建议先回答总体架构，再从某个细节出发作为突破口，比如这样：<br>ArrayList 底层数据结构是个数组，其 API 都做了一层对数组底层访问的封装，比如说 add 方法的过程是……（这里可以引用我们在 ArrayList 源码解析中 add 的过程）。</p><p>一般面试官看你回答得井井有条，并且没啥漏洞的话，基本就不会深究了，这样面试的主动权就掌握在自己手里面了，如果你回答得支支吾吾，那么面试官可能就会开启自己面试的套路了。</p><p>说说你自己对 LinkedList 的理解也是同样套路。</p><h5 id="2-扩容类问题"><a href="#2-扩容类问题" class="headerlink" title="2.扩容类问题"></a>2.扩容类问题</h5><h6 id="2-1-ArrayList-无参数构造器构造，现在-add-一个值进去，此时数组的大小是多少，下一次扩容前最大可用大小是多少？"><a href="#2-1-ArrayList-无参数构造器构造，现在-add-一个值进去，此时数组的大小是多少，下一次扩容前最大可用大小是多少？" class="headerlink" title="2.1-ArrayList 无参数构造器构造，现在 add 一个值进去，此时数组的大小是多少，下一次扩容前最大可用大小是多少？"></a>2.1-ArrayList 无参数构造器构造，现在 add 一个值进去，此时数组的大小是多少，下一次扩容前最大可用大小是多少？</h6><p>答：此处数组的大小是 1，下一次扩容前最大可用大小是 10，因为 ArrayList 第一次扩容时，是有默认值的，默认值是 10，在第一次 add 一个值进去时，数组的可用大小被扩容到 10 了。</p><h6 id="2-2-如果我连续往-list-里面新增值，增加到第-11-个的时候，数组的大小是多少？"><a href="#2-2-如果我连续往-list-里面新增值，增加到第-11-个的时候，数组的大小是多少？" class="headerlink" title="2.2-如果我连续往 list 里面新增值，增加到第 11 个的时候，数组的大小是多少？"></a>2.2-如果我连续往 list 里面新增值，增加到第 11 个的时候，数组的大小是多少？</h6><p>答：这里的考查点就是扩容的公式，当增加到 11 的时候，此时我们希望数组的大小为 11，但实际上数组的最大容量只有 10，不够了就需要扩容，扩容的公式是：oldCapacity + (oldCapacity&gt;&gt; 1)，oldCapacity 表示数组现有大小，目前场景计算公式是：10 + 10 ／2 = 15，然后我们发现 15 已经够用了，所以数组的大小会被扩容到 15。</p><h6 id="2-3-数组初始化，被加入一个值后，如果我使用-addAll-方法，一下子加入-15-个值，那么最终数组的大小是多少？"><a href="#2-3-数组初始化，被加入一个值后，如果我使用-addAll-方法，一下子加入-15-个值，那么最终数组的大小是多少？" class="headerlink" title="2.3-数组初始化，被加入一个值后，如果我使用 addAll 方法，一下子加入 15 个值，那么最终数组的大小是多少？"></a>2.3-数组初始化，被加入一个值后，如果我使用 addAll 方法，一下子加入 15 个值，那么最终数组的大小是多少？</h6><p>答：第一题中我们已经计算出来数组在加入一个值后，实际大小是 1，最大可用大小是 10 ，现在需要一下子加入 15 个值，那我们期望数组的大小值就是 16，此时数组最大可用大小只有 10，明显不够，需要扩容，扩容后的大小是：10 + 10 ／2 = 15，这时候发现扩容后的大小仍然不到我们期望的值 16，这时候源码中有一种策略如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// newCapacity 本次扩容的大小，minCapacity 我们期望的数组最小大小</span><span class="token comment" spellcheck="true">// 如果扩容后的值 &lt; 我们的期望值，我们的期望值就等于本次扩容的大小</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span></code></pre><p>所以最终数组扩容后的大小为 16。</p><h6 id="2-4-现在我有一个很大的数组需要拷贝，原数组大小是-5k，请问如何快速拷贝？"><a href="#2-4-现在我有一个很大的数组需要拷贝，原数组大小是-5k，请问如何快速拷贝？" class="headerlink" title="2.4-现在我有一个很大的数组需要拷贝，原数组大小是 5k，请问如何快速拷贝？"></a>2.4-现在我有一个很大的数组需要拷贝，原数组大小是 5k，请问如何快速拷贝？</h6><p>答：因为原数组比较大，如果新建新数组的时候，不指定数组大小的话，就会频繁扩容，频繁扩容就会有大量拷贝的工作，造成拷贝的性能低下，所以回答说新建数组时，指定新数组的大小为 5k 即可。</p><h6 id="2-5-为什么说扩容会消耗性能？"><a href="#2-5-为什么说扩容会消耗性能？" class="headerlink" title="2.5-为什么说扩容会消耗性能？"></a>2.5-为什么说扩容会消耗性能？</h6><p>答：扩容底层使用的是 System.arraycopy 方法，会把原数组的数据全部拷贝到新数组上，所以性能消耗比较严重。</p><h6 id="2-6-源码扩容过程有什么值得借鉴的地方？"><a href="#2-6-源码扩容过程有什么值得借鉴的地方？" class="headerlink" title="2.6-源码扩容过程有什么值得借鉴的地方？"></a>2.6-源码扩容过程有什么值得借鉴的地方？</h6><p>答：有两点：</p><ul><li>是扩容的思想值得学习，通过自动扩容的方式，让使用者不用关心底层数据结构的变化，封装得很好，1.5 倍的扩容速度，可以让扩容速度在前期缓慢上升，在后期增速较快，大部分工作中要求数组的值并不是很大，所以前期增长缓慢有利于节省资源，在后期增速较快时，也可快速扩容。</li><li>扩容过程中，有数组大小溢出的意识，比如要求扩容后的数组大小，不能小于 0，不能大于 Integer 的最大值。</li></ul><p>这两点在我们平时设计和写代码时都可以借鉴。</p><h5 id="3-删除类问题"><a href="#3-删除类问题" class="headerlink" title="3.删除类问题"></a>3.删除类问题</h5><h6 id="3-1-有一个-ArrayList，数据是-2、3、3、3、4，中间有三个-3，现在我通过-for-int-i-0-i-lt-list-size-i-的方式，想把值是-3-的元素删除，请问可以删除干净么？最终删除的结果是什么，为什么？删除代码如下："><a href="#3-1-有一个-ArrayList，数据是-2、3、3、3、4，中间有三个-3，现在我通过-for-int-i-0-i-lt-list-size-i-的方式，想把值是-3-的元素删除，请问可以删除干净么？最终删除的结果是什么，为什么？删除代码如下：" class="headerlink" title="3.1-有一个 ArrayList，数据是 2、3、3、3、4，中间有三个 3，现在我通过 for (int i=0;i&lt;list.size ();i++) 的方式，想把值是 3 的元素删除，请问可以删除干净么？最终删除的结果是什么，为什么？删除代码如下："></a>3.1-有一个 ArrayList，数据是 2、3、3、3、4，中间有三个 3，现在我通过 for (int i=0;i&lt;list.size ();i++) 的方式，想把值是 3 的元素删除，请问可以删除干净么？最终删除的结果是什么，为什么？删除代码如下：</h6><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>答：不能删除干净，最终删除的结果是 2、3、4，有一个 3 删除不掉，原因我们看下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayList-%E5%88%A0%E9%99%A4%E5%8E%9F%E5%9B%A0.jpeg" alt="ArrayList-删除原因"></p><p>从图中我们可以看到，每次删除一个元素后，该元素后面的元素就会往前移动，而此时循环的 i 在不断地增长，最终会使每次删除 3 的后一个 3 被遗漏，导致删除不掉。</p><h6 id="3-2-还是上面的-ArrayList-数组，我们通过增强-for-循环进行删除，可以么？"><a href="#3-2-还是上面的-ArrayList-数组，我们通过增强-for-循环进行删除，可以么？" class="headerlink" title="3.2-还是上面的 ArrayList 数组，我们通过增强 for 循环进行删除，可以么？"></a>3.2-还是上面的 ArrayList 数组，我们通过增强 for 循环进行删除，可以么？</h6><p>答：不可以，会报错。因为增强 for 循环过程其实调用的就是迭代器的 next () 方法，当你调用 list#remove () 方法进行删除时，modCount 的值会 +1，而这时候迭代器中的 expectedModCount 的值却没有变，导致在迭代器下次执行 next () 方法时，expectedModCount != modCount 就会报 ConcurrentModificationException 的错误。</p><h6 id="3-3-还是上面的数组，如果删除时使用-Iterator-remove-方法可以删除么，为什么？"><a href="#3-3-还是上面的数组，如果删除时使用-Iterator-remove-方法可以删除么，为什么？" class="headerlink" title="3.3-还是上面的数组，如果删除时使用 Iterator.remove () 方法可以删除么，为什么？"></a>3.3-还是上面的数组，如果删除时使用 Iterator.remove () 方法可以删除么，为什么？</h6><p>答：可以的，因为 Iterator.remove () 方法在执行的过程中，会把最新的 modCount 赋值给 expectedModCount，这样在下次循环过程中，modCount 和 expectedModCount 两者就会相等。</p><h6 id="3-4-以上三个问题对于-LinkedList-也是同样的结果么？"><a href="#3-4-以上三个问题对于-LinkedList-也是同样的结果么？" class="headerlink" title="3.4-以上三个问题对于 LinkedList 也是同样的结果么？"></a>3.4-以上三个问题对于 LinkedList 也是同样的结果么？</h6><p>答：是的，虽然 LinkedList 底层结构是双向链表，但对于上述三个问题，结果和 ArrayList 是一致的。</p><h5 id="4-对比类问题"><a href="#4-对比类问题" class="headerlink" title="4.对比类问题"></a>4.对比类问题</h5><h6 id="4-1-ArrayList-和-LinkedList-有何不同？"><a href="#4-1-ArrayList-和-LinkedList-有何不同？" class="headerlink" title="4.1-ArrayList 和 LinkedList 有何不同？"></a>4.1-ArrayList 和 LinkedList 有何不同？</h6><p>答：可以先从底层数据结构开始说起，然后以某一个方法为突破口深入，比如：最大的不同是两者底层的数据结构不同，ArrayList 底层是数组，LinkedList 底层是双向链表，两者的数据结构不同也导致了操作的 API 实现有所差异，拿新增实现来说，ArrayList 会先计算并决定是否扩容，然后把新增的数据直接赋值到数组上，而 LinkedList 仅仅只需要改变插入节点和其前后节点的指向位置关系即可。</p><h6 id="4-2-ArrayList-和-LinkedList-应用场景有何不同"><a href="#4-2-ArrayList-和-LinkedList-应用场景有何不同" class="headerlink" title="4.2-ArrayList 和 LinkedList 应用场景有何不同"></a>4.2-ArrayList 和 LinkedList 应用场景有何不同</h6><p>答：ArrayList 更适合于快速的查找匹配，不适合频繁新增删除，像工作中经常会对元素进行匹配查询的场景比较合适，LinkedList 更适合于经常新增和删除，对查询反而很少的场景。</p><h6 id="4-3-ArrayList-和-LinkedList-两者有没有最大容量"><a href="#4-3-ArrayList-和-LinkedList-两者有没有最大容量" class="headerlink" title="4.3-ArrayList 和 LinkedList 两者有没有最大容量"></a>4.3-ArrayList 和 LinkedList 两者有没有最大容量</h6><p>答：ArrayList 有最大容量的，为 Integer 的最大值，大于这个值 JVM 是不会为数组分配内存空间的，LinkedList 底层是双向链表，理论上可以无限大。但源码中，LinkedList 实际大小用的是 int 类型，这也说明了 LinkedList 不能超过 Integer 的最大值，不然会溢出。</p><h6 id="4-4-ArrayList-和-LinkedList-是如何对-null-值进行处理的"><a href="#4-4-ArrayList-和-LinkedList-是如何对-null-值进行处理的" class="headerlink" title="4.4-ArrayList 和 LinkedList 是如何对 null 值进行处理的"></a>4.4-ArrayList 和 LinkedList 是如何对 null 值进行处理的</h6><p>答：ArrayList 允许 null 值新增，也允许 null 值删除。删除 null 值时，是从头开始，找到第一值是 null 的元素删除；LinkedList 新增删除时对 null 值没有特殊校验，是允许新增和删除的。</p><h6 id="4-5-ArrayList-和-LinedList-是线程安全的么，为什么？"><a href="#4-5-ArrayList-和-LinedList-是线程安全的么，为什么？" class="headerlink" title="4.5-ArrayList 和 LinedList 是线程安全的么，为什么？"></a>4.5-ArrayList 和 LinedList 是线程安全的么，为什么？</h6><p>答：当两者作为非共享变量时，比如说仅仅是在方法里面的局部变量时，是没有线程安全问题的，只有当两者是共享变量时，才会有线程安全问题。主要的问题点在于多线程环境下，所有线程任何时刻都可对数组和链表进行操作，这会导致值被覆盖，甚至混乱的情况。</p><p>如果有线程安全问题，在迭代的过程中，会频繁报 ConcurrentModificationException 的错误，意思是在我当前循环的过程中，数组或链表的结构被其它线程修改了。</p><h6 id="4-6-如何解决线程安全问题？"><a href="#4-6-如何解决线程安全问题？" class="headerlink" title="4.6-如何解决线程安全问题？"></a>4.6-如何解决线程安全问题？</h6><p>Java 源码中推荐使用 Collections#synchronizedList 进行解决，Collections#synchronizedList 的返回值是 List 的每个方法都加了 synchronized 锁，保证了在同一时刻，数组和链表只会被一个线程所修改，或者采用 CopyOnWriteArrayList 并发 List 来解决，这个类我们后面会说。</p><h5 id="5-其他类型问题"><a href="#5-其他类型问题" class="headerlink" title="5.其他类型问题"></a>5.其他类型问题</h5><h6 id="5-1-你能描述下双向链表么？"><a href="#5-1-你能描述下双向链表么？" class="headerlink" title="5.1-你能描述下双向链表么？"></a>5.1-你能描述下双向链表么？</h6><p>答：如果和面试官面对面沟通的话，你可以去画一下，可以把 《LinkedList 源码解析》中的 LinkedList 的结构画出来，如果是电话面试，可以这么描述：双向链表中双向的意思是说前后节点之间互相有引用，链表的节点我们称为 Node。Node 有三个属性组成：其前一个节点，本身节点的值，其下一个节点，假设 A、B 节点相邻，A 节点的下一个节点就是 B，B 节点的上一个节点就是 A，两者互相引用，在链表的头部节点，我们称为头节点。头节点的前一个节点是 null，尾部称为尾节点，尾节点的后一个节点是 null，如果链表数据为空的话，头尾节点是同一个节点，本身是 null，指向前后节点的值也是 null。</p><h6 id="5-2-描述下双向链表的新增和删除"><a href="#5-2-描述下双向链表的新增和删除" class="headerlink" title="5.2-描述下双向链表的新增和删除"></a>5.2-描述下双向链表的新增和删除</h6><p>答：如果是面对面沟通，最好可以直接画图，如果是电话面试，可以这么描述：</p><p>新增：我们可以选择从链表头新增，也可以选择从链表尾新增，如果是从链表尾新增的话，直接把当前节点追加到尾节点之后，本身节点自动变为尾节点。</p><p>删除：把删除节点的后一个节点的 prev 指向其前一个节点，把删除节点的前一个节点的 next 指向其后一个节点，最后把删除的节点置为 null 即可。</p><h4 id="2-3-2-总结"><a href="#2-3-2-总结" class="headerlink" title="2.3.2-总结"></a>2.3.2-总结</h4><p>List 在工作中经常遇到，熟读源码不仅仅是为了应对面试，也为了在工作中使用起来得心应手，如果想更深入了解 List，可以看一遍 ArrayList 源码之后，自己重新实现一个 List。这样的话，就会对 List 底层的数据结构和操作细节理解更深。</p><h3 id="2-4-HashMap-源码解析"><a href="#2-4-HashMap-源码解析" class="headerlink" title="2.4-HashMap 源码解析"></a>2.4-HashMap 源码解析</h3><p>HashMap 源码很长，面试的问题也非常多，但这些面试问题，基本都是从源码中衍生出来的，所以我们只需要弄清楚其底层实现原理，回答这些问题就会游刃有余。</p><h4 id="2-4-1-整体架构"><a href="#2-4-1-整体架构" class="headerlink" title="2.4.1-整体架构"></a>2.4.1-整体架构</h4><p>HashMap 底层的数据结构主要是：数组 + 链表 + 红黑树。其中当链表的长度大于等于 8 时，链表会转化成红黑树，当红黑树的大小小于等于 6 时，红黑树会转化成链表，整体的数据结构如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/HashMap.jpeg" alt="HashMap"></p><p>图中左边竖着的是 HashMap 的数组结构，数组的元素可能是单个 Node，也可能是个链表，也可能是个红黑树，比如数组下标索引为 2 的位置就是一个链表，下标索引为 9 的位置对应的就是红黑树，具体细节我们下文再说。</p><h5 id="1-类注释"><a href="#1-类注释" class="headerlink" title="1.类注释"></a>1.类注释</h5><p>从 HashMap 的类注释中，我们可以得到如下信息：</p><ul><li>允许 null 值，不同于 HashTable ，是线程不安全的；</li><li><code>load factor</code>（影响因子） 默认值是 0.75， 是均衡了时间和空间损耗算出来的值，较高的值会减少空间开销（扩容减少，数组大小增长速度变慢），但增加了查找成本（hash 冲突增加，链表长度变长），不扩容的条件：数组容量 &gt; 需要的数组大小 /load factor；</li><li>如果有很多数据需要储存到 HashMap 中，建议 HashMap 的容量一开始就设置成足够的大小，这样可以防止在其过程中不断的扩容，影响性能；</li><li>HashMap 是非线程安全的，我们可以自己在外部加锁，或者通过 Collections#synchronizedMap 来实现线程安全，Collections#synchronizedMap 的实现是在每个方法上加上了 synchronized 锁；</li><li>在迭代过程中，如果 HashMap 的结构被修改，会快速失败。</li></ul><h5 id="2-常见属性"><a href="#2-常见属性" class="headerlink" title="2.常见属性"></a>2.常见属性</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始容量为 16</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最大容量</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//负载因子默认值</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//桶上的链表长度大于等于8时，链表转化成红黑树</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//桶上的红黑树大小小于等于6时，红黑树转化成链表</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当数组容量大于 64 时，链表才会转化成红黑树</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录迭代过程中 HashMap 结构是否发生变化，如果有变化，迭代时会 fail-fast</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HashMap 的实际大小，可能不准(因为当你拿到这个值的时候，可能又发生了变化)</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存放数据的数组</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 扩容的门槛，有两种情况</span> <span class="token comment" spellcheck="true">// 如果初始化时，给定数组大小的话，通过 tableSizeFor 方法计算，数组大小永远接近于 2 的幂次方，比如你给定初始化大小 19，实际上初始化大小为 32，为 2 的 5 次方。</span> <span class="token comment" spellcheck="true">// 如果是通过 resize 方法进行扩容，大小 = 数组容量 * 0.75</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//链表的节点</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//红黑树的节点</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span></code></pre><h4 id="2-4-2-新增"><a href="#2-4-2-新增" class="headerlink" title="2.4.2-新增"></a>2.4.2-新增</h4><p>新增 key，value 大概的步骤如下：</p><ol><li>空数组有无初始化，没有的话初始化；</li><li>如果通过 key 的 hash 能够直接找到值，跳转到 6，否则到 3；</li><li>如果 hash 冲突，两种解决方案：链表 or 红黑树；</li><li>如果是链表，递归循环，把新元素追加到队尾；</li><li>如果是红黑树，调用红黑树新增的方法；</li><li>通过 2、4、5 将新元素追加成功，再根据 onlyIfAbsent 判断是否需要覆盖；</li><li>判断是否需要扩容，需要扩容进行扩容，结束。</li></ol><p>我们来画一张示意图来描述下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/HashMap-%E6%96%B0%E5%A2%9E%E8%BF%87%E7%A8%8B.jpeg" alt="HashMap-新增过程"></p><p>代码细节如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 入参 hash：通过 hash 算法计算出来的值。</span><span class="token comment" spellcheck="true">// 入参 onlyIfAbsent：false 表示即使 key 已经存在了，仍然会用新值覆盖原来的值，默认为 false</span><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// n 表示数组的长度，i 为数组索引下标，p 为 i 下标位置的 Node 值</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果数组为空，使用 resize 方法初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果当前索引位置是空的，直接生成新的节点在当前索引位置上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果当前索引位置有值的处理方法，即我们常说的如何解决 hash 冲突</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// e 当前节点的临时变量</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 key 的 hash 和值都相等，直接把当前下标位置的 Node 值赋值给临时变量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果是红黑树，使用红黑树的方式新增</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是个链表，把新节点放到链表的尾端</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自旋</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// e = p.next 表示从头开始，遍历链表</span>                <span class="token comment" spellcheck="true">// p.next == null 表明 p 是链表的尾节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 把新节点放到链表的尾部 </span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 当链表的长度大于等于 8 时，链表转红黑树</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 链表遍历过程中，发现有元素和新增的元素相等，结束循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更改循环的当前元素，使 p 在遍历过程中，一直往后移动。</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 说明新节点的新增位置已经找到了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当 onlyIfAbsent 为 false 时，才会覆盖值 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回老值</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 记录 HashMap 的数据结构发生了变化</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果 HashMap 的实际大小大于扩容的门槛，开始扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新增的流程上面应该已经表示很清楚了，接下来我们来看看链表和红黑树新增的细节：</p><h5 id="1-链表的新增"><a href="#1-链表的新增" class="headerlink" title="1.链表的新增"></a>1.链表的新增</h5><p>链表的新增比较简单，就是把当前节点追加到链表的尾部，和 LinkedList 的追加实现一样的。</p><p>当链表长度大于等于 8 时，此时的链表就会转化成红黑树，转化的方法是：treeifyBin，此方法有一个判断，当链表长度大于等于 8，并且整个数组大小大于 64 时，才会转成红黑树，当数组大小小于 64 时，只会触发扩容，不会转化成红黑树，转化成红黑树的过程也比较简单，具体转化的过程源码可以去 github：<a href="https://github.com/luanqiu/java8" target="_blank" rel="noopener">https://github.com/luanqiu/java8</a> 上面去查看。</p><p>可能面试的时候，有人问你为什么是 8，这个答案在源码中注释有说，中文翻译过来大概的意思是：</p><p>链表查询的时间复杂度是 O (n)，红黑树的查询复杂度是 O (log (n))。在链表数据不多的时候，使用链表进行遍历也比较快，只有当链表数据比较多的时候，才会转化成红黑树，但红黑树需要的占用空间是链表的 2 倍，考虑到转化时间和空间损耗，所以我们需要定义出转化的边界值。</p><p>在考虑设计 8 这个值的时候，我们参考了泊松分布概率函数，由泊松分布中得出结论，链表各个长度的命中概率为：</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> <span class="token number">0</span><span class="token operator">:</span>    <span class="token number">0.60653066</span><span class="token operator">*</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token number">0.30326533</span><span class="token operator">*</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token number">0.07581633</span><span class="token operator">*</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token number">0.01263606</span><span class="token operator">*</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token number">0.00157952</span><span class="token operator">*</span> <span class="token number">5</span><span class="token operator">:</span>    <span class="token number">0.00015795</span><span class="token operator">*</span> <span class="token number">6</span><span class="token operator">:</span>    <span class="token number">0.00001316</span><span class="token operator">*</span> <span class="token number">7</span><span class="token operator">:</span>    <span class="token number">0.00000094</span><span class="token operator">*</span> <span class="token number">8</span><span class="token operator">:</span>    <span class="token number">0.00000006</span></code></pre><p>意思是，当链表的长度是 8 的时候，出现的概率是 0.00000006，不到千万分之一，所以说正常情况下，链表的长度不可能到达 8 ，而一旦到达 8 时，肯定是 hash 算法出了问题，所以在这种情况下，为了让 HashMap 仍然有较高的查询性能，所以让链表转化成红黑树，我们正常写代码，使用 HashMap 时，几乎不会碰到链表转化成红黑树的情况，毕竟概念只有千万分之一。</p><h5 id="2-红黑树新增节点过程"><a href="#2-红黑树新增节点过程" class="headerlink" title="2.红黑树新增节点过程"></a>2.红黑树新增节点过程</h5><ol><li><p>首先判断新增的节点在红黑树上是不是已经存在，判断手段有如下两种：</p><p>1.1. 如果节点没有实现 Comparable 接口，使用 equals 进行判断；</p><p>1.2. 如果节点自己实现了 Comparable 接口，使用 compareTo 进行判断。</p></li><li><p>新增的节点如果已经在红黑树上，直接返回；不在的话，判断新增节点是在当前节点的左边还是右边，左边值小，右边值大；</p></li><li><p>自旋递归 1 和 2 步，直到当前节点的左边或者右边的节点为空时，停止自旋，当前节点即为我们新增节点的父节点；</p></li><li><p>把新增节点放到当前节点的左边或右边为空的地方，并于当前节点建立父子节点关系；</p></li><li><p>进行着色和旋转，结束。</p></li></ol><p>具体源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//入参 h：key 的hash值</span><span class="token keyword">final</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">putTreeVal</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span>                               <span class="token keyword">int</span> h<span class="token punctuation">,</span> K k<span class="token punctuation">,</span> V v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kc <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> searched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//找到根节点</span>    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自旋</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span> K pk<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// p hash 值大于 h，说明 p 在 h 的右边</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span>            dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// p hash 值小于 h，说明 p 在 h 的左边</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>            dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要放进去key在当前树中已经存在了(equals来判断)</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自己实现的Comparable的话，不能用hashcode比较了，需要用compareTo</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                  <span class="token comment" spellcheck="true">//得到key的Class类型，如果key没有实现Comparable就是null</span>                  <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                  <span class="token comment" spellcheck="true">//当前节点pk和入参k不等</span>                 <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>searched<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> q<span class="token punctuation">,</span> ch<span class="token punctuation">;</span>                searched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                     <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                     <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到和当前hashcode值相近的节点(当前节点的左右子节点其中一个为空即可)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xpn <span class="token operator">=</span> xp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//生成新的节点</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">newTreeNode</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> xpn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把新节点放在当前子节点为空的位置上</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token keyword">else</span>                xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前节点和新节点建立父子，前后关系</span>            xp<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">.</span>prev <span class="token operator">=</span> xp<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xpn <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>xpn<span class="token punctuation">)</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//balanceInsertion 对红黑树进行着色或旋转，以达到更多的查找效率，着色或旋转的几种场景如下</span>            <span class="token comment" spellcheck="true">//着色：新节点总是为红色；如果新节点的父亲是黑色，则不需要重新着色；如果父亲是红色，那么必须通过重新着色或者旋转的方法，再次达到红黑树的5个约束条件</span>            <span class="token comment" spellcheck="true">//旋转： 父亲是红色，叔叔是黑色时，进行旋转</span>            <span class="token comment" spellcheck="true">//如果当前节点是父亲的右节点，则进行左旋</span>            <span class="token comment" spellcheck="true">//如果当前节点是父亲的左节点，则进行右旋</span>            <span class="token comment" spellcheck="true">//moveRootToFront 方法是把算出来的root放到根节点上</span>            <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>红黑树的新增，要求大家对红黑树的数据结构有一定的了解。面试的时候，一般只会问到新增节点到红黑树上大概是什么样的一个过程，着色和旋转的细节不会问，因为很难说清楚，但我们要清楚着色指的是给红黑树的节点着上红色或黑色，旋转是为了让红黑树更加平衡，提高查询的效率，总的来说都是为了满足红黑树的 5 个原则：</p><ol><li>节点是红色或黑色</li><li>根是黑色</li><li>所有叶子都是黑色</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点</li><li>从每个叶子到根的所有路径上不能有两个连续的红色节点</li></ol><h4 id="2-4-3-查找"><a href="#2-4-3-查找" class="headerlink" title="2.4.3-查找"></a>2.4.3-查找</h4><p>HashMap 的查找主要分为以下三步：</p><ul><li>根据 hash 算法定位数组的索引位置，equals 判断当前节点是否是我们需要寻找的 key，是的话直接返回，不是的话往下。</li><li>判断当前节点有无 next 节点，有的话判断是链表类型，还是红黑树类型。</li><li>分别走链表和红黑树不同类型的查找方法。</li></ul><p>链表查找的关键代码是：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 采用自旋方式从链表中查找 key，e 初始为为链表的头节点</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果当前节点 hash 等于 key 的 hash，并且 equals 相等，当前节点就是我们要找的节点</span>    <span class="token comment" spellcheck="true">// 当 hash 冲突时，同一个 hash 值上是一个链表的时候，我们是通过 equals 方法来比较 key 是否相等的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 否则，把当前节点的下一个节点拿出来继续寻找</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>红黑树查找的代码很多，我们大概说下思路，实际步骤比较复杂，可以去 github 上面去查看源码：</p><ol><li>从根节点递归查找；</li><li>根据 hashcode，比较查找节点，左边节点，右边节点之间的大小，根本红黑树左小右大的特性进行判断；</li><li>判断查找节点在第 2 步有无定位节点位置，有的话返回，没有的话重复 2，3 两步；</li><li>一直自旋到定位到节点位置为止。</li></ol><p>如果红黑树比较平衡的话，每次查找的次数就是树的深度。</p><h4 id="2-4-4-总结"><a href="#2-4-4-总结" class="headerlink" title="2.4.4-总结"></a>2.4.4-总结</h4><p>HashMap 的内容虽然较多，但大多数 api 都只是对数组 + 链表 + 红黑树这种数据结构进行封装而已，本小节我们从新增和查找两个角度进行了源码的深入分析，分析了是如何对数组、链表和红黑树进行操作的。想了解更多，可以前往 github 上查看更多源码。</p><h3 id="2-5-TreeMap-和-LinkedHashMap-核心源码解析"><a href="#2-5-TreeMap-和-LinkedHashMap-核心源码解析" class="headerlink" title="2.5-TreeMap 和 LinkedHashMap 核心源码解析"></a>2.5-TreeMap 和 LinkedHashMap 核心源码解析</h3><p>在熟悉 HashMap 之后，本小节我们来看下 TreeMap 和 LinkedHashMap，看看 TreeMap 是如何根据 key 进行排序的，LinkedHashMap 是如何用两种策略进行访问的。</p><h4 id="2-5-1-知识储备"><a href="#2-5-1-知识储备" class="headerlink" title="2.5.1-知识储备"></a>2.5.1-知识储备</h4><p>在了解 TreeMap 之前，我们来看下日常工作中排序的两种方式，作为我们学习的基础储备。</p><p>两种方式的代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeMapDemo</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Data</span>  <span class="token comment" spellcheck="true">// DTO 为我们排序的对象</span>  <span class="token keyword">class</span> <span class="token class-name">DTO</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>DTO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DTO</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>DTO o<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//默认从小到大排序</span>      <span class="token keyword">return</span> id <span class="token operator">-</span> o<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTwoComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一种排序，从小到大排序，实现 Comparable 的 compareTo 方法进行排序</span>    List<span class="token operator">&lt;</span>DTO<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DTO</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二种排序，从大到小排序，利用外部排序器 Comparator 进行排序</span>    Comparator comparator <span class="token operator">=</span> <span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span>DTO<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>DTO<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DTO</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第一种排序输出的结果从小到大，结果是：<code>[{“id”:1},{“id”:2},{“id”:3},{“id”:4},{“id”:5}]</code>；</p><p>第二种输出的结果恰好相反，结果是：<code>[{“id”:5},{“id”:4},{“id”:3},{“id”:2},{“id”:1}]</code>。</p><p>以上两种就是分别通过 Comparable 和 Comparator 两者进行排序的方式，而 TreeMap 利用的也是此原理，从而实现了对 key 的排序，我们一起来看下。</p><h4 id="2-5-2-TreeMap-整体架构"><a href="#2-5-2-TreeMap-整体架构" class="headerlink" title="2.5.2-TreeMap 整体架构"></a>2.5.2-TreeMap 整体架构</h4><p>TreeMap 底层的数据结构就是红黑树，和 HashMap 的红黑树结构一样。</p><p>不同的是，TreeMap 利用了红黑树左节点小，右节点大的性质，根据 key 进行排序，使每个元素能够插入到红黑树大小适当的位置，维护了 key 的大小关系，适用于 key 需要排序的场景。</p><p>因为底层使用的是平衡红黑树的结构，所以 containsKey、get、put、remove 等方法的时间复杂度都是 log(n)。</p><h5 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h5><p>TreeMap 常见的属性有：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//比较器，如果外部有传进来 Comparator 比较器，首先用外部的</span><span class="token comment" spellcheck="true">//如果外部比较器为空，则使用 key 自己实现的 Comparable#compareTo 方法</span><span class="token comment" spellcheck="true">//比较手段和上面日常工作中的比较 demo 是一致的</span><span class="token keyword">private</span> <span class="token keyword">final</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> comparator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树的根节点</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树的已有元素大小</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//树结构变化的版本号，用于迭代过程中的快速失败场景</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树的节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="2-新增节点"><a href="#2-新增节点" class="headerlink" title="2.新增节点"></a>2.新增节点</h5><p>我们来看下 TreeMap 新增节点的步骤：</p><ol><li><p>判断红黑树的节点是否为空，为空的话，新增的节点直接作为根节点，代码如下：</p><pre class=" language-java"><code class="language-java">Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树根节点为空，直接新建</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// compare 方法限制了 key 不能为 null</span>    <span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type (and possibly null) check</span>    <span class="token comment" spellcheck="true">// 成为根节点</span>    root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>根据红黑树左小右大的特性，进行判断，找到应该新增节点的父节点，代码如下：</p><pre class=" language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> cpr <span class="token operator">=</span> comparator<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cpr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自旋找到 key 应该新增的位置，就是应该挂载那个节点的头上</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一次循环结束时，parent 就是上次比过的对象</span>        parent <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过 compare 来比较 key 的大小</span>        cmp <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//key 小于 t，把 t 左边的值赋予 t，因为红黑树左边的值比较小，循环再比</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//key 大于 t，把 t 右边的值赋予 t，因为红黑树右边的值比较大，循环再比</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果相等的话，直接覆盖原值</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t 为空，说明已经到叶子节点了</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在父节点的左边或右边插入新增节点，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//cmp 代表最后一次对比的大小，小于 0 ，代表 e 在上一节点的左边</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cmp 代表最后一次对比的大小，大于 0 ，代表 e 在上一节点的右边，相等的情况第二步已经处理了。</span><span class="token keyword">else</span>    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> e<span class="token punctuation">;</span></code></pre></li><li><p>着色旋转，达到平衡，结束。</p></li></ol><p>从源码中，我们可以看到：</p><ol><li>新增节点时，就是利用了红黑树左小右大的特性，从根节点不断往下查找，直到找到节点是 null 为止，节点为 null 说明到达了叶子结点；</li><li>查找过程中，发现 key 值已经存在，直接覆盖；</li><li>TreeMap 是禁止 key 是 null 值的。</li></ol><p>类似的，TreeMap 查找也是类似的原理，有兴趣的同学可以去 github 上面去查看源码。</p><h5 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h5><p>TreeMap 相对来说比较简单，红黑树和 HashMap 比较类似，比较关键的是通过 compare 来比较 key 的大小，然后利用红黑树左小右大的特性，为每个 key 找到自己的位置，从而维护了 key 的大小排序顺序。</p><h4 id="2-5-3-LinkedHashMap-整体架构"><a href="#2-5-3-LinkedHashMap-整体架构" class="headerlink" title="2.5.3-LinkedHashMap 整体架构"></a>2.5.3-LinkedHashMap 整体架构</h4><p>HashMap 是无序的，TreeMap 可以按照 key 进行排序，那有木有 Map 是可以维护插入的顺序的呢？接下来我们一起来看下 LinkedHashMap。</p><p>LinkedHashMap 本身是继承 HashMap 的，所以它拥有 HashMap 的所有特性，再此基础上，还提供了两大特性：</p><ul><li>按照插入顺序进行访问；</li><li>实现了访问最少最先删除功能，其目的是把很久都没有访问的 key 自动删除。</li></ul><p>接着我们来看下上述两大特性。</p><h5 id="1-按照插入顺序访问"><a href="#1-按照插入顺序访问" class="headerlink" title="1.按照插入顺序访问"></a>1.按照插入顺序访问</h5><h6 id="1-1-LinkedHashMap-链表结构"><a href="#1-1-LinkedHashMap-链表结构" class="headerlink" title="1.1-LinkedHashMap 链表结构"></a>1.1-LinkedHashMap 链表结构</h6><p>我们看下 LinkedHashMap 新增了哪些属性，以达到了链表结构的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链表头</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表尾</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承 Node，为数组的每个元素增加了 before 和 after 属性</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 控制两种访问模式的字段，默认 false</span><span class="token comment" spellcheck="true">// true 按照访问顺序，会把经常访问的 key 放到队尾</span><span class="token comment" spellcheck="true">// false 按照插入顺序提供访问</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span></code></pre><p>从上述 Map 新增的属性可以看到，LinkedHashMap 的数据结构很像是把 LinkedList 的每个元素换成了 HashMap 的 Node，像是两者的结合体，也正是因为增加了这些结构，从而能把 Map 的元素都串联起来，形成一个链表，而链表就可以保证顺序了，就可以维护元素插入进来的顺序。</p><h6 id="1-2-如何按照顺序新增"><a href="#1-2-如何按照顺序新增" class="headerlink" title="1.2-如何按照顺序新增"></a>1.2-如何按照顺序新增</h6><p>LinkedHashMap 初始化时，默认 accessOrder 为 false，就是会按照插入顺序提供访问，插入方法使用的是父类 HashMap 的 put 方法，不过覆写了 put 方法执行中调用的 <code>newNode/newTreeNode 和 afterNodeAccess 方法</code>。</p><p>newNode/newTreeNode 方法，控制新增节点追加到链表的尾部，这样每次新节点都追加到尾部，即可保证插入顺序了，我们以 newNode 源码为例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 新增节点，并追加到链表的尾部</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新增节点</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 追加到链表的尾部</span>    <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// link at the end of list</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新增节点等于位节点</span>    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// last 为空，说明链表为空，首尾节点相等</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 链表有数据，直接建立新增节点和上个尾节点之间的前后关系即可</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>        last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>LinkedHashMap 通过新增头节点、尾节点，给每个节点增加 before、after 属性，每次新增时，都把节点追加到尾节点等手段，在新增的时候，就已经维护了按照插入顺序的链表结构了。</p><h6 id="1-3-按照顺序访问"><a href="#1-3-按照顺序访问" class="headerlink" title="1.3-按照顺序访问"></a>1.3-按照顺序访问</h6><p>LinkedHashMap 只提供了单向访问，即按照插入的顺序从头到尾进行访问，不能像 LinkedList 那样可以双向访问。</p><p>我们主要通过迭代器进行访问，迭代器初始化的时候，默认从头节点开始访问，在迭代的过程中，不断访问当前节点的 after 节点即可。</p><p>Map 对 key、value 和 entity（节点） 都提供出了迭代的方法，假设我们需要迭代 entity，就可使用 <code>LinkedHashMap.entrySet().iterator()</code> 这种写法直接返回 LinkedHashIterator ，LinkedHashIterator 是迭代器，我们调用迭代器的 nextNode 方法就可以得到下一个节点，迭代器的源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化时，默认从头节点开始访问</span><span class="token function">LinkedHashIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 头节点作为第一个访问的节点</span>    next <span class="token operator">=</span> head<span class="token punctuation">;</span>    expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    current <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 校验</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current <span class="token operator">=</span> e<span class="token punctuation">;</span>    next <span class="token operator">=</span> e<span class="token punctuation">.</span>after<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过链表的 after 结构，找到下一个迭代的节点</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在新增节点时，我们就已经维护了元素之间的插入顺序了，所以迭代访问时非常简单，只需要不断的访问当前节点的下一个节点即可。</p><h5 id="2-访问最少删除策略"><a href="#2-访问最少删除策略" class="headerlink" title="2.访问最少删除策略"></a>2.访问最少删除策略</h5><h6 id="2-1-Demo"><a href="#2-1-Demo" class="headerlink" title="2.1-Demo"></a>2.1-Demo</h6><p>这种策略也叫做 LRU（Least recently used,最近最少使用），大概的意思就是经常访问的元素会被追加到队尾，这样不经常访问的数据自然就靠近队头，然后我们可以通过设置删除策略，比如当 Map 元素个数大于多少时，把头节点删除，我们写个 demo 方便大家理解。demo 如下，完整代码可到 github 上查看：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAccessOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 新建 LinkedHashMap</span>  LinkedHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0.75f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>      <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">// 覆写了删除策略的方法，我们设定当节点个数大于 3 时，就开始删除头节点</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"初始化：{}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"map.get(9)：{}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"map.get(20)：{}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印出来的结果如下：</p><pre class=" language-java"><code class="language-java">初始化：<span class="token punctuation">{</span><span class="token number">9</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>：<span class="token punctuation">{</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">}</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>：<span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span></code></pre><p>可以看到，map 初始化的时候，我们放进去四个元素，但结果只有三个元素，10 不见了，这个主要是因为我们覆写了 removeEldestEntry 方法，我们实现了如果 map 中元素个数大于 3 时，我们就把队头的元素删除，当 put(1, 1) 执行的时候，正好把队头的 10 删除，这个体现了达到我们设定的删除策略时，会自动的删除头节点。</p><p>当我们调用 map.get(9) 方法时，元素 9 移动到队尾，调用 map.get(20) 方法时， 元素 20 被移动到队尾，这个体现了经常被访问的节点会被移动到队尾。</p><p>这个例子就很好的说明了访问最少删除策略，接下来我们看下原理。</p><h6 id="2-2-元素被转移到队尾"><a href="#2-2-元素被转移到队尾" class="headerlink" title="2.2-元素被转移到队尾"></a>2.2-元素被转移到队尾</h6><p>我们先来看下为什么 get 时，元素会被移动到队尾：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用 HashMap  get 方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果设置了 LRU 策略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这个方法把当前 key 移动到队尾</span>        <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上述源码中，可以看到，通过 afterNodeAccess 方法把当前访问节点移动到了队尾，其实不仅仅是 get 方法，执行 <code>getOrDefault、compute、computeIfAbsent、computeIfPresent、merge 方法</code>时，也会这么做，通过不断的把经常访问的节点移动到队尾，那么靠近队头的节点，自然就是很少被访问的元素了。</p><h6 id="2-3-删除策略"><a href="#2-3-删除策略" class="headerlink" title="2.3-删除策略"></a>2.3-删除策略</h6><p>上述 demo 我们在执行 put 方法时，发现队头元素被删除了，LinkedHashMap 本身是没有 put 方法实现的，调用的是 HashMap 的 put 方法，但 LinkedHashMap 实现了 put 方法中的调用 afterNodeInsertion 方法，这个方式实现了删除，我们看下源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除很少被访问的元素，被 HashMap 的 put 方法所调用</span><span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 得到元素头节点</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// removeEldestEntry 来控制删除策略，如果队列不为空，并且删除策略允许删除的情况下，删除头节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        K key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// removeNode 删除头节点</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-小结-1"><a href="#3-小结-1" class="headerlink" title="3.小结"></a>3.小结</h5><p>LinkedHashMap 提供了两个很有意思的功能：按照插入顺序访问和删除最少访问元素策略，简单地通过链表的结构就实现了，设计得非常巧妙。</p><h4 id="2-5-4-总结"><a href="#2-5-4-总结" class="headerlink" title="2.5.4-总结"></a>2.5.4-总结</h4><p>本小节主要说了 TreeMap 和 LinkedHashMap 的的数据结构，分析了两者的核心内容源码，我们发现两者充分利用了底层数据结构的特性，TreeMap 利用了红黑树左小右大的特性进行排序，LinkedHashMap 在 HashMap 的基础上简单地加了链表结构，就形成了节点的顺序，非常巧妙，很有意思，大家可以在看源码的过程中，可以多想想设计思路，说不定会有不一样的感悟。</p><h3 id="2-6-Map源码会问哪些面试题"><a href="#2-6-Map源码会问哪些面试题" class="headerlink" title="2.6-Map源码会问哪些面试题"></a>2.6-Map源码会问哪些面试题</h3><p>Map 在面试中，占据了很大一部分的面试题目，其中以 HashMap 为主，这些面试题目有的可以说得清楚，有的很难说清楚，如果是面对面面试的话，建议画一画。</p><h4 id="2-6-1-Map-整体数据结构类问题"><a href="#2-6-1-Map-整体数据结构类问题" class="headerlink" title="2.6.1-Map 整体数据结构类问题"></a>2.6.1-Map 整体数据结构类问题</h4><h5 id="1-说一说-HashMap-底层数据结构"><a href="#1-说一说-HashMap-底层数据结构" class="headerlink" title="1.说一说 HashMap 底层数据结构"></a>1.说一说 HashMap 底层数据结构</h5><p>答：HashMap 底层是数组 + 链表 + 红黑树的数据结构，数组的主要作用是方便快速查找，时间复杂度是 O(1)，默认大小是 16，数组的下标索引是通过 key 的 hashcode 计算出来的，数组元素叫做 Node，当多个 key 的 hashcode 一致，但 key 值不同时，单个 Node 就会转化成链表，链表的查询复杂度是 O(n)，当链表的长度大于等于 8 并且数组的大小超过 64 时，链表就会转化成红黑树，红黑树的查询复杂度是 O(log(n))，简单来说，最坏的查询次数相当于红黑树的最大深度。</p><h5 id="2-HashMap、TreeMap、LinkedHashMap-三者有啥相同点，有啥不同点？"><a href="#2-HashMap、TreeMap、LinkedHashMap-三者有啥相同点，有啥不同点？" class="headerlink" title="2.HashMap、TreeMap、LinkedHashMap 三者有啥相同点，有啥不同点？"></a>2.HashMap、TreeMap、LinkedHashMap 三者有啥相同点，有啥不同点？</h5><p>答：相同点：</p><ol><li>三者在特定的情况下，都会使用红黑树；</li><li>底层的 hash 算法相同；</li><li>在迭代的过程中，如果 Map 的数据结构被改动，都会报 ConcurrentModificationException 的错误。</li></ol><p>不同点：</p><ol><li>HashMap 数据结构以数组为主，查询非常快，TreeMap 数据结构以红黑树为主，利用了红黑树左小右大的特点，可以实现 key 的排序，LinkedHashMap 在 HashMap 的基础上增加了链表的结构，实现了插入顺序访问和最少访问删除两种策略;</li><li>由于三种 Map 底层数据结构的差别，导致了三者的使用场景的不同，TreeMap 适合需要根据 key 进行排序的场景，LinkedHashMap 适合按照插入顺序访问，或需要删除最少访问元素的场景，剩余场景我们使用 HashMap 即可，我们工作中大部分场景基本都在使用 HashMap；</li><li>由于三种 map 的底层数据结构的不同，导致上层包装的 api 略有差别。</li></ol><h5 id="3-说一下-Map-的-hash-算法"><a href="#3-说一下-Map-的-hash-算法" class="headerlink" title="3.说一下 Map 的 hash 算法"></a>3.说一下 Map 的 hash 算法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>key 在数组中的位置公式：tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span></code></pre><p>如上代码是 HashMap 的hash 算法。</p><p>这其实是一个数学问题，源码中就是通过以上代码来计算 hash 的，首先计算出 key 的 hashcode，因为 key 是 Object，所以会根据 key 的不同类型进行 hashcode 的计算，接着计算 h ^ (h &gt;&gt;&gt; 16) ，这么做的好处是使大多数场景下，算出来的 hash 值比较分散。</p><p>一般来说，hash 值算出来之后，要计算当前 key 在数组中的索引下标位置时，可以采用取模的方式，就是索引下标位置 = hash 值 % 数组大小，这样做的好处，就是可以保证计算出来的索引下标值可以均匀的分布在数组的各个索引位置上，但取模操作对于处理器的计算是比较慢的，数学上有个公式，当 b 是 2 的幂次方时，a % b = a &amp;（b-1），所以此处索引位置的计算公式我们可以更换为： (n-1) &amp; hash。</p><p>此问题可以延伸出三个小问题：</p><p>1：为什么不用 key % 数组大小，而是需要用 key 的 hash 值 % 数组大小。</p><p>答：如果 key 是数字，直接用 key % 数组大小是完全没有问题的，但我们的 key 还有可能是字符串，是复杂对象，这时候用 字符串或复杂对象 % 数组大小是不行的，所以需要先计算出 key 的 hash 值。</p><p>2：计算 hash 值时，为什么需要右移 16 位？</p><p>答：hash 算法是 h ^ (h &gt;&gt;&gt; 16)，为了使计算出的 hash 值更分散，所以选择先将 h 无符号右移 16 位，然后再于 h 异或时，就能达到 h 的高 16 位和低 16 位都能参与计算，减少了碰撞的可能性。</p><p>3：为什么把取模操作换成了 &amp; 操作？</p><p>答：key.hashCode() 算出来的 hash 值还不是数组的索引下标，为了随机的计算出索引的下表位置，我们还会用 hash 值和数组大小进行取模，这样子计算出来的索引下标比较均匀分布。</p><p>取模操作处理器计算比较慢，处理器对 &amp; 操作就比较擅长，换成了 &amp; 操作，是有数学上证明的支撑，为了提高了处理器处理的速度。</p><p>4：为什么提倡数组大小是 2 的幂次方？</p><p>答：因为只有大小是 2 的幂次方时，才能使 hash 值 % n(数组大小) == (n-1) &amp; hash 公式成立。</p><h5 id="4-为解决-hash-冲突，大概有哪些办法。"><a href="#4-为解决-hash-冲突，大概有哪些办法。" class="headerlink" title="4.为解决 hash 冲突，大概有哪些办法。"></a>4.为解决 hash 冲突，大概有哪些办法。</h5><p>答：1：好的 hash 算法，细问的话复述一下上题的 hash 算法;</p><p>2：自动扩容，当数组大小快满的时候，采取自动扩容，可以减少 hash 冲突;</p><p>3：hash 冲突发生时，采用链表来解决;</p><p>4：hash 冲突严重时，链表会自动转化成红黑树，提高遍历速度。</p><p>网上列举的一些其它办法，如开放定址法，尽量不要说，因为这些方法资料很少，实战用过的人更少，如果你没有深入研究的话，面试官让你深入描述一下很难说清楚，反而留下不好的印象，说 HashMap 现有的措施就足够了。</p><h4 id="2-6-2-HashMap-源码细节类问题"><a href="#2-6-2-HashMap-源码细节类问题" class="headerlink" title="2.6.2-HashMap 源码细节类问题"></a>2.6.2-HashMap 源码细节类问题</h4><h5 id="1-HashMap-是如何扩容的？"><a href="#1-HashMap-是如何扩容的？" class="headerlink" title="1.HashMap 是如何扩容的？"></a>1.HashMap 是如何扩容的？</h5><p>答：扩容的时机：</p><ol><li>put 时，发现数组为空，进行初始化扩容，默认扩容大小为 16;</li><li>put 成功后，发现现有数组大小大于扩容的门阀值时，进行扩容，扩容为老数组大小的 2 倍;</li></ol><p>扩容的门阀是 threshold，每次扩容时 threshold 都会被重新计算，门阀值等于数组的大小 * 影响因子（0.75）。</p><p>新数组初始化之后，需要将老数组的值拷贝到新数组上，链表和红黑树都有自己拷贝的方法。</p><h5 id="2-hash-冲突时怎么办？"><a href="#2-hash-冲突时怎么办？" class="headerlink" title="2.hash 冲突时怎么办？"></a>2.hash 冲突时怎么办？</h5><p>答：hash 冲突指的是 key 值的 hashcode 计算相同，但 key 值不同的情况。</p><p>如果桶中元素原本只有一个或已经是链表了，新增元素直接追加到链表尾部；</p><p>如果桶中元素已经是链表，并且链表个数大于等于 8 时，此时有两种情况：</p><ol><li>如果此时数组大小小于 64，数组再次扩容，链表不会转化成红黑树;</li><li>如果数组大小大于 64 时，链表就会转化成红黑树。</li></ol><p>这里不仅仅判断链表个数大于等于 8，还判断了数组大小，数组容量小于 64 没有立即转化的原因，猜测主要是因为红黑树占用的空间比链表大很多，转化也比较耗时，所以数组容量小的情况下冲突严重，我们可以先尝试扩容，看看能否通过扩容来解决冲突的问题。</p><h5 id="3-为什么链表个数大于等于-8-时，链表要转化成红黑树了？"><a href="#3-为什么链表个数大于等于-8-时，链表要转化成红黑树了？" class="headerlink" title="3.为什么链表个数大于等于 8 时，链表要转化成红黑树了？"></a>3.为什么链表个数大于等于 8 时，链表要转化成红黑树了？</h5><p>答：当链表个数太多了，遍历可能比较耗时，转化成红黑树，可以使遍历的时间复杂度降低，但转化成红黑树，有空间和转化耗时的成本，我们通过泊松分布公式计算，正常情况下，链表个数出现 8 的概念不到千万分之一，所以说正常情况下，链表都不会转化成红黑树，这样设计的目的，是为了防止非正常情况下，比如 hash 算法出了问题时，导致链表个数轻易大于等于 8 时，仍然能够快速遍历。</p><p>延伸问题：红黑树什么时候转变成链表。</p><p>答：当节点的个数小于等于 6 时，红黑树会自动转化成链表，主要还是考虑红黑树的空间成本问题，当节点个数小于等于 6 时，遍历链表也很快，所以红黑树会重新变成链表。</p><h5 id="4-HashMap-在-put-时，如果数组中已经有了这个-key，我不想把-value-覆盖怎么办？取值时，如果得到的-value-是空时，想返回默认值怎么办？"><a href="#4-HashMap-在-put-时，如果数组中已经有了这个-key，我不想把-value-覆盖怎么办？取值时，如果得到的-value-是空时，想返回默认值怎么办？" class="headerlink" title="4.HashMap 在 put 时，如果数组中已经有了这个 key，我不想把 value 覆盖怎么办？取值时，如果得到的 value 是空时，想返回默认值怎么办？"></a>4.HashMap 在 put 时，如果数组中已经有了这个 key，我不想把 value 覆盖怎么办？取值时，如果得到的 value 是空时，想返回默认值怎么办？</h5><p>答：如果数组有了 key，但不想覆盖 value ，可以选择 putIfAbsent 方法，这个方法有个内置变量 onlyIfAbsent，内置是 true ，就不会覆盖，我们平时使用的 put 方法，内置 onlyIfAbsent 为 false，是允许覆盖的。</p><p>取值时，如果为空，想返回默认值，可以使用 getOrDefault 方法，方法第一参数为 key，第二个参数为你想返回的默认值，如 map.getOrDefault(“2”,“0”)，当 map 中没有 key 为 2 的值时，会默认返回 0，而不是空。</p><h5 id="5-通过以下代码进行删除，是否可行？"><a href="#5-通过以下代码进行删除，是否可行？" class="headerlink" title="5.通过以下代码进行删除，是否可行？"></a>5.通过以下代码进行删除，是否可行？</h5><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String <span class="token operator">></span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>答：不行，会报错误 ConcurrentModificationException，原因如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/HashMap-%E5%88%A0%E9%99%A4%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0.jpeg" alt="HashMap-删除报错原因"></p><p>建议使用迭代器的方式进行删除，原理同 ArrayList 迭代器原理，我们在《List 源码会问那些面试题》中有说到。</p><h5 id="6-描述一下-HashMap-get、put-的过程"><a href="#6-描述一下-HashMap-get、put-的过程" class="headerlink" title="6.描述一下 HashMap get、put 的过程"></a>6.描述一下 HashMap get、put 的过程</h5><p>答：我们在源码解析中有说，可以详细描述下源码的实现路径，说不清楚的话，可以画一画。</p><h4 id="2-6-3-其它-Map-面试题"><a href="#2-6-3-其它-Map-面试题" class="headerlink" title="2.6.3-其它 Map 面试题"></a>2.6.3-其它 Map 面试题</h4><h5 id="1-DTO-作为-Map-的-key-时，有无需要注意的点？"><a href="#1-DTO-作为-Map-的-key-时，有无需要注意的点？" class="headerlink" title="1.DTO 作为 Map 的 key 时，有无需要注意的点？"></a>1.DTO 作为 Map 的 key 时，有无需要注意的点？</h5><p>答：DTO 就是一个数据载体，可以看做拥有很多属性的 Java 类，我们可以对这些属性进行 get、set 操作。</p><p>看是什么类型的 Map，如果是 HashMap 的话，一定需要覆写 equals 和 hashCode 方法，因为在 get 和 put 的时候，需要通过 equals 方法进行相等的判断；如果是 TreeMap 的话，DTO 需要实现 Comparable 接口，因为 TreeMap 会使用 Comparable 接口进行判断 key 的大小；如果是 LinkedHashMap 的话，和 HashMap 一样的。</p><h5 id="2-LinkedHashMap-中的-LRU-是什么意思，是如何实现的。"><a href="#2-LinkedHashMap-中的-LRU-是什么意思，是如何实现的。" class="headerlink" title="2.LinkedHashMap 中的 LRU 是什么意思，是如何实现的。"></a>2.LinkedHashMap 中的 LRU 是什么意思，是如何实现的。</h5><p>答：LRU ，英文全称：Least recently used，中文叫做最近最少访问，在 LinkedHashMap 中，也叫做最少访问删除策略，我们可以通过 removeEldestEntry 方法设定一定的策略，使最少被访问的元素，在适当的时机被删除，原理是在 put 方法执行的最后，LinkedHashMap 会去检查这种策略，如果满足策略，就删除头节点。</p><p>保证头节点就是最少访问的元素的原理是：LinkedHashMap 在 get 的时候，都会把当前访问的节点，移动到链表的尾部，慢慢的，就会使头部的节点都是最少被访问的元素。</p><h5 id="3-为什么推荐-TreeMap-的元素最好都实现-Comparable-接口？但-key-是-String-的时候，我们却没有额外的工作呢？"><a href="#3-为什么推荐-TreeMap-的元素最好都实现-Comparable-接口？但-key-是-String-的时候，我们却没有额外的工作呢？" class="headerlink" title="3.为什么推荐 TreeMap 的元素最好都实现 Comparable 接口？但 key 是 String 的时候，我们却没有额外的工作呢？"></a>3.为什么推荐 TreeMap 的元素最好都实现 Comparable 接口？但 key 是 String 的时候，我们却没有额外的工作呢？</h5><p>答：因为 TreeMap 的底层就是通过排序来比较两个 key 的大小的，所以推荐 key 实现 Comparable 接口，是为了往你希望的排序顺序上发展， 而 String 本身已经实现了 Comparable 接口，所以使用 String 时，我们不需要额外的工作，不仅仅是 String ，其他包装类型也都实现了 Comparable 接口，如 Long、Double、Short 等等。</p><h4 id="2-6-4-总结"><a href="#2-6-4-总结" class="headerlink" title="2.6.4-总结"></a>2.6.4-总结</h4><p>Map 的面试题主要是 HashMap 为主，会问很多源码方面的东西，TreeMap 和 LinkedHashMap 主要以功能和场景为主，作为加分项。<br>Map 的面试题型很多，但只要弄懂原理，题目再多变化，回答起来都会比较简单。</p><h3 id="2-7-HashSet、TreeSet-源码解析"><a href="#2-7-HashSet、TreeSet-源码解析" class="headerlink" title="2.7-HashSet、TreeSet 源码解析"></a>2.7-HashSet、TreeSet 源码解析</h3><p>HashSet、TreeSet 两个类是在 Map 的基础上组装起来的类，我们学习的侧重点，主要在于 Set 是如何利用 Map 现有的功能，来达成自己的目标的，也就是说如何基于现有的功能进行创新，然后再看看一些改变的小细节是否值得我们学习。</p><h4 id="2-7-1-HashSet"><a href="#2-7-1-HashSet" class="headerlink" title="2.7.1-HashSet"></a>2.7.1-HashSet</h4><h5 id="1-类注释-1"><a href="#1-类注释-1" class="headerlink" title="1.类注释"></a>1.类注释</h5><p>看源码先看类注释上，我们可以得到的信息有：</p><ol><li>底层实现基于 HashMap，所以迭代时不能保证按照插入顺序，或者其它顺序进行迭代；</li><li>add、remove、contanins、size 等方法的耗时性能，是不会随着数据量的增加而增加的，这个主要跟 HashMap 底层的数组数据结构有关，不管数据量多大，不考虑 hash 冲突的情况下，时间复杂度都是 O (1)；</li><li>线程不安全的，如果需要安全请自行加锁，或者使用 Collections.synchronizedSet；</li><li>迭代过程中，如果数据结构被改变，会快速失败的，会抛出 ConcurrentModificationException 异常。</li></ol><p>我们之前也看过 List、Map 的类注释，我们发现 2、3、4 点信息在类注释中都有提到，所以如果有人问 List、Map、 Set 三者的共同点，那么就可以说 2、3、4 三点。</p><h5 id="2-HashSet-是如何组合-HashMap-的"><a href="#2-HashSet-是如何组合-HashMap-的" class="headerlink" title="2.HashSet 是如何组合 HashMap 的"></a>2.HashSet 是如何组合 HashMap 的</h5><p>刚才是从类注释 1 中看到，HashSet 的实现是基于 HashMap 的，在 Java 中，要基于基础类进行创新实现，有两种办法：</p><ul><li>继承基础类，覆写基础类的方法，比如说继承 HashMap , 覆写其 add 的方法；</li><li>组合基础类，通过调用基础类的方法，来复用基础类的能力。</li></ul><p>HashSet 使用的就是组合 HashMap，其优点如下：</p><ol><li>继承表示父子类是同一个事物，而 Set 和 Map 本来就是想表达两种事物，所以继承不妥，而且 Java 语法限制，子类只能继承一个父类，后续难以扩展。</li><li>组合更加灵活，可以任意的组合现有的基础类，并且可以在基础类方法的基础上进行扩展、编排等，而且方法命名可以任意命名，无需和基础类的方法名称保持一致。</li></ol><p>我们在工作中，如果碰到类似问题，我们的原则也是尽量多用组合，少用继承。</p><p>组合就是把 HashMap 当作自己的一个局部变量，以下是 HashSet 的组合实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 把 HashMap 组合进来，key 是 Hashset 的 key，value 是下面的 PRESENT</span><span class="token keyword">private</span> <span class="token keyword">transient</span> HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HashMap 中的 value</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从这两行代码中，我们可以看出两点：</p><ol><li>我们在使用 HashSet 时，比如 add 方法，只有一个入参，但组合的 Map 的 add 方法却有 key，value 两个入参，相对应上 Map 的 key 就是我们 add 的入参，value 就是第二行代码中的 PRESENT，此处设计非常巧妙，用一个默认值 PRESENT 来代替 Map 的 Value；</li><li>如果 HashSet 是被共享的，当多个线程访问的时候，就会有线程安全问题，因为在后续的所有操作中，并没有加锁。</li></ol><p>HashSet 在以 HashMap 为基础进行实现的时候，首先选择组合的方式，接着使用默认值来代替了 Map 中的 Value 值，设计得非常巧妙，给使用者的体验很好，使用起来简单方便，我们在工作中也可以借鉴这种思想，可以把底层复杂实现包装一下，一些默认实现可以自己吃掉，使吐出去的接口尽量简单好用。</p><h6 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1-初始化"></a>2.1-初始化</h6><p>HashSet 的初始化比较简单，直接 new HashMap 即可，比较有意思的是，当有原始集合数据进行初始化的情况下，会对 HashMap 的初始容量进行计算，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对 HashMap 的容量进行了计算</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述代码中：Math.max ((int) (c.size ()/.75f) + 1, 16)，就是对 HashMap 的容量进行了计算，翻译成中文就是 取括号中两个数的最大值（期望的值 / 0.75+1，默认值 16），从计算中，我们可以看出 HashSet 的实现者对 HashMap 的底层实现是非常清楚的，主要体现在两个方面：</p><ol><li>和 16 比较大小的意思是说，如果给定 HashMap 初始容量小于 16 ，就按照 HashMap 默认的 16 初始化好了，如果大于 16，就按照给定值初始化。</li><li>HashMap 扩容的伐值的计算公式是：Map 的容量 * 0.75f，一旦达到阀值就会扩容，此处用 (int) (c.size ()/.75f) + 1 来表示初始化的值，这样使我们期望的大小值正好比扩容的阀值还大 1，就不会扩容，符合 HashMap 扩容的公式。</li></ol><p>从简单的构造器中，我们就可以看出要很好的组合 api 接口，并没有那么简单，我们可能需要去了解一下被组合的 api 底层的实现，这样才能用好 api。</p><p>同时这种写法，也提供了一种思路给我们，如果有人问你，往 HashMap 拷贝大集合时，如何给 HashMap 初始化大小时，完全可以借鉴这种写法：取最大值（期望的值 / 0.75 + 1，默认值 16）。</p><p>至于 HashSet 的其他方法就比较简单了，就是对 Map 的 api 进行了一些包装，如下的 add 方法实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 直接使用 HashMap 的 put 方法，进行一些简单的逻辑判断</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从 add 方法中，我们就可以看到组合的好处，方法的入参、名称、返回值都可以自定义，如果是继承的话就不行了。</p><h6 id="2-2-小结"><a href="#2-2-小结" class="headerlink" title="2.2-小结"></a>2.2-小结</h6><p>HashSet 具体实现值得我们借鉴的地方主要有如下地方，我们平时写代码的时候，完全可以参考参考：</p><ol><li>对组合还是继承的分析和把握；</li><li>对复杂逻辑进行一些包装，使吐出去的接口尽量简单好用；</li><li>组合其他 api 时，尽量多对组合的 api 多些了解，这样才能更好的使用 api；</li><li>HashMap 初始化大小值的模版公式：取括号内两者的最大值（期望的值 / 0.75+1，默认值 16）。</li></ol><h4 id="2-7-2-TreeSet"><a href="#2-7-2-TreeSet" class="headerlink" title="2.7.2-TreeSet"></a>2.7.2-TreeSet</h4><p>TreeSet 大致的结构和 HashSet 相似，底层组合的是 TreeMap，所以继承了 TreeMap key 能够排序的功能，迭代的时候，也可以按照 key 的排序顺序进行迭代，我们主要来看复用 TreeMap 时，复用的两种思路：</p><h5 id="1-复用-TreeMap-的思路一"><a href="#1-复用-TreeMap-的思路一" class="headerlink" title="1.复用 TreeMap 的思路一"></a>1.复用 TreeMap 的思路一</h5><p>场景一： TreeSet 的 add 方法，我们来看下其源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，底层直接使用的是 HashMap 的 put 的能力，直接拿来用就好了。</p><h5 id="2-复用-TreeMap-的思路二"><a href="#2-复用-TreeMap-的思路二" class="headerlink" title="2.复用 TreeMap 的思路二"></a>2.复用 TreeMap 的思路二</h5><p>场景二：需要迭代 TreeSet 中的元素，那应该也是像 add 那样，直接使用 HashMap 已有的迭代能力，比如像下面这样：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模仿思路一的方式实现</span><span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 直接使用 HashMap.keySet 的迭代能力</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种是思路一的实现方式，TreeSet 组合 TreeMap，直接选择 TreeMap 的底层能力进行包装，但 TreeSet 实际执行的思路却完全相反，我们看源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// NavigableSet 接口，定义了迭代的一些规范，和一些取值的特殊方法</span><span class="token comment" spellcheck="true">// TreeSet 实现了该方法，也就是说 TreeSet 本身已经定义了迭代的规范</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NavigableSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">SortedSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">lower</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// m.navigableKeySet() 是 TreeMap 写了一个子类实现了 NavigableSet</span><span class="token comment" spellcheck="true">// 接口，实现了 TreeSet 定义的迭代规范</span><span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">navigableKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>TreeMap 中对 NavigableSet 接口的实现源码截图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/TreeMap-NavigableSet.jpeg" alt="TreeMap-NavigableSet"></p><p>从截图中（截图是在 TreeMap 中），我们可以看出 TreeMap 实现了 TreeSet 定义的各种特殊方法。</p><p>我们可以看到，这种思路是 TreeSet 定义了接口的规范，TreeMap 负责去实现，实现思路和思路一是相反的。</p><p>我们总结下 TreeSet 组合 TreeMap 实现的两种思路：</p><ol><li>TreeSet 直接使用 TreeMap 的某些功能，自己包装成新的 api。</li><li>TreeSet 定义自己想要的 api，自己定义接口规范，让 TreeMap 去实现。</li></ol><p>方案 1 和 2 的调用关系，都是 TreeSet 调用 TreeMap，但功能的实现关系完全相反，第一种是功能的定义和实现都在 TreeMap，TreeSet 只是简单的调用而已，第二种 TreeSet 把接口定义出来后，让 TreeMap 去实现内部逻辑，TreeSet 负责接口定义，TreeMap 负责具体实现，这样子的话因为接口是 TreeSet 定义的，所以实现一定是 TreeSet 最想要的，TreeSet 甚至都不用包装，可以直接把返回值吐出去都行。</p><p>我们思考下这两种复用思路的原因：</p><ol><li>像 add 这些简单的方法，我们直接使用的是思路 1，主要是 add 这些方法实现比较简单，没有复杂逻辑，所以 TreeSet 自己实现起来比较简单；</li><li>思路 2 主要适用于复杂场景，比如说迭代场景，TreeSet 的场景复杂，比如要能从头开始迭代，比如要能取第一个值，比如要能取最后一个值，再加上 TreeMap 底层结构比较复杂，TreeSet 可能并不清楚 TreeMap 底层的复杂逻辑，这时候让 TreeSet 来实现如此复杂的场景逻辑，TreeSet 就搞不定了，不如接口让 TreeSet 来定义，让 TreeMap 去负责实现，TreeMap 对底层的复杂结构非常清楚，实现起来既准确又简单。</li></ol><h3 id="3-小结-2"><a href="#3-小结-2" class="headerlink" title="3.小结"></a>3.小结</h3><p>TreeSet 对 TreeMap 的两种不同复用思路，很重要，在工作中经常会遇到，特别是思路二，比如说 dubbo 的泛化调用，DDD 中的依赖倒置等等，原理都是 TreeSet 第二种的复用思想。</p><h4 id="2-7-3-面试题"><a href="#2-7-3-面试题" class="headerlink" title="2.7.3-面试题"></a>2.7.3-面试题</h4><p>HashSet 和 TreeSet 的面试概率比不上 List 和 Map，但只要有机会，并把本文的内容表达出来，绝对是加分项，因为现在 List 和 Map 面试题太多，面试官认为你能答的出来是应该的，但只要你有机会对 HashSet 和 TreeSet 说出本文见解，并且说自己是看源码时领悟到的，绝对肯定是加分项，这些就是你超过面试官预期的惊喜，以下是一些常用的题目：</p><h5 id="1-TreeSet-有用过么，平时都在什么场景下使用？"><a href="#1-TreeSet-有用过么，平时都在什么场景下使用？" class="headerlink" title="1.TreeSet 有用过么，平时都在什么场景下使用？"></a>1.TreeSet 有用过么，平时都在什么场景下使用？</h5><p>答：有木有用过如实回答就好了，我们一般都是在需要把元素进行排序的时候使用 TreeSet，使用时需要我们注意元素最好实现 Comparable 接口，这样方便底层的 TreeMap 根据 key 进行排序。</p><h5 id="2-追问，如果我想实现根据-key-的新增顺序进行遍历怎么办？"><a href="#2-追问，如果我想实现根据-key-的新增顺序进行遍历怎么办？" class="headerlink" title="2.追问，如果我想实现根据 key 的新增顺序进行遍历怎么办？"></a>2.追问，如果我想实现根据 key 的新增顺序进行遍历怎么办？</h5><p>答：要按照 key 的新增顺序进行遍历，首先想到的应该就是 LinkedHashMap，而 LinkedHashSet 正好是基于 LinkedHashMap 实现的，所以我们可以选择使用 LinkedHashSet。</p><h5 id="3-追问，如果我想对-key-进行去重，有什么好的办法么？"><a href="#3-追问，如果我想对-key-进行去重，有什么好的办法么？" class="headerlink" title="3.追问，如果我想对 key 进行去重，有什么好的办法么？"></a>3.追问，如果我想对 key 进行去重，有什么好的办法么？</h5><p>答：我们首先想到的是 TreeSet，TreeSet 底层使用的是 TreeMap，TreeMap 在 put 的时候，如果发现 key 是相同的，会把 value 值进行覆盖，所有不会产生重复的 key ，利用这一特性，使用 TreeSet 正好可以去重。</p><h5 id="4-说说-TreeSet-和-HashSet-两个-Set-的内部实现结构和原理？"><a href="#4-说说-TreeSet-和-HashSet-两个-Set-的内部实现结构和原理？" class="headerlink" title="4.说说 TreeSet 和 HashSet 两个 Set 的内部实现结构和原理？"></a>4.说说 TreeSet 和 HashSet 两个 Set 的内部实现结构和原理？</h5><p>答： HashSet 底层对 HashMap 的能力进行封装，比如说 add 方法，是直接使用 HashMap 的 put 方法，比较简单，但在初始化的时候，我看源码有一些感悟：说一下 HashSet 小结的四小点。</p><p>TreeSet 主要是对 TreeMap 底层能力进行封装复用，我发现了两种非常有意思的复用思路，重复 TreeSet 两种复用思路。</p><h4 id="2-7-4-总结"><a href="#2-7-4-总结" class="headerlink" title="2.7.4-总结"></a>2.7.4-总结</h4><p>本小节主要说了 Set 源码中两处亮点：</p><ol><li>HashSet 对组合的 HashMap 类扩容的门阀值的深入了解和设计，值得我们借鉴；</li><li>TreeSet 对 TreeMap 两种复用思路，值得我们学习，特别是第二种复用思路。</li></ol><p>HashSet 和 TreeSet 不会是面试的重点，但通过以上两点，可以让我们给面试官一种精益求精的感觉，成为加分项。</p><h3 id="2-8-彰显细节：看集合源码对我们实际工作的帮助和应用"><a href="#2-8-彰显细节：看集合源码对我们实际工作的帮助和应用" class="headerlink" title="2.8-彰显细节：看集合源码对我们实际工作的帮助和应用"></a>2.8-彰显细节：看集合源码对我们实际工作的帮助和应用</h3><p>本节中，我们先跳出源码的视角，来看看集合类的类图，看看在设计层面上，是否有可疑借鉴之处，接着通过源码来找找工作中的集合坑，提前扫雷。</p><h4 id="2-8-1-集合类图"><a href="#2-8-1-集合类图" class="headerlink" title="2.8.1-集合类图"></a>2.8.1-集合类图</h4><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9B%BE.jpeg" alt="集合类图"></p><p>上图是目前我们已学的集合类图，大概可以看出以下几点：</p><ol><li>每个接口做的事情非常明确，比如 Serializable，只负责序列化，Cloneable 只负责拷贝，Map 只负责定义 Map 的接口，整个图看起来虽然接口众多，但职责都很清晰；</li><li>复杂功能通过接口的继承来实现，比如 ArrayList 通过实现了 Serializable、Cloneable、RandomAccess、AbstractList、List 等接口，从而拥有了序列化、拷贝、对数组各种操作定义等各种功能；</li><li>上述类图只能看见继承的关系，组合的关系还看不出来，比如说 Set 组合封装 Map 的底层能力等。</li></ol><p>上述设计的最大好处是，每个接口能力职责单一，众多的接口变成了接口能力的积累，假设我们想再实现一个数据结构类，我们就可以从这些已有的能力接口中，挑选出能满足需求的能力接口，进行一些简单的组装，从而加快开发速度。</p><p>这种思想在平时的工作中也经常被使用，我们会把一些通用的代码块抽象出来，沉淀成代码块池，碰到不同的场景的时候，我们就从代码块池中，把我们需要的代码块提取出来，进行简单的编排和组装，从而实现我们需要的场景功能。</p><h4 id="2-8-2-集合工作中一些注意事项"><a href="#2-8-2-集合工作中一些注意事项" class="headerlink" title="2.8.2-集合工作中一些注意事项"></a>2.8.2-集合工作中一些注意事项</h4><h5 id="1-线程安全"><a href="#1-线程安全" class="headerlink" title="1.线程安全"></a>1.线程安全</h5><p>我们说集合都是非线程安全的，这里说的非线程安全指的是集合类作为共享变量，被多线程读写的时候，才是不安全的，如果要实现线程安全的集合，在类注释中，JDK 统一推荐我们使用 Collections.synchronized* 类， Collections 帮我们实现了 List、Set、Map 对应的线程安全的方法， 如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Collections-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95.jpeg" alt="Collections-线程安全方法"></p><p>图中实现了各种集合类型的线程安全的方法，我们以 synchronizedList 为例，从源码上来看下，Collections 是如何实现线程安全的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// mutex 就是我们需要锁住的对象</span><span class="token keyword">final</span> Object mutex<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">extends</span> <span class="token class-name">SynchronizedCollection</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7754090372962971524L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这个 List 就是我们需要保证线程安全的类</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span>        <span class="token function">SynchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">,</span> Object mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 我们可以看到，List 的所有操作都使用了 synchronized 关键字，来进行加锁</span>                <span class="token comment" spellcheck="true">// synchronized 是一种悲观锁，能够保证同一时刻，只能有一个线程能够获得锁</span>        <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>…………<span class="token punctuation">}</span>      </code></pre><p>从源码中我们可以看到 Collections 是通过 synchronized 关键字给 List 操作数组的方法加上锁，来实现线程安全的。</p><h5 id="2-集合性能"><a href="#2-集合性能" class="headerlink" title="2.集合性能"></a>2.集合性能</h5><p>集合的单个操作，一般都没有性能问题，性能问题主要出现的批量操作上。</p><h6 id="2-1-批量新增"><a href="#2-1-批量新增" class="headerlink" title="2.1-批量新增"></a>2.1-批量新增</h6><p>在 List 和 Map 大量数据新增的时候，我们不要使用 for 循环 + add/put 方法新增，这样子会有很大的扩容成本，我们应该尽量使用 addAll 和 putAll 方法进行新增，以 ArrayList 为例写了一个 demo 如下，演示了两种方案的性能对比：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatchInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 准备拷贝数据</span>  ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// for 循环 + add</span>  ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> start1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"单个 for 循环新增 300 w 个，耗时{}"</span><span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 批量新增</span>  ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> start2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list3<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"批量新增 300 w 个，耗时{}"</span><span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后打印出来的日志为：</p><p>16:52:59.865 [main] INFO demo.one.ArrayListDemo - 单个 for 循环新增 300 w 个，耗时1518<br>16:52:59.880 [main] INFO demo.one.ArrayListDemo - 批量新增 300 w 个，耗时8</p><p>可以看到，批量新增方法性能是单个新增方法性能的 189 倍，主要原因在于批量新增，只会扩容一次，大大缩短了运行时间，而单个新增，每次到达扩容阀值时，都会进行扩容，在整个过程中就会不断的扩容，浪费了很多时间，我们来看下批量新增的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 确保容量充足，整个过程只会扩容一次</span>  <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 进行数组的拷贝</span>  System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>  <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上是 ArrayList 批量新增的演示，我们可以看到，整个批量新增的过程中，只扩容了一次，HashMap 的 putAll 方法也是如此，整个新增过程只会扩容一次，大大缩短了批量新增的时间，提高了性能。</p><p>所以如果有人问你当碰到集合批量拷贝，批量新增场景，如何提高新增性能的时候 ，就可以从目标集合初始化方面应答。</p><p>这里也提醒了我们，在容器初始化的时候，最好能给容器赋上初始值，这样可以防止在 put 的过程中不断的扩容，从而缩短时间，上章 HashSet 的源码给我们演示了，给 HashMap 赋初始值的公式为：取括号内两者的最大值（期望的值/0.75+1，默认值 16）。</p><h6 id="2-2-批量删除"><a href="#2-2-批量删除" class="headerlink" title="2.2-批量删除"></a>2.2-批量删除</h6><p>批量删除 ArrayList 提供了 removeAll 的方法，HashMap 没有提供批量删除的方法，我们一起来看下 removeAll 的源码实现，是如何提高性能的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 批量删除，removeAll 方法底层调用的是 batchRemove 方法</span><span class="token comment" spellcheck="true">// complement 参数默认是 false,false 的意思是数组中不包含 c 中数据的节点往头移动</span><span class="token comment" spellcheck="true">// true 意思是数组中包含 c 中数据的节点往头移动，这个是根据你要删除数据和原数组大小的比例来决定的</span><span class="token comment" spellcheck="true">// 如果你要删除的数据很多，选择 false 性能更好，当然 removeAll 方法默认就是 false。</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// r 表示当前循环的位置、w 位置之前都是不需要被删除的数据，w 位置之后都是需要被删除的数据</span>  <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从 0 位置开始判断，当前数组中元素是不是要被删除的元素，不是的话移到数组头</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>        elementData<span class="token punctuation">[</span>w<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// r 和 size 不等，说明在 try 过程中发生了异常，在 r 处断开</span>    <span class="token comment" spellcheck="true">// 把 r 位置之后的数组移动到 w 位置之后(r 位置之后的数组数据都是没有判断过的数据，这样不会影响没有判断的数据，判断过的数据可以被删除)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> r<span class="token punctuation">,</span>                       elementData<span class="token punctuation">,</span> w<span class="token punctuation">,</span>                       size <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>      w <span class="token operator">+=</span> size <span class="token operator">-</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// w != size 说明数组中是有数据需要被删除的</span>    <span class="token comment" spellcheck="true">// 如果 w、size 相等，说明没有数据需要被删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// w 之后都是需要删除的数据，赋值为空，帮助 gc。</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>      modCount <span class="token operator">+=</span> size <span class="token operator">-</span> w<span class="token punctuation">;</span>      size <span class="token operator">=</span> w<span class="token punctuation">;</span>      modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> modified<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们看到 ArrayList 在批量删除时，如果程序执行正常，只有一次 for 循环，如果程序执行异常，才会加一次拷贝，而单个 remove 方法，每次执行的时候都会进行数组的拷贝（当删除的元素正好是数组最后一个元素时除外），当数组越大，需要删除的数据越多时，批量删除的性能会越差，所以在 ArrayList 批量删除时，强烈建议使用 removeAll 方法进行删除。</p><h5 id="3-集合的一些坑"><a href="#3-集合的一些坑" class="headerlink" title="3.集合的一些坑"></a>3.集合的一些坑</h5><ol><li>当集合的元素是自定义类时，自定义类强制实现 equals 和 hashCode 方法，并且两个都要实现。</li></ol><p>在集合中，除了 TreeMap 和 TreeSet 是通过比较器比较元素大小外，其余的集合类在判断索引位置和相等时，都会使用到 equals 和 hashCode 方法，这个在之前的源码解析中，我们有说到，所以当集合的元素是自定义类时，我们强烈建议覆写 equals 和 hashCode 方法，我们可以直接使用 IDEA 工具覆写这两个方法，非常方便；</p><ol><li>所有集合类，在 for 循环进行删除时，如果直接使用集合类的 remove 方法进行删除，都会快速失败，报 ConcurrentModificationException 的错误，所以在任意循环删除的场景下，都建议使用迭代器进行删除；</li><li>我们把数组转化成集合时，常使用 Arrays.asList(array)，这个方法有两个坑，代码演示坑为：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testArrayToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 坑1：修改数组的值，会直接影响原 list</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数组被修改之前，集合第一个元素为：{}"</span><span class="token punctuation">,</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数组被修改之前，集合第一个元素为：{}"</span><span class="token punctuation">,</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 坑2：使用 add、remove 等操作 list 的方法时，</span>  <span class="token comment" spellcheck="true">// 会报 UnsupportedOperationException 异常</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>坑 <span class="token number">1</span>：数组被修改后，会直接影响到新 List 的值。坑 <span class="token number">2</span>：不能对新 List 进行 add、remove 等操作，否则运行时会报 UnsupportedOperationException 错误。</code></pre><p>我们来看下 Arrays.asList 的源码实现，就能知道问题所在了，源码如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Arrays-asList.jpeg" alt="Arrays-asList"></p><p>从上图中，我们可以发现，Arrays.asList 方法返回的 List 并不是 java.util.ArrayList，而是自己内部的一个静态类，该静态类直接持有数组的引用，并且没有实现 add、remove 等方法，这些就是坑 1 和 2 的原因。</p><ol><li>集合 List 转化成数组，我们通常使用 toArray 这个方法，这个方法很危险，稍微不注意，就踩进大坑，我们示例代码如下：</li></ol><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下面这行被注释的代码这么写是无法转化成数组的，无参 toArray 返回的是 Object[],</span>    <span class="token comment" spellcheck="true">// 无法向下转化成 List&lt;Integer>，编译都无法通过</span>    <span class="token comment" spellcheck="true">// List&lt;Integer> list2 = list.toArray();</span>    <span class="token comment" spellcheck="true">// 演示有参 toArray 方法，数组大小不够时，得到数组为 null 情况</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array0<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"toArray 数组大小不够，array0 数组[0] 值是{},数组[1] 值是{},"</span><span class="token punctuation">,</span>array0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>array0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 演示数组初始化大小正好，正好转化成数组</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"toArray 数组大小正好，array1 数组[3] 值是{}"</span><span class="token punctuation">,</span>array1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 演示数组初始化大小大于实际所需大小，也可以转化成数组</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"toArray 数组大小多了，array2 数组[3] 值是{}，数组[4] 值是{}"</span><span class="token punctuation">,</span>array2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>array2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">07.687</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO demo<span class="token punctuation">.</span>one<span class="token punctuation">.</span>ArrayListDemo <span class="token operator">-</span> toArray 数组大小不够，array0 数组<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 值是null<span class="token punctuation">,</span>数组<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 值是null<span class="token punctuation">,</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">07.697</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO demo<span class="token punctuation">.</span>one<span class="token punctuation">.</span>ArrayListDemo <span class="token operator">-</span> toArray 数组大小正好，array1 数组<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 值是<span class="token number">4</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">07.697</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO demo<span class="token punctuation">.</span>one<span class="token punctuation">.</span>ArrayListDemo <span class="token operator">-</span> toArray 数组大小多了，array2 数组<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 值是<span class="token number">4</span>，数组<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 值是null</code></pre><p>toArray 的无参方法，无法强转成具体类型，这个编译的时候，就会有提醒，我们一般都会去使用带有参数的 toArray 方法，这时就有一个坑，如果参数数组的大小不够，这时候返回的数组值竟然是空，上述代码中的 array0 的返回值就体现了这点，但我们去看 toArray 源码，发现源码中返回的是 4 个大小值的数据，返回的并不是空，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// List 转化成数组</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果数组长度不够，按照 List 的大小进行拷贝，return 的时候返回的都是正确的数组</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Make a new array of a's runtime type, but my contents:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组长度大于 List 大小的，赋值为 null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> size<span class="token punctuation">)</span>    a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们丝毫看不出为什么 array0 的元素值为什么是 null，最后我们去看方法的注释，发现是这样子描述的：</p><pre class=" language-java"><code class="language-java">If the list fits in the specified array<span class="token punctuation">,</span> it is returned therein<span class="token punctuation">.</span>  Otherwise<span class="token punctuation">,</span> a <span class="token keyword">new</span> <span class="token class-name">array</span> is allocated with the runtime type of the specified array and the size of <span class="token keyword">this</span> list。</code></pre><p>翻译过来的意思就是说：如果返回的数组大小和申明的数组大小一致，那么就会正常返回，否则，一个新数组就会被分配返回。</p><p>所以我们在使用有参 toArray 方法时，申明的数组大小一定要大于等于 List 的大小，如果小于的话，你会得到一个空数组。</p><h4 id="2-8-3-总结"><a href="#2-8-3-总结" class="headerlink" title="2.8.3-总结"></a>2.8.3-总结</h4><p>本小节，我们详细描述了集合的线程安全、性能优化和日常工作中一些坑，这些问题我们在工作中经常会碰到，稍不留神就会引发线上故障，面试的时候也经常会通过这些问题，来考察大家的工作经验，所以阅读本章时，建议大家自己动手试一试，加深印象。</p><h3 id="2-9-差异对比：集合在-Java-7-和-8-有何不同和改进"><a href="#2-9-差异对比：集合在-Java-7-和-8-有何不同和改进" class="headerlink" title="2.9-差异对比：集合在 Java 7 和 8 有何不同和改进"></a>2.9-差异对比：集合在 Java 7 和 8 有何不同和改进</h3><p>Java 8 在 Java 7 的基础上，做了一些改进和优化，但我们在平时工作中，或者直接升级到 Java 8 的过程中，我们好像无需做任何兼容逻辑，那么 Java 8 底层是如何处理的呢，在改进的同时，是如何优雅兼容 Java 老版本，让使用者无需感知，接下来我们通过对比 Java 7 和 8 的差异，来展示 Java 8 是如何优雅升级的。</p><h4 id="2-9-1-通用区别"><a href="#2-9-1-通用区别" class="headerlink" title="2.9.1-通用区别"></a>2.9.1-通用区别</h4><h5 id="1-所有集合都新增了forEach-方法"><a href="#1-所有集合都新增了forEach-方法" class="headerlink" title="1.所有集合都新增了forEach 方法"></a>1.所有集合都新增了forEach 方法</h5><p>List、Set、Map 在 Java 8 版本中都增加了 forEach 的方法，方法的入参是 Consumer，Consumer 是一个函数式接口，可以简单理解成允许一个入参，但没有返回值的函数式接口，我们以 ArrayList 的 forEach 的源码为例，来看下方法是如何实现的 ：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断非空</span>  Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// modCount的原始值被拷贝</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>  <span class="token keyword">final</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每次循环都会判断数组有没有被修改，一旦被修改，停止循环</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行循环内容，action 代表我们要干的事情</span>    action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 数组如果被修改了，抛异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从这段源码中，很容易产生两个问题：</p><p>1、action.accept 到底是个啥？</p><p>action.accept 就是你在 for 循环中要干的事情，你可以进行任何事情，比如我们打印一句话，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testForEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// value 是每次循环的入参，就是 list 中的每个元素</span>  list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> value<span class="token operator">-</span><span class="token operator">></span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前值为：{}"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出为：当前值为：<span class="token number">1</span>当前值为：<span class="token number">3</span>当前值为：<span class="token number">2</span>当前值为：<span class="token number">4</span></code></pre><p>log.info(“当前值为：{}”,value) 就是我们要干的事情，就是 action。</p><p>2.、forEach 方法上打了 @Override 注解，说明该方法是被继承实现的，该方法是被定义在 Iterable 接口上的，Java 7 和 8 的 ArrayList 都实现了该接口，但我们在 Java 7 的 ArrayList 并没有发现有实现该方法，编译器也木有报错，这个主要是因为 Iterable 接口的 forEach 方法被加上了 default 关键字，这个关键字只会出现在接口类中，被该关键字修饰的方法无需强制要求子类继承，但需要自己实现默认实现，我们看下源码：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Iterable.jpeg" alt="Iterable"></p><p>不仅仅是 forEach 这一个方法是这么干的，List、Set、Map 接口中很多新增的方法都是这么干的，通过 default 关键字，可以让 Java 7 的集合子类无需实现 Java 8 中新增的方法。</p><p>如果想在接口中新增一个方法，但又不想子类强制实现该方法时，可以给该方法加上 default 关键字，这个在实际工作中，也经常使用到，算是重构的小技巧吧。</p><h4 id="2-9-2-List区别"><a href="#2-9-2-List区别" class="headerlink" title="2.9.2-List区别"></a>2.9.2-List区别</h4><h5 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h5><p>ArrayList 无参初始化时，Java 7 是直接初始化 10 的大小，Java 8 去掉了这个逻辑，初始化时是空数组，在第一次 add 时才开始按照 10 进行扩容，下图是源码的差异对比图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayList-78%E5%AF%B9%E6%AF%94.jpeg" alt="ArrayList-78对比"></p><p>List 其它方面 java7 和 8 并没有改动。</p><h4 id="2-9-3-Map区别"><a href="#2-9-3-Map区别" class="headerlink" title="2.9.3-Map区别"></a>2.9.3-Map区别</h4><h5 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h5><ol><li>和 ArrayList 一样，Java 8 中 HashMap 在无参构造器中，丢弃了 Java 7 中直接把数组初始化 16 的做法，而是采用在第一次新增的时候，才开始扩容数组大小；</li><li>hash 算法计算公式不同，Java 8 的 hash 算法更加简单，代码更加简洁；</li><li>Java 8 的 HashMap 增加了红黑树的数据结构，这个是 Java 7 中没有的，Java 7 只有数组 + 链表的结构，Java 8 中提出了数组 + 链表 + 红黑树的结构，一般 key 是 Java 的 API 时，比如说 String 这些 hashcode 实现很好的 API，很少出现链表转化成红黑树的情况，因为 String 这些 API 的 hash 算法够好了，只有当 key 是我们自定义的类，而且我们覆写的 hashcode 算法非常糟糕时，才会真正使用到红黑树，提高我们的检索速度。</li></ol><p>也是因为 Java 8 新增了红黑树，所以几乎所有操作数组的方法的实现，都发生了变动，比如说 put、remove 等操作，可以说 Java 8 的 HashMap 几乎重写了一遍，所以 Java 7 的很多问题都被 Java 8 解决了，比如扩容时极小概率死锁，丢失数据等等。</p><ol><li>新增了一些好用的方法，比如 getOrDefault，我们看下源码，非常简单：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果 key 对应的值不存在，返回期望的默认值 defaultValue</span><span class="token keyword">public</span> V <span class="token function">getOrDefault</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> V defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> defaultValue <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还有 putIfAbsent(K key, V value) 方法，意思是，如果 map 中存在 key 了，那么 value 就不会覆盖，如果不存在 key ，新增成功。</p><p>还有 compute 方法，意思是允许我们把 key 和 value 的值进行计算后，再 put 到 map 中，为防止 key 值不存在造成未知错误，map 还提供了 computeIfPresent 方法，表示只有在 key 存在的时候，才执行计算，demo 如下：</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"compute 之前值为：{}"</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> key <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"compute 之后值为：{}"</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 还原测试值</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果为 11 的 key 不存在的话，需要注意 value 为空的情况，下面这行代码就会报空指针</span>    <span class="token comment" spellcheck="true">//  map.compute(11,(key,value) -> key * value);</span>    <span class="token comment" spellcheck="true">// 为了防止 key 不存在时导致的未知异常，我们一般有两种办法</span>    <span class="token comment" spellcheck="true">// 1：自己判断空指针</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> null <span class="token operator">==</span> value <span class="token operator">?</span> null <span class="token operator">:</span> key <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2：computeIfPresent 方法里面判断</span>    map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> key <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"computeIfPresent 之后值为：{}"</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>结果是：compute 之前值为：<span class="token number">10</span>compute 之后值为：<span class="token number">100</span>computeIfPresent 之后值为：null（这个结果中，可以看出，使用 computeIfPresent 避免了空指针）</code></pre><p>上述 Java 8 新增的几种方法非常好用，在实际工作中，可以大大减少我们的代码量，computeIfPresent 的源码就不贴了，有兴趣可以去 github 上面查看，主要的实现原理如下：</p><ul><li>找到 key 对应的老值，会分别从数组、链表、红黑树中找；</li><li>根据 key 和老值进行计算，得到新值；</li><li>用新值替换掉老值，可能是普通替换、链表替换或红黑树替换。</li></ul><h5 id="2-LinkedHashMap"><a href="#2-LinkedHashMap" class="headerlink" title="2.LinkedHashMap"></a>2.LinkedHashMap</h5><p>由于 Java 8 的底层数据有变动，导致 HashMap 操作数据的方法几乎重写，也使 LinkedHashMap 的实现名称上有所差异，原理上都相同，我们看下面的图，左边是 Java 7，右边是 Java 8。</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/LinkedHashMap-78%E5%8C%BA%E5%88%AB.jpeg" alt="LinkedHashMap-78区别"></p><p>从图中，我们发现 LinkedHashMap 的方法名有所修改，底层的实现逻辑其实都差不多的。</p><h4 id="2-9-4-其他区别"><a href="#2-9-4-其他区别" class="headerlink" title="2.9.4-其他区别"></a>2.9.4-其他区别</h4><h5 id="1-Arrays-提供了很多-parallel-开头的方法。"><a href="#1-Arrays-提供了很多-parallel-开头的方法。" class="headerlink" title="1.Arrays 提供了很多 parallel 开头的方法。"></a>1.Arrays 提供了很多 parallel 开头的方法。</h5><p>Java 8 的 Arrays 提供了一些 parallel 开头的方法，这些方法支持并行的计算，在数据量大的时候，会充分利用 CPU ，提高计算效率，比如说 parallelSort 方法，方法底层有判断，只有数据量大于 8192 时，才会真正走并行的实现，在实际的实验中，并行计算的确能够快速的提高计算速度。</p><h4 id="2-9-5-面试题"><a href="#2-9-5-面试题" class="headerlink" title="2.9.5-面试题"></a>2.9.5-面试题</h4><h5 id="1-Java-8-在-List、Map-接口上新增了很多方法，为什么-Java-7-中这些接口的实现者不需要强制实现这些方法呢？"><a href="#1-Java-8-在-List、Map-接口上新增了很多方法，为什么-Java-7-中这些接口的实现者不需要强制实现这些方法呢？" class="headerlink" title="1.Java 8 在 List、Map 接口上新增了很多方法，为什么 Java 7 中这些接口的实现者不需要强制实现这些方法呢？"></a>1.Java 8 在 List、Map 接口上新增了很多方法，为什么 Java 7 中这些接口的实现者不需要强制实现这些方法呢？</h5><p>答：主要是因为这些新增的方法被 default 关键字修饰了，default 一旦修饰接口上的方法，我们需要在接口的方法中写默认实现，并且子类无需强制实现这些方法，所以 Java 7 接口的实现者无需感知。</p><h5 id="2-Java-8-中有新增很多实用的方法，你在平时工作中有使用过么？"><a href="#2-Java-8-中有新增很多实用的方法，你在平时工作中有使用过么？" class="headerlink" title="2.Java 8 中有新增很多实用的方法，你在平时工作中有使用过么？"></a>2.Java 8 中有新增很多实用的方法，你在平时工作中有使用过么？</h5><p>答：有的，比如说 getOrDefault、putIfAbsent、computeIfPresent 方法等等，具体使用细节参考上文。</p><h5 id="3-说说-computeIfPresent-方法的使用姿势？"><a href="#3-说说-computeIfPresent-方法的使用姿势？" class="headerlink" title="3.说说 computeIfPresent 方法的使用姿势？"></a>3.说说 computeIfPresent 方法的使用姿势？</h5><p>答：computeIfPresent 是可以对 key 和 value 进行计算后，把计算的结果重新赋值给 key，并且如果 key 不存在时，不会报空指针，会返回 null 值。</p><h5 id="4-Java-8-集合新增了-forEach-方法，和普通的-for-循环有啥不同？"><a href="#4-Java-8-集合新增了-forEach-方法，和普通的-for-循环有啥不同？" class="headerlink" title="4.Java 8 集合新增了 forEach 方法，和普通的 for 循环有啥不同？"></a>4.Java 8 集合新增了 forEach 方法，和普通的 for 循环有啥不同？</h5><p>答：新增的 forEach 方法的入参是函数式的接口，比如说 Consumer 和 BiConsumer，这样子做的好处就是封装了 for 循环的代码，让使用者只需关注实现每次循环的业务逻辑，简化了重复的 for 循环代码，使代码更加简洁，普通的 for 循环，每次都需要写重复的 for 循环代码，forEach 把这种重复的计算逻辑吃掉了，使用起来更加方便。</p><h5 id="5-HashMap-8-和-7-有啥区别？"><a href="#5-HashMap-8-和-7-有啥区别？" class="headerlink" title="5.HashMap 8 和 7 有啥区别？"></a>5.HashMap 8 和 7 有啥区别？</h5><p>答：HashMap 8 和 7 的差别太大了，新增了红黑树，修改了底层数据逻辑，修改了 hash 算法，几乎所有底层数组变动的方法都重写了一遍，可以说 Java 8 的 HashMap 几乎重新了一遍。</p><h4 id="2-9-6-总结"><a href="#2-9-6-总结" class="headerlink" title="2.9.6-总结"></a>2.9.6-总结</h4><p>总体来说，List 方面是小改动，HashMap 几乎重写了一套，所有的集合都新增了函数式的方法，比如说 forEach，也新增了很多好用的函数，比如说 getOrDefault，这些函数可以大大减少我们的代码量，让我们把关注点聚焦在业务逻辑的实现上，这其实是一种思想，把繁琐重复的计算逻辑抽取出来，从计算逻辑中扩展出业务逻辑的口子，让使用者只专心关注业务逻辑的实现即可。</p><p>想要了解更多差异，也可直接前往 JDK 8 新特性查看，地址为：<a href="http://openjdk.java.net/projects/jdk8/features#103。" target="_blank" rel="noopener">http://openjdk.java.net/projects/jdk8/features#103。</a></p><h3 id="2-10-简化工作：Guava-Lists-Maps-实际工作运用和源码"><a href="#2-10-简化工作：Guava-Lists-Maps-实际工作运用和源码" class="headerlink" title="2.10-简化工作：Guava Lists Maps 实际工作运用和源码"></a>2.10-简化工作：Guava Lists Maps 实际工作运用和源码</h3><p>在日常工作中，我们经常会使用一些三方的 API 来简化我们的工作，Guava 就是其中一种，Guava 是 Google 开源的技术框架，使用率高，社区活跃度也很高。</p><p>本小节我们从工作中对 Guava 集合的使用入手，然后深入的看下其底层的实现，最后总结其设计思想，感兴趣的同学也可以下载源码学习，GitHub 地址：<a href="https://github.com/google/guava，源码中" target="_blank" rel="noopener">https://github.com/google/guava，源码中</a> guava 的文件夹为其源码。</p><h4 id="2-10-1-运用工厂模式进行初始化"><a href="#2-10-1-运用工厂模式进行初始化" class="headerlink" title="2.10.1-运用工厂模式进行初始化"></a>2.10.1-运用工厂模式进行初始化</h4><p>在集合类初始化方面，Guava 比 Java 原生的 API 更加好用，还发明了很多新的功能，比如说在 JDK 7 之前，我们新建集合类时，声明和初始化都必须写上泛型说明，像这样：<code>List&lt;泛型&gt; list = new ArrayList&lt;泛型&gt;();</code> ， JDK 7 之后有所改变，我们只需要在声明处写上泛型说明，像这样：<code>List&lt;泛型&gt; list = new ArrayList&lt;&gt;();</code>。</p><p>Guava 提供了更加方便的使用姿势，采用了工厂模式，把集合创建的逻辑交给了工厂，开发者无需关注工厂底层是如何创建的，只需要关心，工厂能产生什么，代码于是变成了这样：<code>List&lt;泛型&gt; list = Lists.newArrayList();</code>，Lists 就是 Guava 提供出来的，方便操作 List 的工具类。</p><p>这种写法其实就是一种简单的工厂模式，只需要定义好工厂的入参和出参，就能对外隐藏其内部的创建逻辑，提供更加方便的使用体验。</p><p>当然除了 Lists，Guava 还提供了很多其他实用工具，如 Maps、Sets，接下来我们分别来看下这些常用工具的使用和原理。</p><h4 id="2-10-2-Lists"><a href="#2-10-2-Lists" class="headerlink" title="2.10.2-Lists"></a>2.10.2-Lists</h4><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h5><p>Lists 最大的功能是能帮助我们进行 List 的初始化，比如我们刚说的 newArrayList 这种：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这种底层是帮助我们写好了泛型，E 代表泛型，表示当前返回的泛型类型和声明的一致即可，在编译的时候，会把泛型 E 转化成我们声明的 String。</span></code></pre><p>如果你清楚 List 的大小，我们也可以这样做：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 可以预估 list 的大小为 20</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不太肯定 list 大小是多少，但期望是大小是 20 上下。</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayListWithExpectedSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>newArrayListWithCapacity(20) 方法内部实现是：<code>new ArrayList&lt;&gt;(20);</code>，而 newArrayListWithExpectedSize 方法内部实现是对 List 大小有一个计算公式的，计算公式为：<code>5L + arraySize + (arraySize / 10)</code> ，arraySize 表示传进来的值，公式简化下就是 5 + 11/10 * arraySize，因为这个方法表示期望的大小，所以这里取的约是期望值的十分之十一，比传进来的值约大十分之一，所以根据 20 最终计算出来的值是 27。</p><p>Lists 在初始化的时候，还支持传迭代器的入参（只适合小数据量的迭代器的入参），源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">newArrayList</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// addAll 方法底层其实通过迭代器进行 for 循环添加</span>  Iterators<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从 Lists 对 List 初始化进行包装的底层源码来看，底层源码非常简单的，但我们还是愿意使用这种方式的包装，主要是因为这种工厂模式的包装，使我们的使用姿势更加优雅，使用起来更加方便。</p><h5 id="2-分组和反转排序"><a href="#2-分组和反转排序" class="headerlink" title="2.分组和反转排序"></a>2.分组和反转排序</h5><p>除了初始化之外，Lists 还提供了两个比较实用的功能，分组和反转排序功能，我们分别来演示一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 演示反转排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"40"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"反转之前："</span><span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"反转之后："</span><span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打印出来的结果为：</span>反转之前：<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">]</span>反转之后：<span class="token punctuation">[</span><span class="token string">"40"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">]</span></code></pre><p>reverse 方法底层实现非常巧妙，底层覆写了 List 原生的 get(index) 方法，会把传进来的 index 进行 (size - 1) - index 的计算，使计算得到的索引位置和 index 位置正好相反，这样当我们 get 时，数组索引位置的 index 已经是相反的位置了，达到了反转排序的效果，其实底层并没有进行反转排序，只是在计算相反的索引位置，通过计算相反的索引位置这样简单的设计，得到了反转排序的效果，很精妙。</p><p>在工作中，有时候我们需要把一个大的 list 进行切分，然后再把每份丢给线程池去运行，最后将每份运行的结果汇总，Lists 工具类就提供了一个对 list 进行切分分组的方法，演示 demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分组</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPartition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"40"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"分组之前："</span><span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> list2 <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"分组之后："</span><span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果为：分组之前：<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">]</span>分组之后：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"40"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>partition 方法的第二个参数的意思，你想让分组后的 List 包含几个元素，这个方法的底层实现其实就是 subList 方法。</p><p>有一点需要我们注意的是这两个方法返回的 List 并不是 ArrayList，是自定义的 List，所以对于 ArrayList 的有些功能可能并不支持，使用的时候最好能看下源码，看看底层有无支持。</p><h5 id="3-小结-3"><a href="#3-小结-3" class="headerlink" title="3.小结"></a>3.小结</h5><p>Lists 上述的方法大大的方便了我们进行开发，简化了使用姿势，但其内部实现却非常简单巧妙，比如说 reverse 方法可以输出相反排序的 List，但底层并没有实现排序，只是计算了索引位置的相反值而已，这点值得我们学习。</p><h4 id="2-10-3-Maps"><a href="#2-10-3-Maps" class="headerlink" title="2.10.3-Maps"></a>2.10.3-Maps</h4><h5 id="1-初始化-1"><a href="#1-初始化-1" class="headerlink" title="1.初始化"></a>1.初始化</h5><p>Maps 也是有着各种初始化 Map 的各种方法，原理不说了，和 Lists 类似，我们演示下如何使用：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> hashMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> linkedHashMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newLinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里 Map 的初始化大小公式和 HashSet 初始化公式类似，还记得 HashSet 初始化 HashMap 时，经典的计算初始大小的公式么：取最大值（期望的值 / 0.75 + 1，默认值 16），newHashMapWithExpectedSize 方法底层也是这么算的初始化大小的</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> withExpectedSizeHashMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMapWithExpectedSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-difference"><a href="#2-difference" class="headerlink" title="2.difference"></a>2.difference</h5><p>Maps 提供了一个特别有趣也很实用的方法：difference，此方法的目的是比较两个 Map 的差异，入参就是两个 Map，比较之后能够返回四种差异：</p><ol><li>左边 Map 独有 key。</li><li>右边 Map 独有 key。</li><li>左右边 Map 都有 key，并且 value 相等。</li><li>左右边 Map 都有 key，但是 value 不等。</li></ol><p>我们用代码来演示一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ImmutableMap.of 也是 Guava 提供初始化 Map 的方法，入参格式为 k1,v1,k2,v2,k3,v3……</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> leftMap <span class="token operator">=</span> ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> rightMap <span class="token operator">=</span> ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MapDifference difference <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>leftMap<span class="token punctuation">,</span> rightMap<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"左边 map 独有 key：{}"</span><span class="token punctuation">,</span>difference<span class="token punctuation">.</span><span class="token function">entriesOnlyOnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"右边 map 独有 key：{}"</span><span class="token punctuation">,</span>difference<span class="token punctuation">.</span><span class="token function">entriesOnlyOnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"左右边 map 都有 key，并且 value 相等：{}"</span><span class="token punctuation">,</span>difference<span class="token punctuation">.</span><span class="token function">entriesInCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"左右边 map 都有 key，但 value 不等：{}"</span><span class="token punctuation">,</span>difference<span class="token punctuation">.</span><span class="token function">entriesDiffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>最后打印结果为：左边 map 独有 key：<span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>右边 map 独有 key：<span class="token punctuation">{</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span>左右边 map 都有 key，并且 value 相等：<span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>左右边 map 都有 key，但 value 不等：<span class="token punctuation">{</span><span class="token number">3</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>从这个 demo 我们可以看到此方法的强大威力，我们在工作中经常遇到 Map 或者 List 间比较差异的任务，我们就可以直接使用该方法进行对比，List 可以先转化成 Map。</p><p>而且 difference 底层的实现也算是最优的实现了，只需要循环一遍，就可得到上述四种差异结果，源码解析如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对比两个 map 的差异</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doDifference</span><span class="token punctuation">(</span>    Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> left<span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> right<span class="token punctuation">,</span>    Equivalence<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">></span> valueEquivalence<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// key 只在左边 map 出现</span>    Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> onlyOnLeft<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// key 只在右边 map 出现，调用 doDifference 方法前已经包含了全部右边的值</span>    Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> onlyOnRight<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// key 在左右 map 中都出现过，并且 value 都相等</span>    Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> onBoth<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// key 在左右 map 中都出现过，但 value 不等</span>    Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> MapDifference<span class="token punctuation">.</span>ValueDifference<span class="token operator">&lt;</span>V<span class="token operator">>></span> differences<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 以左边 map 为基准进行循环</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> entry <span class="token operator">:</span> left<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    K leftKey <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    V leftValue <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 右边 map 包含左边的 key</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>leftKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// onlyOnRight 已经包含全部右边的值 所以需要删除当前 key</span>      V rightValue <span class="token operator">=</span> onlyOnRight<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>leftKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// key 相等，并且 value 值也相等</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>valueEquivalence<span class="token punctuation">.</span><span class="token function">equivalent</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">,</span> rightValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        onBoth<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>leftKey<span class="token punctuation">,</span> leftValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// key 相等，但 value 值不等</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        differences<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>leftKey<span class="token punctuation">,</span> ValueDifferenceImpl<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">,</span> rightValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 右边 map 不包含左边的 key，就是左边 map 独有的 key</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      onlyOnLeft<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>leftKey<span class="token punctuation">,</span> leftValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是一种比较优秀的，快速比对的算法，可以好好看下上面的源码，然后把这种算法背下来，或者自己再次实现一次。</p><p>Sets 的使用方式和 Lists 和 Maps 很类似，没有太大的亮点，我们就不说了。</p><h4 id="2-10-4-总结"><a href="#2-10-4-总结" class="headerlink" title="2.10.4-总结"></a>2.10.4-总结</h4><p>这一小节主要都是实战内容，在实际工作中可以用起来。</p><p>在 Guava 对集合的设计中，有两个大点是非常值得我们学习的：</p><ol><li>Lists、Maps 的出现给我们提供了更方便的使用姿势和方法，我们在实际工作中，如果碰到特别繁琐，或者特别难用的 API，我们也可以进行一些包装，使更好用，这个是属于在解决目前的痛点的问题上进行创新，是非常值得提倡的一件事情，往往可以帮助你拿到更好的绩效。</li><li>如果有人问你，List 或者 Map 高效的差异排序算法，完全可以参考 Maps.difference 的内部实现，该方法只使用了一次循环，就可得到所有的相同或不同结果，这种算法在我们工作中也经常被使用。</li></ol><p>了解更多，可以直接前往 Guava 的代码库查看：<a href="https://github.com/google/guava" target="_blank" rel="noopener">https://github.com/google/guava</a></p><h2 id="3-并发集合类"><a href="#3-并发集合类" class="headerlink" title="3-并发集合类"></a>3-并发集合类</h2><h3 id="3-1-CopyOnWriteArrayList-源码解析和设计思路"><a href="#3-1-CopyOnWriteArrayList-源码解析和设计思路" class="headerlink" title="3.1-CopyOnWriteArrayList 源码解析和设计思路"></a>3.1-CopyOnWriteArrayList 源码解析和设计思路</h3><p>在 ArrayList 的类注释上，JDK 就提醒了我们，如果要把 ArrayList 作为共享变量的话，是线程不安全的，推荐我们自己加锁或者使用 Collections.synchronizedList 方法，其实 JDK 还提供了另外一种线程安全的 List，叫做 CopyOnWriteArrayList，这个 List 具有以下特征：</p><ol><li>线程安全的，多线程环境下可以直接使用，无需加锁；</li><li>通过锁 + 数组拷贝 + volatile 关键字保证了线程安全；</li><li>每次数组操作，都会把数组拷贝一份出来，在新数组上进行操作，操作成功之后再赋值回去。</li></ol><h4 id="3-1-1-整体架构"><a href="#3-1-1-整体架构" class="headerlink" title="3.1.1-整体架构"></a>3.1.1-整体架构</h4><p>从整体架构上来说，CopyOnWriteArrayList 数据结构和 ArrayList 是一致的，底层是个数组，只不过 CopyOnWriteArrayList 在对数组进行操作的时候，基本会分四步走：</p><ol><li>加锁；</li><li>从原数组中拷贝出新数组；</li><li>在新数组上进行操作，并把新数组赋值给数组容器；</li><li>解锁。</li></ol><p>除了加锁之外，CopyOnWriteArrayList 的底层数组还被 volatile 关键字修饰，意思是一旦数组被修改，其它线程立马能够感知到，代码如下：</p><p><code>private transient volatile Object[] array;</code></p><p>整体上来说，CopyOnWriteArrayList 就是利用锁 + 数组拷贝 + volatile 关键字保证了 List 的线程安全。</p><h5 id="1-类注释-2"><a href="#1-类注释-2" class="headerlink" title="1.类注释"></a>1.类注释</h5><p>我们看看从 CopyOnWriteArrayList 的类注释上能得到哪些信息：</p><ol><li>所有的操作都是线程安全的，因为操作都是在新拷贝数组上进行的；</li><li>数组的拷贝虽然有一定的成本，但往往比一般的替代方案效率高；</li><li>迭代过程中，不会影响到原来的数组，也不会抛出 ConcurrentModificationException 异常。</li></ol><p>接着我们来看下 CopyOnWriteArrayList 的核心方法源码。</p><h4 id="3-1-2-新增"><a href="#3-1-2-新增" class="headerlink" title="3.1.2-新增"></a>3.1.2-新增</h4><p>新增有很多种情况，比如说：新增到数组尾部、新增到数组某一个索引位置、批量新增等等，操作的思路还是我们开头说的四步，我们拿新增到数组尾部的方法举例，来看看底层源码的实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 添加元素到数组尾部</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加锁</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到所有的原数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拷贝到新数组里面，新数组的长度是 + 1 的，因为新增会多一个元素</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在新数组中进行赋值，新元素直接放在数组的尾部</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 替换掉原来的数组</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// finally 里面释放锁，保证即使 try 发生了异常，仍然能够释放锁   </span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们发现整个 add 过程都是在持有锁的状态下进行的，通过加锁，来保证同一时刻只能有一个线程能够对同一个数组进行 add 操作。</p><p>除了加锁之外，还会从老数组中创建出一个新数组，然后把老数组的值拷贝到新数组上，这时候就有一个问题：都已经加锁了，为什么需要拷贝数组，而不是在原来数组上面进行操作呢，原因主要为：</p><ol><li>volatile 关键字修饰的是数组，如果我们简单的在原来数组上修改其中某几个元素的值，是无法触发可见性的，我们必须通过修改数组的内存地址才行，也就说要对数组进行重新赋值才行。</li><li>在新的数组上进行拷贝，对老数组没有任何影响，只有新数组完全拷贝完成之后，外部才能访问到，降低了在赋值过程中，老数组数据变动的影响。</li></ol><p>简单 add 操作是直接添加到数组的尾部，接着我们来看下指定位置添加元素的关键源码（部分源码）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// len：数组的长度、index：插入的位置</span><span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果要插入的位置正好等于数组的末尾，直接拷贝数组即可</span><span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果要插入的位置在数组的中间，就需要拷贝 2 次</span><span class="token comment" spellcheck="true">// 第一次从 0 拷贝到 index。</span><span class="token comment" spellcheck="true">// 第二次从 index+1 拷贝到末尾。</span>    newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// index 索引位置的值是空的，直接赋值即可。</span>newElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把新数组的值赋值给数组的容器中</span><span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从源码中可以看到，当插入的位置正好处于末尾时，只需要拷贝一次，当插入的位置处于中间时，此时我们会把原数组一分为二，进行两次拷贝操作。</p><p>最后还有个批量新增操作，源码我们就不贴了，底层也是拷贝数组的操作。</p><h5 id="1-小结"><a href="#1-小结" class="headerlink" title="1.小结"></a>1.小结</h5><p>从 add 系列方法可以看出，CopyOnWriteArrayList 通过加锁 + 数组拷贝+ volatile 来保证了线程安全，每一个要素都有着其独特的含义：</p><ol><li>加锁：保证同一时刻数组只能被一个线程操作；</li><li>数组拷贝：保证数组的内存地址被修改，修改后触发 volatile 的可见性，其它线程可以立马知道数组已经被修改；</li><li>volatile：值被修改后，其它线程能够立马感知最新值。</li></ol><p>3 个要素缺一不可，比如说我们只使用 1 和 3 ，去掉 2，这样当我们修改数组中某个值时，并不会触发 volatile 的可见特性的，只有当数组内存地址被修改后，才能触发把最新值通知给其他线程的特性。</p><h4 id="3-1-3-删除"><a href="#3-1-3-删除" class="headerlink" title="3.1.3-删除"></a>3.1.3-删除</h4><p>接着我们来看下指定数组索引位置删除的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除某个索引位置的数据</span><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加锁</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先得到老值</span>        E oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果要删除的数据正好是数组的尾部，直接删除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果删除的数据在数组的中间，分三步走</span>            <span class="token comment" spellcheck="true">// 1. 设置新数组的长度减一，因为是减少一个元素</span>            <span class="token comment" spellcheck="true">// 2. 从 0 拷贝到数组新位置</span>            <span class="token comment" spellcheck="true">// 3. 从新位置拷贝到数组尾部</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>步骤分为三步：</p><ol><li>加锁；</li><li>判断删除索引的位置，从而进行不同策略的拷贝；</li><li>解锁。</li></ol><p>代码整体的结构风格也比较统一：锁 + try finally +数组拷贝，锁被 final 修饰的，保证了在加锁过程中，锁的内存地址肯定不会被修改，finally 保证锁一定能够被释放，数组拷贝是为了删除其中某个位置的元素。</p><h4 id="3-1-4-批量删除"><a href="#3-1-4-批量删除" class="headerlink" title="3.1.4-批量删除"></a>3.1.4-批量删除</h4><p>数组的批量删除很有意思，接下来我们来看下 CopyOnWriteArrayList 的批量删除的实现过程：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 批量删除包含在 c 中的元素</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 说明数组有值，数组无值直接返回 false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// newlen 表示新数组的索引位置，新数组中存在不包含在 c 中的元素</span>            <span class="token keyword">int</span> newlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环，把不包含在 c 里面的元素，放到新数组中</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object element <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 不包含在 c 中的元素，从 0 开始放到新数组中</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>                    temp<span class="token punctuation">[</span>newlen<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 拷贝新数组，变相的删除了不包含在 c 中的元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newlen <span class="token operator">!=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setArray</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们可以看到，我们并不会直接对数组中的元素进行挨个删除，而是先对数组中的值进行循环判断，把我们不需要删除的数据放到临时数组中，最后临时数组中的数据就是我们不需要删除的数据。</p><p>不知道大家有木有似曾相识的感觉，ArrayList 的批量删除的思想也是和这个类似的，所以我们在需要删除多个元素的时候，最好都使用这种批量删除的思想，而不是采用在 for 循环中使用单个删除的方法，单个删除的话，在每次删除的时候都会进行一次数组拷贝(删除最后一个元素时不会拷贝)，很消耗性能，也耗时，会导致加锁时间太长，并发大的情况下，会造成大量请求在等待锁，这也会占用一定的内存。</p><h4 id="3-1-5-其他方法"><a href="#3-1-5-其他方法" class="headerlink" title="3.1.5-其他方法"></a>3.1.5-其他方法</h4><h5 id="1-indexOf"><a href="#1-indexOf" class="headerlink" title="1.indexOf"></a>1.indexOf</h5><p>indexOf 方法的主要用处是查找元素在数组中的下标位置，如果元素存在就返回元素的下标位置，元素不存在的话返回 -1，不但支持 null 值的搜索，还支持正向和反向的查找，我们以正向查找为例，通过源码来说明一下其底层的实现方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// o：我们需要搜索的元素</span><span class="token comment" spellcheck="true">// elements：我们搜索的目标数组</span><span class="token comment" spellcheck="true">// index：搜索的开始位置</span><span class="token comment" spellcheck="true">// fence：搜索的结束位置</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">,</span>                           <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> fence<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 支持对 null 的搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 找到第一个 null 值，返回下标索引的位置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过 equals 方法来判断元素是否相等</span>        <span class="token comment" spellcheck="true">// 如果相等，返回元素的下标位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>indexOf 方法在 CopyOnWriteArrayList 内部使用也比较广泛，比如在判断元素是否存在时（contains），在删除元素方法中校验元素是否存在时，都会使用到 indexOf 方法，indexOf 方法通过一次 for 循环来查找元素，我们在调用此方法时，需要注意如果找不到元素时，返回的是 -1，所以有可能我们会对这个特殊值进行判断。</p><h5 id="2-迭代"><a href="#2-迭代" class="headerlink" title="2.迭代"></a>2.迭代</h5><p>在 CopyOnWriteArrayList 类注释中，明确说明了，在其迭代过程中，即使数组的原值被改变，也不会抛出 ConcurrentModificationException 异常，其根源在于数组的每次变动，都会生成新的数组，不会影响老数组，这样的话，迭代过程中，根本就不会发生迭代数组的变动，我们截几个图说明一下：</p><ol><li><p>迭代是直接持有原有数组的引用，也就是说迭代过程中，一旦原有数组的值内存地址发生变化，必然会影响到迭代过程，下图源码演示的是 CopyOnWriteArrayList 的迭代方法，我们可以看到迭代器是直接持有原数组的引用：</p><p>![CopyOnWriteArrayList 的迭代方法](CopyOnWriteArrayList 的迭代方法.jpeg)</p></li><li><p>我们写了一个 demo，在 CopyOnWriteArrayList 迭代之后，往 CopyOnWriteArrayList 里面新增值，从下图中可以看到在 CopyOnWriteArrayList 迭代之前，数组的内存地址是 962，请记住这个数字：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/testIterator.jpeg" alt="testIterator"></p></li><li><p>CopyOnWriteArrayList 迭代之后，我们使用 add(“50”) 代码给数组新增一个数据后，数组内存地址发生了变化，内存地址从原来的 962 变成了 968，这是因为 CopyOnWriteArrayList 的 add 操作，会生成新的数组，所以数组的内存地址发生了变化：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/testIterator2.jpeg" alt="testIterator2"></p></li><li><p>迭代继续进行时，我们发现迭代器中的地址仍然是迭代之前引用的地址，是 962，而不是新的数组的内存地址：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/testIterator3.jpeg" alt="testIterator3"></p></li></ol><p>从上面 4 张截图，我们可以得到迭代过程中，即使 CopyOnWriteArrayList 的结构发生变动了，也不会抛出 ConcurrentModificationException 异常的原因：CopyOnWriteArrayList 迭代持有的是老数组的引用，而 CopyOnWriteArrayList 每次的数据变动，都会产生新的数组，对老数组的值不会产生影响，所以迭代也可以正常进行。</p><h4 id="3-1-6-总结"><a href="#3-1-6-总结" class="headerlink" title="3.1.6-总结"></a>3.1.6-总结</h4><p>当我们需要在线程不安全场景下使用 List 时，建议使用 CopyOnWriteArrayList，CopyOnWriteArrayList 通过锁 + 数组拷贝 + volatile 之间的相互配合，实现了 List 的线程安全，我们抛弃 Java 的这种实现，如果让我们自己实现，你又将如何实现呢？</p><h3 id="3-2-ConcurrentHashMap-源码解析和设计思路"><a href="#3-2-ConcurrentHashMap-源码解析和设计思路" class="headerlink" title="3.2-ConcurrentHashMap 源码解析和设计思路"></a>3.2-ConcurrentHashMap 源码解析和设计思路</h3><p>当我们碰到线程不安全场景下，需要使用 Map 的时候，我们第一个想到的 API 估计就是 ConcurrentHashMap，ConcurrentHashMap 内部封装了锁和各种数据结构来保证访问 Map 是线程安全的，接下来我们一一来看下，和 HashMap 相比，多了哪些数据结构，又是如何保证线程安全的。</p><h4 id="3-2-1-类注释"><a href="#3-2-1-类注释" class="headerlink" title="3.2.1-类注释"></a>3.2.1-类注释</h4><p>我们从类注释上大概可以得到如下信息：</p><ol><li>所有的操作都是线程安全的，我们在使用时，无需再加锁；</li><li>多个线程同时进行 put、remove 等操作时并不会阻塞，可以同时进行，和 HashTable 不同，HashTable 在操作时，会锁住整个 Map；</li><li>迭代过程中，即使 Map 结构被修改，也不会抛 ConcurrentModificationException 异常；</li><li>除了数组 + 链表 + 红黑树的基本结构外，新增了转移节点，是为了保证扩容时的线程安全的节点；</li><li>提供了很多 Stream 流式方法，比如说：forEach、search、reduce 等等。</li></ol><p>从类注释中，我们可以看出 ConcurrentHashMap 和 HashMap 相比，新增了转移节点的数据结构，至于底层如何实现线程安全，转移节点的具体细节，暂且看不出来，接下来我们细看源码。</p><h4 id="3-2-2-结构"><a href="#3-2-2-结构" class="headerlink" title="3.2.2-结构"></a>3.2.2-结构</h4><p>虽然 ConcurrentHashMap 的底层数据结构，和方法的实现细节和 HashMap 大体一致，但两者在类结构上却没有任何关联，我们看下 ConcurrentHashMap 的类图：</p><p>![ConcurrentHashMap 的类图](ConcurrentHashMap 的类图.jpeg)</p><p>看 ConcurrentHashMap 源码，我们会发现很多方法和代码和 HashMap 很相似，有的同学可能会问，为什么不继承 HashMap 呢？继承的确是个好办法，但尴尬的是，ConcurrentHashMap 都是在方法中间进行一些加锁操作，也就是说加锁把方法切割了，继承就很难解决这个问题。</p><p>ConcurrentHashMap 和 HashMap 两者的相同之处：</p><ol><li>数组、链表结构几乎相同，所以底层对数据结构的操作思路是相同的（只是思路相同，底层实现不同）；</li><li>都实现了 Map 接口，继承了 AbstractMap 抽象类，所以大多数的方法也都是相同的，HashMap 有的方法，ConcurrentHashMap 几乎都有，所以当我们需要从 HashMap 切换到 ConcurrentHashMap 时，无需关心两者之间的兼容问题。</li></ol><p>不同之处：</p><ol><li>红黑树结构略有不同，HashMap 的红黑树中的节点叫做 TreeNode，TreeNode 不仅仅有属性，还维护着红黑树的结构，比如说查找，新增等等；ConcurrentHashMap 中红黑树被拆分成两块，TreeNode 仅仅维护的属性和查找功能，新增了 TreeBin，来维护红黑树结构，并负责根节点的加锁和解锁；</li><li>新增 ForwardingNode （转移）节点，扩容的时候会使用到，通过使用该节点，来保证扩容时的线程安全。</li></ol><h4 id="3-2-3-put"><a href="#3-2-3-put" class="headerlink" title="3.2.3-put"></a>3.2.3-put</h4><p>ConcurrentHashMap 在 put 方法上的整体思路和 HashMap 相同，但在线程安全方面写了很多保障的代码，我们先来看下大体思路：</p><ol><li>如果数组为空，初始化，初始化完成之后，走 2；</li><li>计算当前槽点有没有值，没有值的话，cas 创建，失败继续自旋（for 死循环），直到成功，槽点有值的话，走 3；</li><li>如果槽点是转移节点(正在扩容)，就会一直自旋等待扩容完成之后再新增，不是转移节点走 4；</li><li>槽点有值的，先锁定当前槽点，保证其余线程不能操作，如果是链表，新增值到链表的尾部，如果是红黑树，使用红黑树新增的方法新增；</li><li>新增完成之后 check 需不需要扩容，需要的话去扩容。</li></ol><p>具体源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算hash</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//table是空的，进行初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果当前索引位置没有值，直接创建</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//cas 在 i 位置创建新的元素，当 i 位置是空时，即能创建成功，结束for自循，否则继续自旋</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                         <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// no lock when adding to empty bin</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果当前槽点是转移节点，表示该槽点正在扩容，就会一直等待扩容完成</span>        <span class="token comment" spellcheck="true">//转移节点的 hash 值是固定的，都是 MOVED</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//槽点上有值的</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            V oldVal <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//锁定当前槽点，其余线程不能操作，保证了安全</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里再次判断 i 索引位置的数据没有被修改</span>                <span class="token comment" spellcheck="true">//binCount 被赋值的话，说明走到了修改表的过程里面</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//链表</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            K ek<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//值有的话，直接返回</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//把新增的元素赋值到链表的最后，退出自旋</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                          value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//红黑树，这里没有使用 TreeNode,使用的是 TreeBin，TreeNode 只是红黑树的一个节点</span>                    <span class="token comment" spellcheck="true">//TreeBin 持有红黑树的引用，并且会对其加锁，保证其操作的线程安全</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//满足if的话，把老的值给oldVal</span>                        <span class="token comment" spellcheck="true">//在putTreeVal方法里面，在给红黑树重新着色旋转的时候</span>                        <span class="token comment" spellcheck="true">//会锁住红黑树的根节点</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                       value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//binCount不为空，并且 oldVal 有值的情况，说明已经新增成功了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 链表是否需要转化成红黑树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//这一步几乎走不到。槽点已经上锁，只有在红黑树或者链表新增失败的时候</span>                <span class="token comment" spellcheck="true">//才会走到这里，这两者新增都是自旋的，几乎不会失败</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//check 容器是否需要扩容，如果需要去扩容，调用 transfer 方法去扩容</span>    <span class="token comment" spellcheck="true">//如果已经在扩容中了，check有无完成</span>    <span class="token function">addCount</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码中都有非常详细的注释，就不解释了，我们重点说一下，ConcurrentHashMap 在 put 过程中，采用了哪些手段来保证线程安全。</p><h5 id="1-数组初始化时的线程安全"><a href="#1-数组初始化时的线程安全" class="headerlink" title="1.数组初始化时的线程安全"></a>1.数组初始化时的线程安全</h5><p>数组初始化时，首先通过自旋来保证一定可以初始化成功，然后通过 CAS 设置 SIZECTL 变量的值，来保证同一时刻只能有一个线程对数组进行初始化，CAS 成功之后，还会再次判断当前数组是否已经初始化完成，如果已经初始化完成，就不会再次初始化，通过自旋 + CAS + 双重 check 等手段保证了数组初始化时的线程安全，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始化 table，通过对 sizeCtl 的变量赋值来保证数组只能被初始化一次</span><span class="token keyword">private</span> <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过自旋保证初始化成功</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 小于 0 代表有线程正在初始化，释放当前 CPU 的调度权，重新发起锁的竞争</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lost initialization race; just spin</span>        <span class="token comment" spellcheck="true">// CAS 赋值保证当前只有一个线程在初始化，-1 代表当前只有一个线程能初始化</span>        <span class="token comment" spellcheck="true">// 保证了数组的初始化的安全性</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 很有可能执行到这里的时候，table 已经不为空了，这里是双重 check</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 进行初始化</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-新增槽点值时的线程安全"><a href="#2-新增槽点值时的线程安全" class="headerlink" title="2.新增槽点值时的线程安全"></a>2.新增槽点值时的线程安全</h5><p>此时为了保证线程安全，做了四处优化：</p><ol><li>通过自旋死循环保证一定可以新增成功。</li></ol><p>在新增之前，通过 <code>for (Node[] tab = table;;)</code> 这样的死循环来保证新增一定可以成功，一旦新增成功，就可以退出当前死循环，新增失败的话，会重复新增的步骤，直到新增成功为止。</p><ol start="2"><li>当前槽点为空时，通过 CAS 新增。</li></ol><p>Java 这里的写法非常严谨，没有在判断槽点为空的情况下直接赋值，因为在判断槽点为空和赋值的瞬间，很有可能槽点已经被其他线程赋值了，所以我们采用 CAS 算法，能够保证槽点为空的情况下赋值成功，如果恰好槽点已经被其他线程赋值，当前 CAS 操作失败，会再次执行 for 自旋，再走槽点有值的 put 流程，这里就是自旋 + CAS 的结合。</p><ol start="3"><li>当前槽点有值，锁住当前槽点。</li></ol><p>put 时，如果当前槽点有值，就是 key 的 hash 冲突的情况，此时槽点上可能是链表或红黑树，我们通过锁住槽点，来保证同一时刻只会有一个线程能对槽点进行修改，截图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ConcurrentHashMap-hash%E5%86%B2%E7%AA%81.jpeg" alt="ConcurrentHashMap-hash冲突"></p><ol start="4"><li><p>红黑树旋转时，锁住红黑树的根节点，保证同一时刻，当前红黑树只能被一个线程旋转。</p><p>代码截图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ConcurrentHashMap-%E9%94%81%E4%BD%8F%E7%BA%A2%E9%BB%91%E6%A0%91.jpeg" alt="ConcurrentHashMap-锁住红黑树"></p></li></ol><p>通过以上 4 点，保证了在各种情况下的新增（不考虑扩容的情况下），都是线程安全的，通过自旋 + CAS + 锁三大姿势，实现的很巧妙，值得我们借鉴。</p><h5 id="3-扩容时的线程安全"><a href="#3-扩容时的线程安全" class="headerlink" title="3.扩容时的线程安全"></a>3.扩容时的线程安全</h5><p>ConcurrentHashMap 的扩容时机和 HashMap 相同，都是在 put 方法的最后一步检查是否需要扩容，如果需要则进行扩容，但两者扩容的过程完全不同，ConcurrentHashMap 扩容的方法叫做 transfer，从 put 方法的 addCount 方法进去，就能找到 transfer 方法，transfer 方法的主要思路是：</p><ol><li>首先需要把老数组的值全部拷贝到扩容之后的新数组上，先从数组的队尾开始拷贝；</li><li>拷贝数组的槽点时，先把原数组槽点锁住，保证原数组槽点不能操作，成功拷贝到新数组时，把原数组槽点赋值为转移节点；</li><li>这时如果有新数据正好需要 put 到此槽点时，发现槽点为转移节点，就会一直等待，所以在扩容完成之前，该槽点对应的数据是不会发生变化的；</li><li>从数组的尾部拷贝到头部，每拷贝成功一次，就把原数组中的节点设置成转移节点；</li><li>直到所有数组数据都拷贝到新数组时，直接把新数组整个赋值给数组容器，拷贝完成。</li></ol><p>关键源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扩容主要分 2 步，第一新建新的空数组，第二移动拷贝每个元素到新数组中去</span><span class="token comment" spellcheck="true">// tab：原数组，nextTab：新数组</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 老数组的长度</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span>        stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// subdivide range</span>    <span class="token comment" spellcheck="true">// 如果新数组为空，初始化，大小为原数组的两倍，n &lt;&lt; 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// initiating</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// try to cope with OOME</span>            sizeCtl <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>        transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新数组的长度</span>    <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 代表转移节点，如果原数组上是转移节点，说明该节点正在被扩容</span>    ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to ensure sweep before committing nextTab</span>    <span class="token comment" spellcheck="true">// 无限自旋，i 的值会从原数组的最大值开始，慢慢递减到 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 结束循环的标志</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">>=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 已经拷贝完成</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 每次减少 i 的值</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span>                     <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> TRANSFERINDEX<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span>                      nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">></span> stride <span class="token operator">?</span>                                   nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>                i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// if 任意条件满足说明拷贝结束了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">>=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sc<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 拷贝结束，直接赋值，因为每次拷贝完一个节点，都在原数组上放转移节点，所以拷贝完成的节点的数据一定不会再发生变化。</span>            <span class="token comment" spellcheck="true">// 原数组发现是转移节点，是不会操作的，会一直等待转移节点消失之后在进行操作。</span>            <span class="token comment" spellcheck="true">// 也就是说数组节点一旦被标记为转移节点，是不会再发生任何变动的，所以不会有任何线程安全的问题</span>            <span class="token comment" spellcheck="true">// 所以此处直接赋值，没有任何问题。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nextTable <span class="token operator">=</span> null<span class="token punctuation">;</span>                table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>                sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// recheck before commit</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// already processed</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 进行节点的拷贝</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>                                lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            hn <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            ln <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 如果节点只有单个数据，直接拷贝，如果是链表，循环多次组成链表拷贝</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> V pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                                ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 在新数组位置上放置拷贝的值</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 在老数组位置上放上 ForwardingNode 节点</span>                        <span class="token comment" spellcheck="true">// put 时，发现是 ForwardingNode 节点，就不会再动这个节点的数据了</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 红黑树的拷贝</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 红黑树的拷贝工作，同 HashMap 的内容，代码忽略</span>                        …………                        <span class="token comment" spellcheck="true">// 在老数组位置上放上 ForwardingNode 节点</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>扩容中的关键点，就是如何保证是线程安全的，小结有如下几点：</p><ol><li>拷贝槽点时，会把原数组的槽点锁住；</li><li>拷贝成功之后，会把原数组的槽点设置成转移节点，这样如果有数据需要 put 到该节点时，发现该槽点是转移节点，会一直等待，直到扩容成功之后，才能继续 put，可以参考 put 方法中的 helpTransfer 方法；</li><li>从尾到头进行拷贝，拷贝成功就把原数组的槽点设置成转移节点。</li><li>等扩容拷贝都完成之后，直接把新数组的值赋值给数组容器，之前等待 put 的数据才能继续 put。</li></ol><p>扩容方法还是很有意思的，通过在原数组上设置转移节点，put 时碰到转移节点时会等待扩容成功之后才能 put 的策略，来保证了整个扩容过程中肯定是线程安全的，因为数组的槽点一旦被设置成转移节点，在没有扩容完成之前，是无法进行操作的。</p><h4 id="3-2-4-get"><a href="#3-2-4-get" class="headerlink" title="3.2.4-get"></a>3.2.4-get</h4><p>ConcurrentHashMap 读的话，就比较简单，先获取数组的下标，然后通过判断数组下标的 key 是否和我们的 key 相等，相等的话直接返回，如果下标的槽点是链表或红黑树的话，分别调用相应的查找数据的方法，整体思路和 HashMap 很像，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> K ek<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算hashcode</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不是空的数组 &amp;&amp; 并且当前索引的槽点数据不是空的</span>    <span class="token comment" spellcheck="true">//否则该key对应的值不存在，返回null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//槽点第一个值和key相等，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果是红黑树或者转移节点，使用对应的find方法</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果是链表，遍历查找</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5-总结"></a>3.2.5-总结</h4><p>本文摘取 ConcurrentHashMap 两个核心的方法讲解了一下，特别是 put 方法，采取了很多手段来保证了线程安全，是平时面试时的重中之重，大家可以尝试 debug 来调试一下源码，其他方法感兴趣的话，可以尝试去 GitHub 上去查看源码。</p><h3 id="3-3-并发-List、Map源码面试题"><a href="#3-3-并发-List、Map源码面试题" class="headerlink" title="3.3-并发 List、Map源码面试题"></a>3.3-并发 List、Map源码面试题</h3><p>并发 List 和 Map 是技术面时常问的问题，问的问题也都比较深入，有很多问题都是面试官自创的，市面上找不到，所以说通过背题的方式，这一关大部分是过不了的，只有我们真正理解了 API 内部的实现，阅读过源码，才能自如应对各种类型的面试题，接着我们来看一下并发 List、Map 源码相关的面试题集。</p><h4 id="3-3-1-CopyOnWriteArrayList-相关"><a href="#3-3-1-CopyOnWriteArrayList-相关" class="headerlink" title="3.3.1-CopyOnWriteArrayList 相关"></a>3.3.1-CopyOnWriteArrayList 相关</h4><h5 id="1-CopyOnWriteArrayList-和-ArrayList-相比有哪些相同点和不同点？"><a href="#1-CopyOnWriteArrayList-和-ArrayList-相比有哪些相同点和不同点？" class="headerlink" title="1.CopyOnWriteArrayList 和 ArrayList 相比有哪些相同点和不同点？"></a>1.CopyOnWriteArrayList 和 ArrayList 相比有哪些相同点和不同点？</h5><p>答：相同点：底层的数据结构是相同的，都是数组的数据结构，提供出来的 API 都是对数组结构进行操作，让我们更好的使用。</p><p>不同点：后者是线程安全的，在多线程环境下使用，无需加锁，可直接使用。</p><h5 id="2-CopyOnWriteArrayList-通过哪些手段实现了线程安全？"><a href="#2-CopyOnWriteArrayList-通过哪些手段实现了线程安全？" class="headerlink" title="2.CopyOnWriteArrayList 通过哪些手段实现了线程安全？"></a>2.CopyOnWriteArrayList 通过哪些手段实现了线程安全？</h5><p>答：主要有：1. 数组容器被 volatile 关键字修饰，保证了数组内存地址被任意线程修改后，都会通知到其他线程；</p><ol><li>对数组的所有修改操作，都进行了加锁，保证了同一时刻，只能有一个线程对数组进行修改，比如我在 add 时，就无法 remove；</li><li>修改过程中对原数组进行了复制，是在新数组上进行修改的，修改过程中，不会对原数组产生任何影响。</li></ol><p>通过以上三点保证了线程安全。</p><h5 id="3-在-add-方法中，对数组进行加锁后，不是已经是线程安全了么，为什么还需要对老数组进行拷贝？"><a href="#3-在-add-方法中，对数组进行加锁后，不是已经是线程安全了么，为什么还需要对老数组进行拷贝？" class="headerlink" title="3.在 add 方法中，对数组进行加锁后，不是已经是线程安全了么，为什么还需要对老数组进行拷贝？"></a>3.在 add 方法中，对数组进行加锁后，不是已经是线程安全了么，为什么还需要对老数组进行拷贝？</h5><p>答：的确，对数组进行加锁后，能够保证同一时刻，只有一个线程能对数组进行 add，在同单核 CPU 下的多线程环境下肯定没有问题，但我们现在的机器都是多核 CPU，如果我们不通过复制拷贝新建数组，修改原数组容器的内存地址的话，是无法触发 volatile 可见性效果的，那么其他 CPU 下的线程就无法感知数组原来已经被修改了，就会引发多核 CPU 下的线程安全问题。</p><p>假设我们不复制拷贝，而是在原来数组上直接修改值，数组的内存地址就不会变，而数组被 volatile 修饰时，必须当数组的内存地址变更时，才能及时的通知到其他线程，内存地址不变，仅仅是数组元素值发生变化时，是无法把数组元素值发生变动的事实，通知到其它线程的。</p><h5 id="4-对老数组进行拷贝，会有性能损耗，我们平时使用需要注意什么么？"><a href="#4-对老数组进行拷贝，会有性能损耗，我们平时使用需要注意什么么？" class="headerlink" title="4.对老数组进行拷贝，会有性能损耗，我们平时使用需要注意什么么？"></a>4.对老数组进行拷贝，会有性能损耗，我们平时使用需要注意什么么？</h5><p>答：主要有：</p><ol><li>在批量操作时，尽量使用 addAll、removeAll 方法，而不要在循环里面使用 add、remove 方法，主要是因为 for 循环里面使用 add 、remove 的方式，在每次操作时，都会进行一次数组的拷贝(甚至多次)，非常耗性能，而 addAll、removeAll 方法底层做了优化，整个操作只会进行一次数组拷贝，由此可见，当批量操作的数据越多时，批量方法的高性能体现的越明显。</li></ol><h5 id="5-为什么-CopyOnWriteArrayList-迭代过程中，数组结构变动，不会抛出ConcurrentModificationException-了"><a href="#5-为什么-CopyOnWriteArrayList-迭代过程中，数组结构变动，不会抛出ConcurrentModificationException-了" class="headerlink" title="5.为什么 CopyOnWriteArrayList 迭代过程中，数组结构变动，不会抛出ConcurrentModificationException 了"></a>5.为什么 CopyOnWriteArrayList 迭代过程中，数组结构变动，不会抛出ConcurrentModificationException 了</h5><p>答：主要是因为 CopyOnWriteArrayList 每次操作时，都会产生新的数组，而迭代时，持有的仍然是老数组的引用，所以我们说的数组结构变动，是用新数组替换了老数组，老数组的结构并没有发生变化，所以不会抛出异常了。</p><h5 id="6-插入的数据正好在-List-的中间，请问两种-List-分别拷贝数组几次？为什么？"><a href="#6-插入的数据正好在-List-的中间，请问两种-List-分别拷贝数组几次？为什么？" class="headerlink" title="6.插入的数据正好在 List 的中间，请问两种 List 分别拷贝数组几次？为什么？"></a>6.插入的数据正好在 List 的中间，请问两种 List 分别拷贝数组几次？为什么？</h5><p>答：ArrayList 只需拷贝一次，假设插入的位置是 2，只需要把位置 2 （包含 2）后面的数据都往后移动一位即可，所以拷贝一次。</p><p>CopyOnWriteArrayList 拷贝两次，因为 CopyOnWriteArrayList 多了把老数组的数据拷贝到新数组上这一步，可能有的同学会想到这种方式：先把老数组拷贝到新数组，再把 2 后面的数据往后移动一位，这的确是一种拷贝的方式，但 CopyOnWriteArrayList 底层实现更加灵活，而是：把老数组 0 到 2 的数据拷贝到新数组上，预留出新数组 2 的位置，再把老数组 3～ 最后的数据拷贝到新数组上，这种拷贝方式可以减少我们拷贝的数据，虽然是两次拷贝，但拷贝的数据却仍然是老数组的大小，设计的非常巧妙。</p><h4 id="3-3-2-ConcurrentHashMap-相关"><a href="#3-3-2-ConcurrentHashMap-相关" class="headerlink" title="3.3.2-ConcurrentHashMap 相关"></a>3.3.2-ConcurrentHashMap 相关</h4><h5 id="1-ConcurrentHashMap-和-HashMap-的相同点和不同点"><a href="#1-ConcurrentHashMap-和-HashMap-的相同点和不同点" class="headerlink" title="1.ConcurrentHashMap 和 HashMap 的相同点和不同点"></a>1.ConcurrentHashMap 和 HashMap 的相同点和不同点</h5><p>答：</p><p>相同点：</p><ul><li>都是数组 + 链表 +红黑树的数据结构，所以基本操作的思想相同；</li><li>都实现了 Map 接口，继承了 AbstractMap 抽象类，所以两者的方法大多都是相似的，可以互相切换。</li></ul><p>不同点：</p><ul><li>ConcurrentHashMap 是线程安全的，在多线程环境下，无需加锁，可直接使用；</li><li>数据结构上，ConcurrentHashMap 多了转移节点，主要用于保证扩容时的线程安全。</li></ul><h5 id="2-ConcurrentHashMap-通过哪些手段保证了线程安全。"><a href="#2-ConcurrentHashMap-通过哪些手段保证了线程安全。" class="headerlink" title="2.ConcurrentHashMap 通过哪些手段保证了线程安全。"></a>2.ConcurrentHashMap 通过哪些手段保证了线程安全。</h5><p>答：主要有以下几点：</p><ol><li>储存 Map 数据的数组被 volatile 关键字修饰，一旦被修改，立马就能通知其他线程，因为是数组，所以需要改变其内存值，才能真正的发挥出 volatile 的可见特性；</li><li>put 时，如果计算出来的数组下标索引没有值的话，采用无限 for 循环 + CAS 算法，来保证一定可以新增成功，又不会覆盖其他线程 put 进去的值；</li><li>如果 put 的节点正好在扩容，会等待扩容完成之后，再进行 put ，保证了在扩容时，老数组的值不会发生变化；</li><li>对数组的槽点进行操作时，会先锁住槽点，保证只有当前线程才能对槽点上的链表或红黑树进行操作；</li><li>红黑树旋转时，会锁住根节点，保证旋转时的线程安全。</li></ol><h5 id="3-描述一下-CAS-算法在-ConcurrentHashMap-中的应用？"><a href="#3-描述一下-CAS-算法在-ConcurrentHashMap-中的应用？" class="headerlink" title="3.描述一下 CAS 算法在 ConcurrentHashMap 中的应用？"></a>3.描述一下 CAS 算法在 ConcurrentHashMap 中的应用？</h5><p>答：CAS 其实是一种乐观锁，一般有三个值，分别为：赋值对象，原值，新值，在执行的时候，会先判断内存中的值是否和原值相等，相等的话把新值赋值给对象，否则赋值失败，整个过程都是原子性操作，没有线程安全问题。</p><p>ConcurrentHashMap 的 put 方法中，有使用到 CAS ，是结合无限 for 循环一起使用的，步骤如下：</p><ol><li>计算出数组索引下标，拿出下标对应的原值；</li><li>CAS 覆盖当前下标的值，赋值时，如果发现内存值和 1 拿出来的原值相等，执行赋值，退出循环，否则不赋值，转到 3；</li><li>进行下一次 for 循环，重复执行 1，2，直到成功为止。</li></ol><p>可以看到这样做的好处，第一是不会盲目的覆盖原值，第二是一定可以赋值成功。</p><h5 id="4-ConcurrentHashMap-是如何发现当前槽点正在扩容的。"><a href="#4-ConcurrentHashMap-是如何发现当前槽点正在扩容的。" class="headerlink" title="4.ConcurrentHashMap 是如何发现当前槽点正在扩容的。"></a>4.ConcurrentHashMap 是如何发现当前槽点正在扩容的。</h5><p>答：ConcurrentHashMap 新增了一个节点类型，叫做转移节点，当我们发现当前槽点是转移节点时（转移节点的 hash 值是 -1），即表示 Map 正在进行扩容。</p><h5 id="5-发现槽点正在扩容时，put-操作会怎么办？"><a href="#5-发现槽点正在扩容时，put-操作会怎么办？" class="headerlink" title="5.发现槽点正在扩容时，put 操作会怎么办？"></a>5.发现槽点正在扩容时，put 操作会怎么办？</h5><p>答：无限 for 循环，或者走到扩容方法中去，帮助扩容，一直等待扩容完成之后，再执行 put 操作。</p><h5 id="6-两种-Map-扩容时，有啥区别？"><a href="#6-两种-Map-扩容时，有啥区别？" class="headerlink" title="6.两种 Map 扩容时，有啥区别？"></a>6.两种 Map 扩容时，有啥区别？</h5><p>答：区别很大，HashMap 是直接在老数据上面进行扩容，多线程环境下，会有线程安全的问题，而 ConcurrentHashMap 就不太一样，扩容过程是这样的：</p><ol><li>从数组的队尾开始拷贝；</li><li>拷贝数组的槽点时，先把原数组槽点锁住，拷贝成功到新数组时，把原数组槽点赋值为转移节点；</li><li>从数组的尾部拷贝到头部，每拷贝成功一次，就把原数组的槽点设置成转移节点；</li><li>直到所有数组数据都拷贝到新数组时，直接把新数组整个赋值给数组容器，拷贝完成。</li></ol><p>简单来说，通过扩容时给槽点加锁，和发现槽点正在扩容就等待的策略，保证了 ConcurrentHashMap 可以慢慢一个一个槽点的转移，保证了扩容时的线程安全，转移节点比较重要，平时问的人也比较多。</p><h5 id="7-ConcurrentHashMap-在-Java-7-和-8-中关于线程安全的做法有啥不同？"><a href="#7-ConcurrentHashMap-在-Java-7-和-8-中关于线程安全的做法有啥不同？" class="headerlink" title="7.ConcurrentHashMap 在 Java 7 和 8 中关于线程安全的做法有啥不同？"></a>7.ConcurrentHashMap 在 Java 7 和 8 中关于线程安全的做法有啥不同？</h5><p>答：非常不一样，拿 put 方法为例，Java 7 的做法是：</p><ol><li>把数组进行分段，找到当前 key 对应的是那一段；</li><li>将当前段锁住，然后再根据 hash 寻找对应的值，进行赋值操作。</li></ol><p>Java 7 的做法比较简单，缺点也很明显，就是当我们需要 put 数据时，我们会锁住改该数据对应的某一段，这一段数据可能会有很多，比如我只想 put 一个值，锁住的却是一段数据，导致这一段的其他数据都不能进行写入操作，大大的降低了并发性的效率。Java 8 解决了这个问题，从锁住某一段，修改成锁住某一个槽点，提高了并发效率。</p><p>不仅仅是 put，删除也是，仅仅是锁住当前槽点，缩小了锁的范围，增大了效率。</p><h4 id="3-3-3-总结"><a href="#3-3-3-总结" class="headerlink" title="3.3.3-总结"></a>3.3.3-总结</h4><p>因为目前大多数公司都已经在使用 Java 8 了，所以大部分面试内容还是以 Java 8 的 API 为主，特别是 CopyOnWriteArrayList 和 ConcurrentHashMap 两个 API，文章毕竟篇幅有限，建议大家多多阅读剩余源码。</p><h3 id="3-4-场景集合：并发-List、Map的应用场景"><a href="#3-4-场景集合：并发-List、Map的应用场景" class="headerlink" title="3.4-场景集合：并发 List、Map的应用场景"></a>3.4-场景集合：并发 List、Map的应用场景</h3><p>并发 List、Map 使用最多的就是 CopyOnWriteArrayList 和 ConcurrentHashMap，在考虑 API 时，我们也无需迟疑，这两个并发类在安全和性能方面都很好，我们都可以直接使用。</p><p>并发的场景很多，但归根结底其实就是共享变量被多个线程同时访问，也就是说 CopyOnWriteArrayList 或 ConcurrentHashMap 会被作为共享变量，本节我们会以流程引擎为案例，现身说法，增加一下大家的工作经验积累。</p><p>流程引擎在实际工作中经常被使用，其主要功能就是对我们需要完成的事情，进行编排和组装，比如在淘宝下单流程中，我们一共会执行 20 个 Spring Bean，流程引擎就可以帮助我们调起 20 个 Spring Bean，并帮助我们去执行，本文介绍的重点在于如何使用 Map + List 来设计流程引擎的数据结构，以及其中需要注意到的线程安全的问题。</p><h4 id="3-4-1-嵌套-Map，简单流程引擎"><a href="#3-4-1-嵌套-Map，简单流程引擎" class="headerlink" title="3.4.1-嵌套 Map，简单流程引擎"></a>3.4.1-嵌套 Map，简单流程引擎</h4><p>市面上有很多流程引擎，比如说 Activiti、Flowable、Camunda 等等，功能非常齐全，但我们本小节只实现一种最最简单的流程引擎，只要能对我们需要完成的事情进行编排，并能依次的调用就行。</p><h5 id="1-流程引擎设计思路"><a href="#1-流程引擎设计思路" class="headerlink" title="1.流程引擎设计思路"></a>1.流程引擎设计思路</h5><p>我们认为每个流程都会做 4 个阶段的事情，阶段主要是指在整个流程中，大概可以分为几个大的步骤，每个阶段可以等同为大的步骤，分别如下：</p><ol><li>参数校验，主要是对流程的入参数进行校验；</li><li>业务校验，主要是对当前流程中的业务进行逻辑校验；</li><li>事务中落库，主要把数据落库，控制事务；</li><li>事务后事件，我们在数据落库，事务提交之后，可能会做一些其他事情，比如说发消息出来等等。</li></ol><p>以上每个大的阶段，都会做一些粒度较细的事情，比如说业务校验，我们可能会对两个业务对象进行校验，那么此时业务校验阶段就会做两件事情，每件具体的事情，我们叫做领域行为，在实际项目中，一个领域行为一般都是一个 Spring Bean。</p><p>综上所述，流程引擎嵌套数据结构就是：流程 -&gt; 阶段 -&gt; 领域行为，前者对应后者，都是一对一或者一对多的关系。</p><p>我们以在淘宝上买东西时，下单为例，下单指的是我们在淘宝选择好了商品和优惠券后，点击购买按钮时触发的动作。</p><p>为了方便举例，我们假设在淘宝上买电视和电影票，在后端，会分别对应着两个下单流程，我们画图示意一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%B7%98%E5%AE%9D%E4%B8%8B%E5%8D%95%E6%B5%81%E7%A8%8B.jpeg" alt="淘宝下单流程"></p><p>上图中，左右两个黑色长方形大框代表着两个流程，流程下面有多个阶段，阶段用蓝色表示，每个阶段下面有多个领域行为，用红色表示。</p><p>可以看到两个流程中，都包含有四个阶段，阶段都是相同的，但每个阶段中的领域行为，有的相同，有的却是特有的。</p><p>三个概念，每个概念层层嵌套，整体组装起来，用来表示一个流程，那么这个数据结构，我们应该如何表示呢？</p><p>使用 Map + List 即可！</p><h5 id="2-数据结构的定义"><a href="#2-数据结构的定义" class="headerlink" title="2.数据结构的定义"></a>2.数据结构的定义</h5><p>流程的数据结构定义分成两步：</p><ol><li>定义出阶段、领域行为基础概念；</li><li>把阶段、领域行为、流程概念组合起来，定义出流程的数据结构。</li></ol><p>首先给阶段定义一个枚举，如下 StageEnum 代表流程中的阶段或步骤：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> StageEnum <span class="token punctuation">{</span>  <span class="token function">PARAM_VALID</span><span class="token punctuation">(</span><span class="token string">"PARAM_VALID"</span><span class="token punctuation">,</span> <span class="token string">"参数校验"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">BUSINESS_VALID</span><span class="token punctuation">(</span><span class="token string">"BUSINESS_VALID"</span><span class="token punctuation">,</span> <span class="token string">"业务校验"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">IN_TRANSACTION</span><span class="token punctuation">(</span><span class="token string">"IN_TRANSACTION"</span><span class="token punctuation">,</span> <span class="token string">"事务中落库"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">AFTER_TRANSACTION</span><span class="token punctuation">(</span><span class="token string">"AFTER_TRANSACTION"</span><span class="token punctuation">,</span> <span class="token string">"事务后事件"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">;</span>  <span class="token keyword">private</span> String code<span class="token punctuation">;</span>  <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>  <span class="token function">StageEnum</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>领域行为我们无需定义，目前通用的技术框架都是 Spring Boot，领域行为都是 Spring Bean，为了简单起见，我们给领域行为定义了一个接口，每个领域行为都要实现这个接口，方便我们编排，接口如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 领域行为 * author  wenhe * date 2019/8/11 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DomainAbilityBean</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 领域行为的方法入口   */</span>  FlowContent <span class="token function">invoke</span><span class="token punctuation">(</span>FlowContent content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着我们使用 Map + List 来定义流程，定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 第一个 key 是流程的名字 * 第二个 map 的 key 是阶段，为 StageEnum 枚举，值为多个领域行为的集合 */</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>StageEnum<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">>>></span> flowMap</code></pre><p>至此，我们定义出了，简单流程引擎的数据结构，流程引擎看着很复杂，利用 Map + List 的组合，就巧妙的定义好了。</p><h4 id="3-4-2-容器初始化时，本地缓存使用"><a href="#3-4-2-容器初始化时，本地缓存使用" class="headerlink" title="3.4.2-容器初始化时，本地缓存使用"></a>3.4.2-容器初始化时，本地缓存使用</h4><p>我们定义好 Map 后，我们就需要去使用他，我们使用的大体步骤为：</p><ol><li>项目启动时，把所有的流程信息初始化到 flowMap(刚刚定义的流程的数据结构叫做 flowMap) 中去，可能是从数据库中加载，也可能是从 xml 文件中加载；</li><li>查找流程时，直接从 flowMap 中获取即可。</li></ol><h5 id="1-初始化-2"><a href="#1-初始化-2" class="headerlink" title="1.初始化"></a>1.初始化</h5><p>以上两步最为关键的点就是 flowMap 必须是可以随时访问到的，所有我们会把 flowMap 作为共享变量使用，也就是会被 static final 关键字所修饰，我们首先来 mock 一下把所有信息初始化到 flowMap 中去的代码，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCenter</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * flowMap 是共享变量，方便访问，并且是 ConcurrentHashMap   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>StageEnum<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">>>></span> flowMap      <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newConcurrentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * PostConstruct 注解的意思就是   * 在容器启动成功之后，执行 init 方法，初始化 flowMap   */</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始化 flowMap，可能是从数据库，或者 xml 文件中加载 map</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上代码，关键地方在于三点：</p><ol><li>flowMap 被 static final 修饰，是个共享变量，方便访问；</li><li>flowMap 是 ConcurrentHashMap，所以我们所有的操作都无需加锁，比如我们在 init 方法中，对 flowMap 进行初始化，就无需加锁，因为 ConcurrentHashMap 本身已经保证了线程安全；</li><li>这里我们初始化的时机是在容器启动的时候，在实际的工作中，我们经常在容器启动的时候，把不会经常发生变动的数据，放到类似 List、Map 这样的共享变量中，这样当我们频繁要使用的时候，直接从内存中读取即可。</li></ol><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><p>那我们实际使用的时候，只需要告诉 flowMap 当前是那个流程的那个阶段，就可以返回该流程该阶段下面的所有领域行为了，我们写了一个流程引擎使用的工具类入口，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 流程引擎对外的 API</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowStart</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 流程引擎开始   *   * @param flowName 流程的名字   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeParamValid</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeBusinessValid</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeInTramsactionValid</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invokeAfterTramsactionValid</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 执行参数校验</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeParamValid</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">stageInvoke</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> StageEnum<span class="token punctuation">.</span>PARAM_VALID<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 执行业务校验</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeBusinessValid</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">stageInvoke</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> StageEnum<span class="token punctuation">.</span>BUSINESS_VALID<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 执行事务中</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeInTramsactionValid</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">stageInvoke</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> StageEnum<span class="token punctuation">.</span>IN_TRANSACTION<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 执行事务后</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAfterTramsactionValid</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">stageInvoke</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> StageEnum<span class="token punctuation">.</span>AFTER_TRANSACTION<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 批量执行 Spring Bean</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stageInvoke</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> StageEnum stage<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">></span>        domainAbilitys <span class="token operator">=</span>        FlowCenter<span class="token punctuation">.</span>flowMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>domainAbilitys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"找不到该流程对应的领域行为"</span> <span class="token operator">+</span> flowName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>DomainAbilityBean domainAbility <span class="token operator">:</span> domainAbilitys<span class="token punctuation">)</span> <span class="token punctuation">{</span>      domainAbility<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从代码中可以看到，我们在流程引擎的入口，只要根据参数校验、业务校验、事务中、事务后四个阶段，从 flowMap 中得到领域行为的集合，然后对领域行为进行顺序执行即可。</p><p>我们在使用时，直接使用上述类的 start 方法即可。</p><p>当然以上演示的流程引擎只是一个大的框架，还有很多地方需要改进的地方，比如如何找到 flowName，如何初始化 flowMap，但这些都不是本节重点，本节主要想通过流程引擎案例来说明几点：</p><ol><li>把 List 和 Map 作为共享变量非常常见，就像咱们这种项目启动时，从数据库中把数据捞出来，然后封装成 List 或 Map 的结构，这样做的优点就是节约资源，不用每次用的时候都去查数据库，直接从内存中获取即可；</li><li>并发场景下，我们可以放心的使用 CopyOnWriteArrayList 和 ConcurrentHashMap 两个并发类，首先用 static final 对两者进行修饰，使其成为共享变量，接着在写入或者查询的时候，无需加锁，两个 API 内部已经实现了加锁的功能了；</li><li>有一点需要澄清一下，就是 CopyOnWriteArrayList 和 ConcurrentHashMap 只能作为单机的共享变量，如果是分布式系统，多台机器的情况下，这样做不行了，需要使用分布式缓存了。</li></ol><h4 id="3-4-3-总结"><a href="#3-4-3-总结" class="headerlink" title="3.4.3-总结"></a>3.4.3-总结</h4><p>本节内容，以流程引擎为例，说明了如何使用 Map + List 的嵌套结构设计流程引擎，以及在并发情况下，如何安全的使用 List 和 Map。</p><p>本案列是高并发项目的真实案例，感兴趣的同学可以在此流程引擎框架基础上进行细节补充，实现可运行的流程引擎。</p><h2 id="4-队列"><a href="#4-队列" class="headerlink" title="4-队列"></a>4-队列</h2><h3 id="4-1-LinkedBlockingQueue-源码解析"><a href="#4-1-LinkedBlockingQueue-源码解析" class="headerlink" title="4.1-LinkedBlockingQueue 源码解析"></a>4.1-LinkedBlockingQueue 源码解析</h3><p>说到队列，大家的反应可能是我从来都没有用过，应该是不重要的 API 吧。如果这么想，那就大错特错了，我们平时使用到的线程池、读写锁、消息队列等等技术和框架，底层原理都是队列，所以我们万万不可轻视队列，队列是很多高级 API 的基础，学好队列，对自己深入 Java 学习非常重要。</p><p>本文主要以 LinkedBlockingQueue 队列为例，详细描述一下底层具体的实现。</p><h4 id="4-1-1-整体架构"><a href="#4-1-1-整体架构" class="headerlink" title="4.1.1-整体架构"></a>4.1.1-整体架构</h4><p>LinkedBlockingQueue 中文叫做链表阻塞队列，这个命名很好，从命名上就知道其底层数据结构是链表，并且队列是可阻塞的。接下来，我们就从整体结构上看看 LinkedBlockingQueue。</p><h5 id="1-类图"><a href="#1-类图" class="headerlink" title="1.类图"></a>1.类图</h5><p>首先我们来看下 LinkedBlockingQueue 类图，如下：</p><p>![LinkedBlockingQueue 类图](LinkedBlockingQueue 类图.jpeg)</p><p>从类图中，我们大概可以看出两条路径：</p><ol><li>AbstractQueue -&gt; AbstractCollection -&gt; Collection -&gt;Iterable 这条路径依赖，主要是想复用 Collection 和 迭代器的一些操作，这些我们在说集合的时候，都知道这些类是干什么，能干什么，就不细说了；</li><li>BlockingQueue -&gt; Queue -&gt; Collection，BlockingQueue 和 Queue 是新出来的两个接口，我们重点说一下。</li></ol><p>Queue 是最基础的接口，几乎所有的队列实现类都会实现这个接口，该接口定义出了队列的三大类操作：</p><p>新增操作：</p><ol><li>add 队列满的时候抛出异常；</li><li>offer 队列满的时候返回 false。</li></ol><p>查看并删除操作：</p><ol><li>remove 队列空的时候抛异常；</li><li>poll 队列空的时候返回 null。</li></ol><p>只查看不删除操作：</p><ol><li>element 队列空的时候抛异常；</li><li>peek 队列空的时候返回 null。</li></ol><p>一共 6 种方法，除了以上分类方法，也可以分成两类：</p><ol><li>遇到队列满或空的时候，抛异常，如 add、remove、element；</li><li>遇到队列满或空的时候，返回特殊值，如 offer、poll、peek。</li></ol><p>实际上，这些都比较难记忆。每次需要使用的时候，我都会看会源码，才能想起这个方法是抛异常还是返回特殊值。</p><p>BlockingQueue 在 Queue 的基础上加上了阻塞的概念，比如一直阻塞，还是阻塞一段时间。为了方便记忆，我们画一个表格，如下：</p><table><thead><tr><th align="left"></th><th align="left">抛异常</th><th align="left">特殊值</th><th align="left">一直阻塞</th><th align="left">阻塞一段时间</th></tr></thead><tbody><tr><td align="left">新增操作–队列满</td><td align="left">add</td><td align="left">offer 返回 false</td><td align="left">put</td><td align="left">offer 过超时时间返回 false</td></tr><tr><td align="left">查看并删除操作–队列空</td><td align="left">remove</td><td align="left">poll 返回 null</td><td align="left">take</td><td align="left">poll 过超时时间返回 null</td></tr><tr><td align="left">只查看不删除操作–队列空</td><td align="left">element</td><td align="left">peek 返回 null</td><td align="left">暂无</td><td align="left">暂无</td></tr></tbody></table><p>PS: remove 方法，BlockingQueue 类注释中定义的是抛异常，但 LinkedBlockingQueue 中 remove 方法实际是返回 false。<br>从表格中可以看到，在新增和查看并删除两大类操作上，BlockingQueue 增加了阻塞的功能，而且可以选择一直阻塞，或者阻塞一段时间后，返回特殊值。</p><h5 id="2-类注释"><a href="#2-类注释" class="headerlink" title="2.类注释"></a>2.类注释</h5><p>我们看看从 LinkedBlockingQueue 的类注释中能得到那些信息：</p><ol><li>基于链表的阻塞队列，其底层的数据结构是链表；</li><li>链表维护先入先出队列，新元素被放在队尾，获取元素从队头部拿；</li><li>链表大小在初始化的时候可以设置，默认是 Integer 的最大值；</li><li>可以使用 Collection 和 Iterator 两个接口的所有操作，因为实现了两者的接口。</li></ol><h5 id="3-内部构成"><a href="#3-内部构成" class="headerlink" title="3.内部构成"></a>3.内部构成</h5><p>LinkedBlockingQueue 内部构成简单来说，分成三个部分：链表存储 + 锁 + 迭代器，我们来看下源码。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链表结构 begin</span><span class="token comment" spellcheck="true">//链表的元素</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前元素的下一个，为空表示当前节点是最后一个</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//链表的容量，默认 Integer.MAX_VALUE</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链表已有元素大小，使用 AtomicInteger，所以是线程安全的</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链表头</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链表尾</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表结构 end</span><span class="token comment" spellcheck="true">// 锁 begin</span><span class="token comment" spellcheck="true">//take 时的锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// take 的条件队列，condition 可以简单理解为基于 ASQ 同步机制建立的条件队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// put 时的锁，设计两把锁的目的，主要为了 take 和 put 可以同时进行</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// put 的条件队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 锁 end</span><span class="token comment" spellcheck="true">// 迭代器 </span><span class="token comment" spellcheck="true">// 实现了自己的迭代器</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>………………<span class="token punctuation">}</span></code></pre><p>从代码上来看，结构是非常清晰的，三种结构各司其职：</p><ol><li>链表的作用是为了保存当前节点，节点中的数据可以是任意东西，是一个泛型，比如说队列被应用到线程池时，节点就是线程，比如队列被应用到消息队列中，节点就是消息，节点的含义主要看队列被使用的场景；</li><li>锁有 take 锁和 put 锁，是为了保证队列操作时的线程安全，设计两种锁，是为了 take 和 put 两种操作可以同时进行，互不影响。</li></ol><h5 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h5><p>初始化有三种方式：</p><ol><li>指定链表容量大小；</li><li>不指定链表容量大小，默认是 Integer 的最大值；</li><li>对已有集合数据进行初始化。</li></ol><p>源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 不指定容量，默认 Integer 的最大值</span><span class="token keyword">public</span> <span class="token function">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定链表容量大小，链表头尾相等，节点值（item）都是 null</span><span class="token keyword">public</span> <span class="token function">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    last <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 已有集合数据进行初始化</span><span class="token keyword">public</span> <span class="token function">LinkedBlockingQueue</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>    putLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Never contended, but necessary for visibility</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 集合内的元素不能为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// capacity 代表链表的大小，在这里是 Integer 的最大值</span>            <span class="token comment" spellcheck="true">// 如果集合类的大小大于 Integer 的最大值，就会报错</span>            <span class="token comment" spellcheck="true">// 其实这个判断完全可以放在 for 循环外面，这样可以减少 Integer 的最大值次循环(最坏情况)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> capacity<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Queue full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于初始化源码，我们说明两点：</p><ol><li>初始化时，容量大小是不会影响性能的，只影响在后面的使用，因为初始化队列太小，容易导致没有放多少就会报队列已满的错误；</li><li>在对给定集合数据进行初始化时，源码给了一个不优雅的示范，我们不反对在每次 for 循环的时候，都去检查当前链表的大小是否超过容量，但我们希望在 for 循环开始之前就做一步这样的工作。举个列子，给定集合大小是 1 w，链表大小是 9k，按照现在代码实现，只能在 for 循环 9k 次时才能发现，原来给定集合的大小已经大于链表大小了，导致 9k 次循环都是在浪费资源，还不如在 for 循环之前就 check 一次，如果 1w &gt; 9k，直接报错即可。</li></ol><h4 id="4-1-2-阻塞新增"><a href="#4-1-2-阻塞新增" class="headerlink" title="4.1.2-阻塞新增"></a>4.1.2-阻塞新增</h4><p>新增有多种方法，如：add、put、offer，三者的区别上文有说。我们拿 put 方法为例，put 方法在碰到队列满的时候，会一直阻塞下去，直到队列不满时，并且自己被唤醒时，才会继续去执行，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 把e新增到队列的尾部。</span><span class="token comment" spellcheck="true">// 如果有可以新增的空间的话，直接新增成功，否则当前线程陷入等待</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// e 为空，抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 预先设置 c 为 -1，约定负数为新增失败</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>    <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置可中断锁</span>    putLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 队列满了</span>        <span class="token comment" spellcheck="true">// 当前线程阻塞，等待其他线程的唤醒(其他线程 take 成功后就会唤醒此处被阻塞的线程)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// await 无限等待</span>            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 队列没有满，直接新增到队列的尾部</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新增计数赋值,注意这里 getAndIncrement 返回的是旧值</span>        <span class="token comment" spellcheck="true">// 这里的 c 是比真实的 count 小 1 的</span>        c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果链表现在的大小 小于链表的容量，说明队列未满</span>        <span class="token comment" spellcheck="true">// 可以尝试唤醒一个 put 的等待线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span>            notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放锁</span>        putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// c==0，代表队列里面有一个元素</span>    <span class="token comment" spellcheck="true">// 会尝试唤醒一个take的等待线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 入队，把新元素放到队尾</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    last <span class="token operator">=</span> last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中我们可以总结以下几点：</p><ol><li>往队列新增数据，第一步是上锁，所以新增数据是线程安全的；</li><li>队列新增数据，简单的追加到链表的尾部即可；</li><li>新增时，如果队列满了，当前线程是会被阻塞的，阻塞的底层使用是锁的能力，底层实现其它也和队列相关，原理我们在锁章节会说到；</li><li>新增数据成功后，在适当时机，会唤起 put 的等待线程（队列不满时），或者 take 的等待线程（队列不为空时），这样保证队列一旦满足 put 或者 take 条件时，立马就能唤起阻塞线程，继续运行，保证了唤起的时机不被浪费。</li></ol><p>以上就是 put 方法的原理，至于 offer 方法阻塞超过一端时间后，仍未成功，就会直接返回默认值的实现，和 put 方法相比只修改了几行代码，如下截图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/LinkedBlockingQueue-put%E5%92%8Coffer.jpeg" alt="LinkedBlockingQueue-put和offer"></p><h4 id="4-1-3-阻塞删除"><a href="#4-1-3-阻塞删除" class="headerlink" title="4.1.3-阻塞删除"></a>4.1.3-阻塞删除</h4><p>删除的方法也很多，我们主要看两个关键问题：</p><ol><li>删除的原理是怎样的；</li><li>查看并删除和只查看不删除两种的区别是如何实现的。</li></ol><p>首先我们来看第一个问题，我们以 take 方法为例，说明一下查看并删除的底层源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 阻塞拿数据</span><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    E x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认负数，代表失败</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// count 代表当前链表数据的真实大小</span>    <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>    takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 空队列时，阻塞，等待其他线程唤醒</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 非空队列，从队列的头部拿一个出来</span>        x <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 减一计算，注意 getAndDecrement 返回的值是旧值</span>        <span class="token comment" spellcheck="true">// c 比真实的 count 大1</span>        c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果队列里面有值，从 take 的等待线程里面唤醒一个。</span>        <span class="token comment" spellcheck="true">// 意思是队列里面有值啦,唤醒之前被阻塞的线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放锁</span>        takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果队列空闲还剩下一个，尝试从 put 的等待线程中唤醒一个</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>        <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 队头中取数据</span><span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    h<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>    head <span class="token operator">=</span> first<span class="token punctuation">;</span>    E x <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    first<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 头节点指向 null，删除</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>整体流程和 put 很相似，都是先上锁，然后从队列的头部拿出数据，如果队列为空，会一直阻塞到队列有值为止。</p><p>而查看不删除元素更加简单，直接把队列头的数据拿出来即可，我们以 peek 为例，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查看并不删除元素，如果队列为空，返回 null</span><span class="token keyword">public</span> E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// count 代表队列实际大小，队列为空，直接返回 null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>    takeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拿到队列头</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断队列头是否为空，并返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，查看并删除，和查看不删除两者从队头拿数据的逻辑不太一致，从而导致一个会删除，一个不会删除队头数据。</p><h4 id="4-1-4-总结"><a href="#4-1-4-总结" class="headerlink" title="4.1.4-总结"></a>4.1.4-总结</h4><p>本文通过 LinkedBlockingQueue 的源码，来介绍了下链表队列，当队列满和空的场景下，新增和删除数据时，队列有啥变化。</p><p>队列本身就是一个阻塞工具，我们可以把这个工具应用到各种阻塞场景中，比如说队列应用到线程池，当线程池跑满时，我们把新的请求都放到阻塞队列中等待；队列应用到消息队列，当消费者处理能力有限时，我们可以把消息放到队列中等待，让消费者慢慢消费；每应用到一个新的场景中，都是一个新的技术工具，所以学好队列，用处很大。</p><h3 id="4-2-SynchronousQueue-源码解析"><a href="#4-2-SynchronousQueue-源码解析" class="headerlink" title="4.2-SynchronousQueue 源码解析"></a>4.2-SynchronousQueue 源码解析</h3><p>SynchronousQueue 是比较独特的队列，其本身是没有容量大小，比如我放一个数据到队列中，我是不能够立马返回的，我必须等待别人把我放进去的数据消费掉了，才能够返回。SynchronousQueue 在消息队列技术中间件中被大量使用，本文就来从底层实现来看下 SynchronousQueue 到底是如何做到的。</p><h4 id="4-2-1-整体架构"><a href="#4-2-1-整体架构" class="headerlink" title="4.2.1-整体架构"></a>4.2.1-整体架构</h4><p>SynchronousQueue 的整体设计比较抽象，在内部抽象出了两种算法实现，一种是先入先出的队列，一种是后入先出的堆栈，两种算法被两个内部类实现，而直接对外的 put，take 方法的实现就非常简单，都是直接调用两个内部类的 transfer 方法进行实现，整体的调用关系如下图所示：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/SynchronousQueue-put%E5%92%8Ctake.jpeg" alt="SynchronousQueue-put和take"></p><h5 id="1-类注释-3"><a href="#1-类注释-3" class="headerlink" title="1.类注释"></a>1.类注释</h5><p>源码的类注释往往能给我带来很多疑问和有用的信息，我们来看下类注释都说了什么：</p><ol><li>队列不存储数据，所以没有大小，也无法迭代；</li><li>插入操作的返回必须等待另一个线程完成对应数据的删除操作，反之亦然；</li><li>队列由两种数据结构组成，分别是后入先出的堆栈和先入先出的队列，堆栈是非公平的，队列是公平的。</li></ol><p>看到类注释，大家是不是有一些疑问，比如第二点是如何做到的？堆栈又是如何实现的呢？接下来我们一点一点揭晓。</p><h5 id="2-类图"><a href="#2-类图" class="headerlink" title="2.类图"></a>2.类图</h5><p>SynchronousQueue 整体类图和 LinkedBlockingQueue 相似，都是实现了 BlockingQueue 接口，但因为其不储存数据结构，有一些方法是没有实现的，比如说 isEmpty、size、contains、remove 和迭代等方法，这些方法都是默认实现，如下截图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/SynchronousQueue%E7%9A%84%E6%96%B9%E6%B3%95.jpeg" alt="SynchronousQueue的方法"></p><h5 id="3-结构细节"><a href="#3-结构细节" class="headerlink" title="3.结构细节"></a>3.结构细节</h5><p>SynchronousQueue 底层结构和其它队列完全不同，有着独特的两种数据结构：队列和堆栈，我们一起来看下数据结构：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 堆栈和队列共同的接口</span>    <span class="token comment" spellcheck="true">// 负责执行 put or take</span>    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Transferer</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// e 为空的，会直接返回特殊值，不为空会传递给消费者</span>        <span class="token comment" spellcheck="true">// timed 为 true，说明会有超时时间</span>        <span class="token keyword">abstract</span> E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆栈 后入先出 非公平</span>    <span class="token comment" spellcheck="true">// Scherer-Scott 算法</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TransferStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Transferer</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 队列 先入先出 公平</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TransferQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Transferer</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Transferer<span class="token operator">&lt;</span>E<span class="token operator">></span> transferer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无参构造器默认为非公平的</span>    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transferer <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TransferQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TransferStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>从源码中我们可以得到几点：</p><ol><li>堆栈和队列都有一个共同的接口，叫做 Transferer，该接口有个方法：transfer，该方法很神奇，会承担 take 和 put 的双重功能；</li><li>在我们初始化的时候，是可以选择是使用堆栈还是队列的，如果你不选择，默认的就是堆栈，类注释中也说明了这一点，堆栈的效率比队列更高。</li></ol><p>接下来我们来看下堆栈和队列的具体实现。</p><h4 id="4-2-2-非公平的堆栈"><a href="#4-2-2-非公平的堆栈" class="headerlink" title="4.2.2-非公平的堆栈"></a>4.2.2-非公平的堆栈</h4><h5 id="1-堆栈的结构"><a href="#1-堆栈的结构" class="headerlink" title="1.堆栈的结构"></a>1.堆栈的结构</h5><p>首先我们来介绍下堆栈的整体结构，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E5%A0%86%E6%A0%88%E7%9A%84%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.jpeg" alt="堆栈的整体结构"></p><p>从上图中我们可以看到，我们有一个大的堆栈池，池的开口叫做堆栈头，put 的时候，就往堆栈池中放数据。take 的时候，就从堆栈池中拿数据，两者操作都是在堆栈头上操作数据，从图中可以看到，越靠近堆栈头，数据越新，所以每次 take 的时候，都会拿到堆栈头的最新数据，这就是我们说的后入先出，也就是非公平的。</p><p>图中 SNode 就是源码中栈元素的表示，我们看下源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SNode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 栈的下一个，就是被当前栈压在下面的栈元素</span>    <span class="token keyword">volatile</span> SNode next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 节点匹配，用来判断阻塞栈元素能被唤醒的时机</span>    <span class="token comment" spellcheck="true">// 比如我们先执行 take，此时队列中没有数据，take 被阻塞了，栈元素为 SNode1</span>    <span class="token comment" spellcheck="true">// 当有 put 操作时，会把当前 put 的栈元素赋值给 SNode1 的 match 属性，并唤醒 take 操作</span>    <span class="token comment" spellcheck="true">// 当 take 被唤醒，发现 SNode1 的 match 属性有值时，就能拿到 put 进来的数据，从而返回</span>    <span class="token keyword">volatile</span> SNode match<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 栈元素的阻塞是通过线程阻塞来实现的，waiter 为阻塞的线程</span>    <span class="token keyword">volatile</span> Thread waiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 未投递的消息，或者未消费的消息</span>    Object item<span class="token punctuation">;</span>             <span class="token punctuation">}</span> </code></pre><h5 id="2-入栈和出栈"><a href="#2-入栈和出栈" class="headerlink" title="2.入栈和出栈"></a>2.入栈和出栈</h5><p>入栈指的是使用 put 等方法，把数据放到堆栈池中，出栈指的使用 take 等方法，把数据从堆栈池中拿出来，操作的对象都是堆栈头，虽然两者的一个是从堆栈头拿数据，一个是放数据，但底层实现的方法却是同一个，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// transfer 方法思路比较复杂，因为 take 和 put 两个方法都揉在了一起</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SNode s <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// constructed/reused as needed</span>    <span class="token comment" spellcheck="true">// e 为空，说明是 take 方法，不为空是 put 方法</span>    <span class="token keyword">int</span> mode <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> REQUEST <span class="token operator">:</span> DATA<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自旋</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拿出头节点，有几种情况</span>        <span class="token comment" spellcheck="true">// 1：头节点为空，说明队列中还没有数据</span>        <span class="token comment" spellcheck="true">// 2：头节点不为空，并且是 take 类型的，说明头节点线程正等着拿数据。</span>        <span class="token comment" spellcheck="true">// 3：头节点不为空，并且是 put 类型的，说明头节点线程正等着放数据。</span>        SNode h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 栈头为空，说明队列中还没有数据。</span>        <span class="token comment" spellcheck="true">// 栈头不为空，并且栈头的类型和本次操作一致，比如都是 put，那么就把</span>        <span class="token comment" spellcheck="true">// 本次 put 操作放到该栈头的前面即可，让本次 put 能够先执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>mode <span class="token operator">==</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// empty or same-mode</span>            <span class="token comment" spellcheck="true">// 设置了超时时间，并且 e 进栈或者出栈要超时了，</span>            <span class="token comment" spellcheck="true">// 就会丢弃本次操作，返回 null 值。</span>            <span class="token comment" spellcheck="true">// 如果栈头此时被取消了，丢弃栈头，取下一个节点继续消费</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// can't wait</span>                <span class="token comment" spellcheck="true">// 栈头操作被取消</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 丢弃栈头，把栈头后一个元素作为栈头</span>                    <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// pop cancelled node</span>                <span class="token comment" spellcheck="true">//栈头是空的，直接返回 null</span>                <span class="token keyword">else</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 没有超时，直接把 e 作为新的栈头</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token function">snode</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> h<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// e 等待出栈，一种是空队列 take，一种是 put</span>                SNode m <span class="token operator">=</span> <span class="token function">awaitFulfill</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> timed<span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// wait was cancelled</span>                    <span class="token function">clean</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 本来 s 是栈头的，现在 s 不是栈头了，s 后面又来了一个数，把新的数据作为栈头</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>next <span class="token operator">==</span> s<span class="token punctuation">)</span>                    <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> s<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// help s's fulfiller</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">==</span> REQUEST<span class="token punctuation">)</span> <span class="token operator">?</span> m<span class="token punctuation">.</span>item <span class="token operator">:</span> s<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 栈头正在等待其他线程 put 或 take</span>        <span class="token comment" spellcheck="true">// 比如栈头正在阻塞，并且是 put 类型，而此次操作正好是 take 类型，走此处</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFulfilling</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// try to fulfill</span>            <span class="token comment" spellcheck="true">// 栈头已经被取消，把下一个元素作为栈头</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// already cancelled</span>                <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// pop and retry</span>            <span class="token comment" spellcheck="true">// snode 方法第三个参数 h 代表栈头，赋值给 s 的 next 属性</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token function">snode</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> h<span class="token punctuation">,</span> FULFILLING<span class="token operator">|</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// loop until matched or waiters disappear</span>                    <span class="token comment" spellcheck="true">// m 就是栈头，通过上面 snode 方法刚刚赋值</span>                    SNode m <span class="token operator">=</span> s<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// m is s's match</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// all waiters are gone</span>                        <span class="token function">casHead</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// pop fulfill node</span>                        s <span class="token operator">=</span> null<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// use new node next time</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// restart main loop</span>                    <span class="token punctuation">}</span>                    SNode mn <span class="token operator">=</span> m<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// tryMatch 非常重要的方法，两个作用：</span>                     <span class="token comment" spellcheck="true">// 1 唤醒被阻塞的栈头 m，2 把当前节点 s 赋值给 m 的 match 属性</span>                     <span class="token comment" spellcheck="true">// 这样栈头 m 被唤醒时，就能从 m.match 中得到本次操作 s</span>                     <span class="token comment" spellcheck="true">// 其中 s.item 记录着本次的操作节点，也就是记录本次操作的数据</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">tryMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">casHead</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// pop both s and m</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">==</span> REQUEST<span class="token punctuation">)</span> <span class="token operator">?</span> m<span class="token punctuation">.</span>item <span class="token operator">:</span> s<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span>                  <span class="token comment" spellcheck="true">// lost match</span>                        s<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// help unlink</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// help a fulfiller</span>            SNode m <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// m is h's match</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> null<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// waiter is gone</span>                <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// pop fulfilling node</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                SNode mn <span class="token operator">=</span> m<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">tryMatch</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// help match</span>                    <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// pop both h and m</span>                <span class="token keyword">else</span>                        <span class="token comment" spellcheck="true">// lost match</span>                    h<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// help unlink</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中密密麻麻的注释，我们就可以看出来此方法比较复杂，我们总结一下大概的操作思路：</p><ol><li>判断是 put 方法还是 take 方法；</li><li>判断栈头数据是否为空，如果为空或者栈头的操作和本次操作一致，是的话走 3，否则走 5；</li><li>判断操作有无设置超时时间，如果设置了超时时间并且已经超时，返回 null，否则走 4；</li><li>如果栈头为空，把当前操作设置成栈头，或者栈头不为空，但栈头的操作和本次操作相同，也把当前操作设置成栈头，并看看其它线程能否满足自己，不能满足则阻塞自己。比如当前操作是 take，但队列中没有数据，则阻塞自己；</li><li>如果栈头已经是阻塞住的，需要别人唤醒的，判断当前操作能否唤醒栈头，可以唤醒走 6，否则走 4；</li><li>把自己当作一个节点，赋值到栈头的 match 属性上，并唤醒栈头节点；</li><li>栈头被唤醒后，拿到 match 属性，就是把自己唤醒的节点的信息，返回。</li></ol><p>在整个过程中，有一个节点阻塞的方法，实现原理如下：</p><pre class=" language-java"><code class="language-java">SNode <span class="token function">awaitFulfill</span><span class="token punctuation">(</span>SNode s<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// deadline 死亡时间，如果设置了超时时间的话，死亡时间等于当前时间 + 超时时间，否则就是 0</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> 0L<span class="token punctuation">;</span>    Thread w <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自旋的次数，如果设置了超时时间，会自旋 32 次，否则自旋 512 次。</span>    <span class="token comment" spellcheck="true">// 比如本次操作是 take 操作，自选次数后，仍没有其他线程 put 数据进来</span>    <span class="token comment" spellcheck="true">// 就会阻塞，有超时时间的，会阻塞固定的时间，否则一致阻塞下去</span>    <span class="token keyword">int</span> spins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">shouldSpin</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span>                 <span class="token punctuation">(</span>timed <span class="token operator">?</span> maxTimedSpins <span class="token operator">:</span> maxUntimedSpins<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程有无被打断，如果过了超时时间，当前线程就会被打断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">tryCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SNode m <span class="token operator">=</span> s<span class="token punctuation">.</span>match<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 超时了，取消当前线程的等待操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">tryCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 自选次数减少 1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spins <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            spins <span class="token operator">=</span> <span class="token function">shouldSpin</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>spins<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把当前线程设置成 waiter，主要是通过线程来完成阻塞和唤醒</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>waiter <span class="token operator">==</span> null<span class="token punctuation">)</span>            s<span class="token punctuation">.</span>waiter <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// establish waiter so can park next iter</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timed<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 通过 park 进行阻塞，这个我们在锁章节中会说明</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> spinForTimeoutThreshold<span class="token punctuation">)</span>            LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从节点阻塞代码中，我们可以发现，其阻塞的策略，并不是一上来就阻塞住，而是在自旋一定次数后，仍然没有其它线程来满足自己的要求时，才会真正的阻塞住。</p><h4 id="4-2-3-公平的队列"><a href="#4-2-3-公平的队列" class="headerlink" title="4.2.3-公平的队列"></a>4.2.3-公平的队列</h4><p>首先我们来看一下队列中的每个元素的组成：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 队列头 */</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> QNode head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 队列尾 */</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> QNode tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 队列的元素</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">QNode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前元素的下一个元素</span>    <span class="token keyword">volatile</span> QNode next<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 当前元素的值，如果当前元素被阻塞住了，等其他线程来唤醒自己时，其他线程</span>    <span class="token comment" spellcheck="true">// 会把自己 set 到 item 里面</span>    <span class="token keyword">volatile</span> Object item<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// CAS'ed to or from null</span>    <span class="token comment" spellcheck="true">// 可以阻塞住的当前线程</span>    <span class="token keyword">volatile</span> Thread waiter<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// to control park/unpark</span>    <span class="token comment" spellcheck="true">// true 是 put，false 是 take</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isData<span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre><p>公平的队列主要使用的是 TransferQueue 内部类的 transfer 方法，我们一起来看下源码：</p><pre class=" language-java"><code class="language-java">E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    QNode s <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// constructed/reused as needed</span>    <span class="token comment" spellcheck="true">// true 是 put，false 是 get</span>    <span class="token keyword">boolean</span> isData <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 队列头和尾的临时变量,队列是空的时候，t=h</span>        QNode t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        QNode h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// tail 和 head 没有初始化时，无限循环</span>        <span class="token comment" spellcheck="true">// 虽然这种 continue 非常耗cpu，但感觉不会碰到这种情况</span>        <span class="token comment" spellcheck="true">// 因为 tail 和 head 在 TransferQueue 初始化的时候，就已经被赋值空节点了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null <span class="token operator">||</span> h <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 首尾节点相同，说明是空队列</span>        <span class="token comment" spellcheck="true">// 或者尾节点的操作和当前节点操作一致</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> t <span class="token operator">||</span> t<span class="token punctuation">.</span>isData <span class="token operator">==</span> isData<span class="token punctuation">)</span> <span class="token punctuation">{</span>            QNode tn <span class="token operator">=</span> t<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当 t 不是 tail 时，说明 tail 已经被修改过了</span>            <span class="token comment" spellcheck="true">// 因为 tail 没有被修改的情况下，t 和 tail 必然相等</span>            <span class="token comment" spellcheck="true">// 因为前面刚刚执行赋值操作： t = tail</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> tail<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 队尾后面的值还不为空，t 还不是队尾，直接把 tn 赋值给 t，这是一步加强校验。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">advanceTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//超时直接返回 null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// can't wait</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构造node节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> isData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果把 e 放到队尾失败，继续递归放进去</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// failed to link in</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">advanceTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// swing tail and wait</span>            <span class="token comment" spellcheck="true">// 阻塞住自己</span>            Object x <span class="token operator">=</span> <span class="token function">awaitFulfill</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> timed<span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// wait was cancelled</span>                <span class="token function">clean</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isOffList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// not already unlinked</span>                <span class="token function">advanceHead</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// unlink if head</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// and forget fields</span>                    s<span class="token punctuation">.</span>item <span class="token operator">=</span> s<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>waiter <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>x <span class="token operator">:</span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队列不为空，并且当前操作和队尾不一致</span>        <span class="token comment" spellcheck="true">// 也就是说当前操作是队尾是对应的操作</span>        <span class="token comment" spellcheck="true">// 比如说队尾是因为 take 被阻塞的，那么当前操作必然是 put</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// complementary-mode</span>            <span class="token comment" spellcheck="true">// 如果是第一次执行，此处的 m 代表就是 tail</span>            <span class="token comment" spellcheck="true">// 也就是这行代码体现出队列的公平，每次操作时，从头开始按照顺序进行操作</span>            QNode m <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// node to fulfill</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> tail <span class="token operator">||</span> m <span class="token operator">==</span> null <span class="token operator">||</span> h <span class="token operator">!=</span> head<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// inconsistent read</span>            Object x <span class="token operator">=</span> m<span class="token punctuation">.</span>item<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isData <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token comment" spellcheck="true">// m already fulfilled</span>                x <span class="token operator">==</span> m <span class="token operator">||</span>                   <span class="token comment" spellcheck="true">// m cancelled</span>                <span class="token comment" spellcheck="true">// m 代表栈头</span>                <span class="token comment" spellcheck="true">// 这里把当前的操作值赋值给阻塞住的 m 的 item 属性</span>                <span class="token comment" spellcheck="true">// 这样 m 被释放时，就可得到此次操作的值</span>                <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// lost CAS</span>                <span class="token function">advanceHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// dequeue and retry</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当前操作放到队头</span>            <span class="token function">advanceHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// successfully fulfilled</span>            <span class="token comment" spellcheck="true">// 释放队头阻塞节点</span>            LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>waiter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>x <span class="token operator">:</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>源码比较复杂，我们需要搞清楚的是，线程被阻塞住后，当前线程是如何把自己的数据传给阻塞线程的。为了方便说明，我们假设线程 1 往队列中 take 数据 ，被阻塞住了，变成阻塞线程 A ，然后线程 2 开始往队列中 put 数据 B，大致的流程是这样的：</p><ol><li>线程 1 从队列中拿数据，发现队列中没有数据，于是被阻塞，成为 A ；</li><li>线程 2 往队尾 put 数据，会从队尾往前找到第一个被阻塞的节点，假设此时能找到的就是节点 A，然后线程 B 把将 put 的数据放到节点 A 的 item 属性里面，并唤醒线程 1；</li><li>线程 1 被唤醒后，就能从 A.item 里面拿到线程 2 put 的数据了，线程 1 成功返回。</li></ol><p>从这个过程中，我们能看出公平主要体现在，每次 put 数据的时候，都 put 到队尾上，而每次拿数据时，并不是直接从堆头拿数据，而是从队尾往前寻找第一个被阻塞的线程，这样就会按照顺序释放被阻塞的线程。</p><h4 id="4-2-4-总结"><a href="#4-2-4-总结" class="headerlink" title="4.2.4-总结"></a>4.2.4-总结</h4><p>SynchronousQueue 源码比较复杂，建议大家进行源码的 debug 来学习源码，为大家准备了调试类：SynchronousQueueDemo，大家可以下载源码自己调试一下，这样学起来应该会更加轻松一点。</p><h3 id="4-3-DelayQueue-源码解析"><a href="#4-3-DelayQueue-源码解析" class="headerlink" title="4.3-DelayQueue 源码解析"></a>4.3-DelayQueue 源码解析</h3><p>之前我们说的阻塞队列，都是资源足够时立马执行。本章我们说的队列比较特殊，是一种延迟队列，意思是延迟执行，并且可以设置延迟多久之后执行，比如设置过 5 秒钟之后再执行，在一些延迟执行的场景被大量使用，比如说延迟对账等等。</p><h4 id="4-3-1-整体架构"><a href="#4-3-1-整体架构" class="headerlink" title="4.3.1-整体架构"></a>4.3.1-整体架构</h4><p>DelayQueue 延迟队列底层使用的是锁的能力，比如说要在当前时间往后延迟 5 秒执行，那么当前线程就会沉睡 5 秒，等 5 秒后线程被唤醒时，如果能获取到资源的话，线程即可立马执行。原理上似乎很简单，但内部实现却很复杂，有很多难点，比如当运行资源不够，多个线程同时被唤醒时，如何排队等待？比如说在何时阻塞？何时开始执行等等？接下来我们从源码角度来看下是如何实现的。</p><h5 id="1-类注释-4"><a href="#1-类注释-4" class="headerlink" title="1.类注释"></a>1.类注释</h5><p>类注释上比较简单，只说了三个概念：</p><ol><li>队列中元素将在过期时被执行，越靠近队头，越早过期；</li><li>未过期的元素不能够被 take；</li><li>不允许空元素。</li></ol><p>这三个概念，其实就是三个问题，下文我们会一一看下这三点是如何实现的。</p><h5 id="2-类图-1"><a href="#2-类图-1" class="headerlink" title="2.类图"></a>2.类图</h5><p>DelayQueue 的类图和之前的队列一样，不多说，关键是 DelayQueue 类上是有泛型的，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueue</span><span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Delayed</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span></code></pre><p>从泛型中可以看出，DelayQueue 中的元素必须是 Delayed 的子类，Delayed 是表达延迟能力的关键接口，其继承了 Comparable 接口，并定义了还剩多久过期的方法，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Delayed<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>也就是说 DelayQueue 队列中的元素必须是实现 Delayed 接口和 Comparable 接口的，并覆写了 getDelay 方法和 compareTo 的方法才行，不然在编译时，编译器就会提醒我们元素必须强制实现 Delayed 接口。</p><p>除此之外 DelayQueue 还大量使用了 PriorityQueue 队列的大量功能，这个和 SynchronousQueue 队列很像，大量复用了其它基础类的逻辑，代码示例如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/DelayQueue-poll.jpeg" alt="DelayQueue-poll"></p><p>PriorityQueue 中文叫做优先级队列，在此处的作用就是可以根据过期时间做优先级排序，让先过期的可以先执行，用来实现类注释中的第一点。</p><p>这里的复用的思想还是蛮重要的，我们在源码中经常会遇到这种思想，比如说 LinkedHashMap 复用 HashMap 的能力，Set 复用 Map 的能力，还有此处的 DelayQueue 复用 PriorityQueue 的能力。小结一下，如果想要复用需要做到哪些：</p><ol><li>需要把能遇见可复用的功能尽量抽象，并开放出可扩展的地方，比如说 HashMap 在操作数组的方法中，都给 LinkedHashMap 开放出很多 after 开头的方法，便于 LinkedHashMap 进行排序、删除等等；</li><li>采用组合或继承两种手段进行复用，比如 LinkedHashMap 采用的继承、 Set 和 DelayQueue 采用的组合，组合的意思就是把可复用的类给依赖进来。</li></ol><h5 id><a href="#" class="headerlink" title></a></h5><h4 id="4-3-2-演示"><a href="#4-3-2-演示" class="headerlink" title="4.3.2-演示"></a>4.3.2-演示</h4><p>为了方便大家理解，写了一个演示的 demo，演示了一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 队列消息的生产者</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Product</span><span class="token punctuation">(</span>BlockingQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"begin put"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedDTO</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> 2000L<span class="token punctuation">,</span>beginTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延迟 2 秒执行</span>        queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedDTO</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> 5000L<span class="token punctuation">,</span>beginTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延迟 5 秒执行</span>        queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedDTO</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> 1000L <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>beginTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延迟 10 秒执行</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"end put"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 队列的消费者</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>BlockingQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Consumer begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>DelayedDTO<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>DelayedDTO<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>DelayedDTO<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Consumer end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Data</span>  <span class="token comment" spellcheck="true">// 队列元素，实现了 Delayed 接口</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelayedDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    Long s<span class="token punctuation">;</span>    Long beginTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DelayedDTO</span><span class="token punctuation">(</span>Long s<span class="token punctuation">,</span>Long beginTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>beginTime <span class="token operator">=</span>beginTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>s <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">-</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"现在已经过了{}秒钟"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// demo 运行入口</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    BlockingQueue q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DelayQueueDemo<span class="token punctuation">.</span>Product p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueueDemo<span class="token punctuation">.</span>Product</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    DelayQueueDemo<span class="token punctuation">.</span>Consumer c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueueDemo<span class="token punctuation">.</span>Consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>打印出来的结果如下：<span class="token number">06</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">50.544</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> Consumer begin<span class="token number">06</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">50.544</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> begin put<span class="token number">06</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">50.551</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> end put<span class="token number">06</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">52.554</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> 延迟了<span class="token number">2</span>秒钟才执行<span class="token number">06</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">55.555</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> 延迟了<span class="token number">5</span>秒钟才执行<span class="token number">06</span><span class="token operator">:</span><span class="token number">58</span><span class="token operator">:</span><span class="token number">00.555</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> 延迟了<span class="token number">10</span>秒钟才执行<span class="token number">06</span><span class="token operator">:</span><span class="token number">58</span><span class="token operator">:</span><span class="token number">00.556</span> <span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> Consumer end</code></pre><p>写这个代码的目的主要想演示一下延迟执行的例子，我们大概的思路是：</p><ol><li>新建队列的元素，如 DelayedDTO，必须实现 Delayed 接口，我们在 getDelay 方法中实现了现在离过期时间还剩多久的方法。</li><li>定义队列元素的生产者，和消费者，对应着代码中的 Product 和 Consumer。</li><li>对生产者和消费者就行初始化和管理，对应着我们的 main 方法。</li></ol><p>虽然这只是一个简单的 demo，但实际工作中，我们使用 DelayQueue 基本上就是这种思想，只不过写代码的时候会更加通用和周全，接下来我们来看下 DelayQueue 是如何实现 put 和 take 的。</p><h4 id="4-3-3-放数据"><a href="#4-3-3-放数据" class="headerlink" title="4.3.3-放数据"></a>4.3.3-放数据</h4><p>我们以 put 为例，put 调用的是 offer 的方法，offer 的源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上锁</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用 PriorityQueue 的扩容，排序等能力</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果恰好刚放进去的元素正好在队列头</span>        <span class="token comment" spellcheck="true">// 立马唤醒 take 的阻塞线程，执行 take 操作</span>        <span class="token comment" spellcheck="true">// 如果元素需要延迟执行的话，可以使其更快的沉睡计时</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            leader <span class="token operator">=</span> null<span class="token punctuation">;</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放锁</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到其实底层使用到的是 PriorityQueue 的 offer 方法，我们来看下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 新增元素</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果是空元素的话，抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列实际大小大于容量时，进行扩容</span>    <span class="token comment" spellcheck="true">// 扩容策略是：如果老容量小于 64，2 倍扩容，如果大于 64，50 % 扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果队列为空，当前元素正好处于队头</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token comment" spellcheck="true">// 如果队列不为空，需要根据优先级进行排序</span>        <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 按照从小到大的顺序排列</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUpComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> key <span class="token operator">=</span> <span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// k 是当前队列实际大小的位置</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对 k 进行减倍</span>            <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>            Object e <span class="token operator">=</span> queue<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 x 比 e 大，退出，把 x 放在 k 位置上</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// x 比 e 小，继续循环，直到找到 x 比队列中元素大的位置</span>            queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            k <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，PriorityQueue 的 offer 方法主要做了三件事情：</p><ol><li>对新增元素进行判空；</li><li>对队列进行扩容，扩容策略和集合的扩容策略很相近；</li><li>根据元素的 compareTo 方法进行排序，我们希望最终排序的结果是从小到大的，因为我们想让队头的都是过期的数据，我们需要在 compareTo 方法里面实现：通过每个元素的过期时间进行排序，如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">-</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样便可实现越快过期的元素越能排到队头。</p><p>可以看到，新增数据时，只是使用到了 compareTo 方法，来对队列中的元素进行排序，接下来我们看下，取数据时，是如何操作的。</p><h4 id="4-3-4-取数据"><a href="#4-3-4-取数据" class="headerlink" title="4.3.4-取数据"></a>4.3.4-取数据</h4><p>取数据时，如果发现有元素的过期时间到了，就能拿出数据来，如果没有过期元素，那么线程就会一直阻塞，我们以 take 为例子，来看一下核心源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从队头中拿数据出来</span>    E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果为空，说明队列中，没有数据，阻塞住</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取队头数据的过期时间</span>        <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果过期了，直接返回队头数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 引用置为 null ，便于 gc，这样可以让线程等待时，回收 first 变量</span>        first <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// leader 不为空的话，表示当前队列元素之前已经被设置过阻塞时间了</span>        <span class="token comment" spellcheck="true">// 直接阻塞当前线程等待。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span>            available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 之前没有设置过阻塞时间，按照一定的时间进行阻塞</span>            Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 进行阻塞</span>                available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                    leader <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到阻塞等待的功能底层使用的是锁的能力，这个我们在后面章节中会说到。</p><p>以上演示的 take 方法是会无限阻塞，直到队头的过期时间到了才会返回，如果不想无限阻塞，可以尝试 poll 方法，设置超时时间，在超时时间内，队头元素还没有过期的话，就会返回 null。</p><h5 id="4-3-5-总结"><a href="#4-3-5-总结" class="headerlink" title="4.3.5-总结"></a>4.3.5-总结</h5><p>DelayQueue 是非常有意思的队列，底层使用了排序和超时阻塞实现了延迟队列，排序使用的是 PriorityQueue 排序能力，超时阻塞使用得是锁的等待能力，可以看出 DelayQueue 其实就是为了满足延迟执行的场景，在已有 API 的基础上进行了封装，我们在工作中，可以学习这种思想，对已有的功能能复用的尽量复用，减少开发的工作量。</p><h3 id="4-4-ArrayBlockingQueue-源码解析"><a href="#4-4-ArrayBlockingQueue-源码解析" class="headerlink" title="4.4-ArrayBlockingQueue 源码解析"></a>4.4-ArrayBlockingQueue 源码解析</h3><p>本小节我们来介绍本章最后一个队列：ArrayBlockingQueue。按照字面翻译，中文叫做数组阻塞队列，从名称上看，我们就比较清楚此阻塞队列底层使用的是数组。一说到数组，大家可能会想到 ArrayList 和 HashMap，举新增场景来说 ArrayList 通过 size ++ 找到新增的数组下标位置，HashMap 通过 hash 算法计算出下标位置，那么 ArrayBlockingQueue 是不是也是这两种方法呢？都不是，ArrayBlockingQueue 使用的是一种非常奇妙的方式，我们一起拭目以待。</p><p>全文为了方便说明，队头的说法就是数组头，队尾的说法就是数组尾。</p><h4 id="4-4-1-整体架构"><a href="#4-4-1-整体架构" class="headerlink" title="4.4.1-整体架构"></a>4.4.1-整体架构</h4><p>我们从类注释上可以得到一些有用的信息：</p><h5 id="1-类注释-5"><a href="#1-类注释-5" class="headerlink" title="1.类注释"></a>1.类注释</h5><ol><li>有界的阻塞数组，容量一旦创建，后续大小无法修改；</li><li>元素是有顺序的，按照先入先出进行排序，从队尾插入数据数据，从队头拿数据；</li><li>队列满时，往队列中 put 数据会被阻塞，队列空时，往队列中拿数据也会被阻塞。</li></ol><p>从类注释上可以看出 ArrayBlockingQueue 和一般的数组结构的类不太一样，是不能够动态扩容的，如果队列满了或者空时，take 和 put 都会被阻塞。</p><h5 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2.数据结构"></a>2.数据结构</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 队列存放在 object 的数组里面</span><span class="token comment" spellcheck="true">// 数组大小必须在初始化的时候手动设置，没有默认大小</span><span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下次拿数据的时候的索引位置</span><span class="token keyword">int</span> takeIndex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下次放数据的索引位置</span><span class="token keyword">int</span> putIndex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前已有元素的大小</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可重入的锁</span><span class="token keyword">final</span> ReentrantLock lock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// take的队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// put的队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull<span class="token punctuation">;</span></code></pre><p>以上代码有两个关键的字段，takeIndex 和 putIndex，分别表示下次拿数据和放数据的索引位置。所以说在新增数据和拿数据时，都无需计算，就能知道应该新增到什么位置，应该从什么位置拿数据。</p><h4 id="4-4-2-初始化"><a href="#4-4-2-初始化" class="headerlink" title="4.4.2-初始化"></a>4.4.2-初始化</h4><p>初始化时，有两个重要的参数：数组的大小、是否是公平，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列不为空 Condition，在 put 成功时使用</span>    notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列不满 Condition，在 take 成功时使用</span>    notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中我们可以看出，第二个参数是否公平，主要用于读写锁是否公平，如果是公平锁，那么在锁竞争时，就会按照先来先到的顺序，如果是非公平锁，锁竞争时随机的。</p><p>对于锁公平和非公平，我们举个例子：比如说现在队列是满的，还有很多线程执行 put 操作，必然会有很多线程阻塞等待，当有其它线程执行 take 时，会唤醒等待的线程，如果是公平锁，会按照阻塞等待的先后顺序，依次唤醒阻塞的线程，如果是非公平锁，会随机唤醒沉睡的线程。</p><p>所以说队列满很多线程执行 put 操作时，如果是公平锁，数组元素新增的顺序就是阻塞线程被释放的先后顺序，是有顺序的，而非公平锁，由于阻塞线程被释放的顺序是随机的，所以元素插入到数组的顺序也就不会按照插入的顺序了。</p><p>队列空时，也是一样的道理。</p><p>ArrayBlockingQueue 通过锁的公平和非公平，轻松实现了数组元素的插入顺序的问题。如果要实现这个功能，你会怎么做呢？会想到利用锁的功能么？其实这种思想我们在文中多次提到，当我们需要完成一件事情时，首先看看已有的 API 能不能满足，如果可以的话，通过继承和组合的方式来实现，ArrayBlockingQueue 就是组合了锁的功能。</p><p>初始化时，如果给定了原始数据的话，一定要注意原始数据的大小一定要小于队列的容量，否则会抛异常，如下图所示：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayBlockingQueue%E6%8A%9B%E5%BC%82%E5%B8%B8.jpeg" alt="ArrayBlockingQueue抛异常"></p><p>我们写了一个 demo，报错如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%B5%8B%E8%AF%95ArrayBlockingQueue%E6%8A%9B%E5%BC%82%E5%B8%B8.jpeg" alt="测试ArrayBlockingQueue抛异常"></p><h4 id="4-4-3-新增数据"><a href="#4-4-3-新增数据" class="headerlink" title="4.4.3-新增数据"></a>4.4.3-新增数据</h4><p>数据新增都会按照 putIndex 的位置进行新增，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 新增，如果队列满，无限阻塞</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 元素不能为空</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 队列如果是满的，就无限等待</span>        <span class="token comment" spellcheck="true">// 一直等待队列中有数据被拿走时，自己被唤醒</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1; 同一时刻只能一个线程进行操作此方法</span>    <span class="token comment" spellcheck="true">// assert items[putIndex] == null;</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// putIndex 为本次插入的位置</span>    items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ++ putIndex 计算下次插入的位置</span>    <span class="token comment" spellcheck="true">// 如果下次插入的位置，正好等于队尾，下次插入就从 0 开始</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 唤醒因为队列空导致的等待线程</span>    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们可以看出，其实新增就两种情况：</p><ol><li><p>本次新增的位置居中，直接新增，下图演示的是 putIndex 在数组下标为 5 的位置，还不到队尾，那么可以直接新增，计算下次新增的位置应该是 6；</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayBlockingQueue-%E6%96%B0%E5%A2%9E1.jpeg" alt="ArrayBlockingQueue-新增1"></p></li><li><p>新增的位置到队尾了，那么下次新增时就要从头开始了，示意图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayBlockingQueue-%E6%96%B0%E5%A2%9E2.jpeg" alt="ArrayBlockingQueue-新增2"></p></li></ol><p>上面这张图演示的就是这行代码：<code>if (++putIndex == items.length) putIndex = 0;</code></p><p>可以看到当新增到队尾时，下次新增会重新从队头重新开始。</p><h4 id="4-4-4-取数据"><a href="#4-4-4-取数据" class="headerlink" title="4.4.4-取数据"></a>4.4.4-取数据</h4><p>拿数据都是从队头开始拿数据，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果队列为空，无限等待</span>        <span class="token comment" spellcheck="true">// 直到队列中有数据被 put 后，自己被唤醒</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从队列中拿数据</span>        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// takeIndex 代表本次拿数据的位置，是上一次拿数据时计算好的</span>    E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 帮助 gc</span>    items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ++ takeIndex 计算下次拿数据的位置</span>    <span class="token comment" spellcheck="true">// 如果正好等于队尾的话，下次就从 0 开始拿数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列实际大小减 1</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>        itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 唤醒被队列满所阻塞的线程</span>    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中可以看出，每次拿数据的位置就是 takeIndex 的位置，在找到本次该拿的数据之后，会把 takeIndex 加 1，计算下次拿数据时的索引位置，有个特殊情况是，如果本次拿数据的位置已经是队尾了，那么下次拿数据的位置就要从头开始，就是从 0 开始了。</p><h4 id="4-4-5-删除数据"><a href="#4-4-5-删除数据" class="headerlink" title="4.4.5-删除数据"></a>4.4.5-删除数据</h4><p>删除数据很有意思，我们一起来看下核心源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一共有两种情况：</span><span class="token comment" spellcheck="true">// 1：删除位置和 takeIndex 的关系：删除位置和 takeIndex 一样，比如 takeIndex 是 2， 而要删除的位置正好也是 2，那么就把位置 2 的数据置为 null ,并重新计算 takeIndex 为 3。</span><span class="token comment" spellcheck="true">// 2：找到要删除元素的下一个，计算删除元素和 putIndex 的关系</span><span class="token comment" spellcheck="true">// 如果下一个元素不是 putIndex，就把下一个元素往前移动一位</span><span class="token comment" spellcheck="true">// 如果下一个元素是 putIndex，把 putIndex 的值修改成删除的位置</span><span class="token keyword">void</span> <span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> removeIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 情况1 如果删除位置正好等于下次要拿数据的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>removeIndex <span class="token operator">==</span> takeIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 下次要拿数据的位置直接置空</span>        items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要拿数据的位置往后移动一位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前数组的大小减一</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>            itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 情况 2</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> putIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putIndex<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> removeIndex<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到要删除元素的下一个</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 下一个元素不是 putIndex</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> putIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 下一个元素往前移动一位</span>                items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 下一个元素是 putIndex</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除元素</span>                items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 下次放元素时，应该从本次删除的元素放</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>putIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>            itrs<span class="token punctuation">.</span><span class="token function">removedAt</span><span class="token punctuation">(</span>removeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>删除数据的情况比较复杂，一共有两种情况，第一种情况是 <code>takeIndex == removeIndex</code>，我们画个示意图来看下处理方式：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayBlockingQueue-%E5%88%A0%E9%99%A41.jpeg" alt="ArrayBlockingQueue-删除1"></p><p>第二种情况又分两种：</p><ol><li><p>如果 removeIndex + 1 != putIndex 的话，就把下一个元素往前移动一位，示意图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayBlockingQueue-%E5%88%A0%E9%99%A42.jpeg" alt="ArrayBlockingQueue-删除2"></p></li><li><p>如果 removeIndex + 1 == putIndex 的话，就把 putIndex 的值修改成删除的位置，示意图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ArrayBlockingQueue-%E5%88%A0%E9%99%A43.jpeg" alt="ArrayBlockingQueue-删除3"></p></li></ol><p>ArrayBlockingQueue 的删除方法其实还蛮复杂的，需要考虑到很多特殊的场景。</p><h4 id="4-4-6-总结"><a href="#4-4-6-总结" class="headerlink" title="4.4.6-总结"></a>4.4.6-总结</h4><p>ArrayBlockingQueue 底层是有界的数组，整体来说，和其它队列差别不多，需要注意的是，当 takeIndex、putIndex 到队尾的时候，都会重新从 0 开始循环，这点是比较特殊的，在我们学习源码时，需要特别注意。</p><h3 id="4-5-队列在源码方面的面试题"><a href="#4-5-队列在源码方面的面试题" class="headerlink" title="4.5-队列在源码方面的面试题"></a>4.5-队列在源码方面的面试题</h3><p>队列在源码方面的面试题，一般面试官会从锁，线程池等知识点作为问题入口，慢慢的问到队列，由于锁、线程池咱们还没有学习到，所以本章就直奔主题，从队列入手，看看队列都有哪些面试题（队列种类很多，本文在说队列的通用特征时，都是在说其大部分队列的通用特征，如有某种队列特征不符，不在一一说明）。</p><h4 id="4-5-1-面试题"><a href="#4-5-1-面试题" class="headerlink" title="4.5.1-面试题"></a>4.5.1-面试题</h4><h5 id="1-说说你对队列的理解，队列和集合的区别。"><a href="#1-说说你对队列的理解，队列和集合的区别。" class="headerlink" title="1.说说你对队列的理解，队列和集合的区别。"></a>1.说说你对队列的理解，队列和集合的区别。</h5><p>答：对队列的理解：</p><ol><li>首先队列本身也是个容器，底层也会有不同的数据结构，比如 LinkedBlockingQueue 是底层是链表结构，所以可以维持先入先出的顺序，比如 DelayQueue 底层可以是队列或堆栈，所以可以保证先入先出，或者先入后出的顺序等等，底层的数据结构不同，也造成了操作实现不同；</li><li>部分队列（比如 LinkedBlockingQueue ）提供了暂时存储的功能，我们可以往队列里面放数据，同时也可以从队列里面拿数据，两者可以同时进行；</li><li>队列把生产数据的一方和消费数据的一方进行解耦，生产者只管生产，消费者只管消费，两者之间没有必然联系，队列就像生产者和消费者之间的数据通道一样，如 LinkedBlockingQueue；</li><li>队列还可以对消费者和生产者进行管理，比如队列满了，有生产者还在不停投递数据时，队列可以使生产者阻塞住，让其不再能投递，比如队列空时，有消费者过来拿数据时，队列可以让消费者 hodler 住，等有数据时，唤醒消费者，让消费者拿数据返回，如 ArrayBlockingQueue；</li><li>队列还提供阻塞的功能，比如我们从队列拿数据，但队列中没有数据时，线程会一直阻塞到队列有数据可拿时才返回。</li></ol><p>队列和集合的区别：</p><ol><li>和集合的相同点，队列（部分例外）和集合都提供了数据存储的功能，底层的储存数据结构是有些相似的，比如说 LinkedBlockingQueue 和 LinkedHashMap 底层都使用的是链表，ArrayBlockingQueue 和 ArrayList 底层使用的都是数组。</li><li>和集合的区别：<ul><li>部分队列和部分集合底层的存储结构很相似的，但两者为了完成不同的事情，提供的 API 和其底层的操作实现是不同的。</li><li>队列提供了阻塞的功能，能对消费者和生产者进行简单的管理，队列空时，会阻塞消费者，有其他线程进行 put 操作后，会唤醒阻塞的消费者，让消费者拿数据进行消费，队列满时亦然。</li><li>解耦了生产者和消费者，队列就像是生产者和消费者之间的管道一样，生产者只管往里面丢，消费者只管不断消费，两者之间互不关心。</li></ul></li></ol><h5 id="2-哪些队列具有阻塞的功能，大概是如何阻塞的？"><a href="#2-哪些队列具有阻塞的功能，大概是如何阻塞的？" class="headerlink" title="2.哪些队列具有阻塞的功能，大概是如何阻塞的？"></a>2.哪些队列具有阻塞的功能，大概是如何阻塞的？</h5><p>答：队列主要提供了两种阻塞功能，如下：</p><ol><li>LinkedBlockingQueue 链表阻塞队列和 ArrayBlockingQueue 数组阻塞队列是一类，前者容量是 Integer 的最大值，后者数组大小固定，两个阻塞队列都可以指定容量大小，当队列满时，如果有线程 put 数据，线程会阻塞住，直到有其他线程进行消费数据后，才会唤醒阻塞线程继续 put，当队列空时，如果有线程 take 数据，线程会阻塞到队列不空时，继续 take。</li><li>SynchronousQueue 同步队列，当线程 put 时，必须有对应线程把数据消费掉，put 线程才能返回，当线程 take 时，需要有对应线程进行 put 数据时，take 才能返回，反之则阻塞，举个例子，线程 A put 数据 A1 到队列中了，此时并没有任何的消费者，线程 A 就无法返回，会阻塞住，直到有线程消费掉数据 A1 时，线程 A 才能返回。</li></ol><h5 id="3-底层是如何实现阻塞的？"><a href="#3-底层是如何实现阻塞的？" class="headerlink" title="3.底层是如何实现阻塞的？"></a>3.底层是如何实现阻塞的？</h5><p>答：队列本身并没有实现阻塞的功能，而是利用 Condition 的等待唤醒机制，阻塞底层实现就是更改线程的状态为沉睡，细节我们在锁小节会说到。</p><h5 id="4-LinkedBlockingQueue-和-ArrayBlockingQueue-有啥区别。"><a href="#4-LinkedBlockingQueue-和-ArrayBlockingQueue-有啥区别。" class="headerlink" title="4.LinkedBlockingQueue 和 ArrayBlockingQueue 有啥区别。"></a>4.LinkedBlockingQueue 和 ArrayBlockingQueue 有啥区别。</h5><p>答：相同点：</p><ol><li>两者的阻塞机制大体相同，比如在队列满、空时，线程都会阻塞住。</li></ol><p>不同点：</p><ol><li>LinkedBlockingQueue 底层是链表结构，容量默认是 Interge 的最大值，ArrayBlockingQueue 底层是数组，容量必须在初始化时指定。</li><li>两者的底层结构不同，所以 take、put、remove 的底层实现也就不同。</li></ol><h5 id="5-往队列里面-put-数据是线程安全的么？为什么？"><a href="#5-往队列里面-put-数据是线程安全的么？为什么？" class="headerlink" title="5.往队列里面 put 数据是线程安全的么？为什么？"></a>5.往队列里面 put 数据是线程安全的么？为什么？</h5><p>答：是线程安全的，在 put 之前，队列会自动加锁，put 完成之后，锁会自动释放，保证了同一时刻只会有一个线程能操作队列的数据，以 LinkedBlockingQueue 为例子，put 时，会加 put 锁，并只对队尾 tail 进行操作，take 时，会加 take 锁，并只对队头 head 进行操作，remove 时，会同时加 put 和 take 锁，所以各种操作都是线程安全的，我们工作中可以放心使用。</p><h5 id="6-take-的时候也会加锁么？既然-put-和-take-都会加锁，是不是同一时间只能运行其中一个方法。"><a href="#6-take-的时候也会加锁么？既然-put-和-take-都会加锁，是不是同一时间只能运行其中一个方法。" class="headerlink" title="6.take 的时候也会加锁么？既然 put 和 take 都会加锁，是不是同一时间只能运行其中一个方法。"></a>6.take 的时候也会加锁么？既然 put 和 take 都会加锁，是不是同一时间只能运行其中一个方法。</h5><p>答：</p><ol><li><p>是的，take 时也会加锁的，像 LinkedBlockingQueue 在执行 take 方法时，在拿数据的同时，会把当前数据删除掉，就改变了链表的数据结构，所以需要加锁来保证线程安全。</p></li><li><p>这个需要看情况而言，对于 LinkedBlockingQueue 来说，队列的 put 和 take 都会加锁，但两者的锁是不一样的，所以两者互不影响，可以同时进行的，对于 ArrayBlockingQueue 而言，put 和 take 是同一个锁，所以同一时刻只能运行一个方法。</p></li></ol><h5 id="7-工作中经常使用队列的-put、take-方法有什么危害，如何避免。"><a href="#7-工作中经常使用队列的-put、take-方法有什么危害，如何避免。" class="headerlink" title="7.工作中经常使用队列的 put、take 方法有什么危害，如何避免。"></a>7.工作中经常使用队列的 put、take 方法有什么危害，如何避免。</h5><p>答：当队列满时，使用 put 方法，会一直阻塞到队列不满为止。</p><p>当队列空时，使用 take 方法，会一直阻塞到队列有数据为止。</p><p>两个方法都是无限（永远、没有超时时间的意思）阻塞的方法，容易使得线程全部都阻塞住，大流量时，导致机器无线程可用，所以建议在流量大时，使用 offer 和 poll 方法来代替两者，我们只需要设置好超时阻塞时间，这两个方法如果在超时时间外，还没有得到数据的话，就会返回默认值（LinkedBlockingQueue 为例），这样就不会导致流量大时，所有的线程都阻塞住了。</p><p>这个也是生产事故常常发生的原因之一，尝试用 put 和 take 方法，在平时自测中根本无法发现，对源码不熟悉的同学也不会意识到会有问题，当线上大流量打进来时，很有可能会发生故障，所以我们平时工作中使用队列时，需要谨慎再谨慎。</p><h5 id="8-把数据放入队列中后，有木有办法让队列过一会儿再执行？"><a href="#8-把数据放入队列中后，有木有办法让队列过一会儿再执行？" class="headerlink" title="8.把数据放入队列中后，有木有办法让队列过一会儿再执行？"></a>8.把数据放入队列中后，有木有办法让队列过一会儿再执行？</h5><p>答：可以的，DelayQueue 提供了这种机制，可以设置一段时间之后再执行，该队列有个唯一的缺点，就是数据保存在内存中，在重启和断电的时候，数据容易丢失，所以定时的时间我们都不会设置很久，一般都是几秒内，如果定时的时间需要设置很久的话，可以考虑采取延迟队列中间件（这种中间件对数据会进行持久化，不怕断电的发生）进行实现。</p><h5 id="9-DelayQueue-对元素有什么要求么，我把-String-放到队列中去可以么？"><a href="#9-DelayQueue-对元素有什么要求么，我把-String-放到队列中去可以么？" class="headerlink" title="9.DelayQueue 对元素有什么要求么，我把 String 放到队列中去可以么？"></a>9.DelayQueue 对元素有什么要求么，我把 String 放到队列中去可以么？</h5><p>答：DelayQueue 要求元素必须实现 Delayed 接口，Delayed 本身又实现了 Comparable 接口，Delayed 接口的作用是定义还剩下多久就会超时，给使用者定制超时时间的，Comparable 接口主要用于对元素之间的超时时间进行排序的，两者结合，就可以让越快过期的元素能够排在前面。</p><p>所以把 String 放到 DelayQueue 中是不行的，编译都无法通过，DelayQueue 类在定义的时候，是有泛型定义的，泛型类型必须是 Delayed 接口的子类才行。</p><h5 id="10-DelayQueue-如何让快过期的元素先执行的？"><a href="#10-DelayQueue-如何让快过期的元素先执行的？" class="headerlink" title="10.DelayQueue 如何让快过期的元素先执行的？"></a>10.DelayQueue 如何让快过期的元素先执行的？</h5><p>答：DelayQueue 中的元素都实现 Delayed 和 Comparable 接口的，其内部会使用 Comparable 的 compareTo 方法进行排序，我们可以利用这个功能，在 compareTo 方法中实现过期时间和当前时间的差，这样越快过期的元素，计算出来的差值就会越小，就会越先被执行。</p><h5 id="11-如何查看-SynchronousQueue-队列的大小？"><a href="#11-如何查看-SynchronousQueue-队列的大小？" class="headerlink" title="11.如何查看 SynchronousQueue 队列的大小？"></a>11.如何查看 SynchronousQueue 队列的大小？</h5><p>答：此题是个陷进题，题目首先设定了 SynchronousQueue 是可以查看大小的，实际上 SynchronousQueue 本身是没有容量的，所以也无法查看其容量的大小，其内部的 size 方法都是写死的返回 0。</p><h5 id="12-SynchronousQueue-底层有几种数据结构，两者有何不同？"><a href="#12-SynchronousQueue-底层有几种数据结构，两者有何不同？" class="headerlink" title="12.SynchronousQueue 底层有几种数据结构，两者有何不同？"></a>12.SynchronousQueue 底层有几种数据结构，两者有何不同？</h5><p>答：底层有两种数据结构，分别是队列和堆栈。</p><p>两者不同点：</p><ol><li>队列维护了先入先出的顺序，所以最先进去队列的元素会最先被消费，我们称为公平的，而堆栈则是先入后出的顺序，最先进入堆栈中的数据可能会最后才会被消费，我们称为不公平的。</li><li>两者的数据结构不同，导致其 take 和 put 方法有所差别，具体的可以看 《 SynchronousQueue 源码解析 》章节。</li></ol><h5 id="13-假设-SynchronousQueue-底层使用的是堆栈，线程-1-执行-take-操作阻塞住了，然后有线程-2-执行-put-操作，问此时线程-2-是如何把-put-的数据传递给-take-的？"><a href="#13-假设-SynchronousQueue-底层使用的是堆栈，线程-1-执行-take-操作阻塞住了，然后有线程-2-执行-put-操作，问此时线程-2-是如何把-put-的数据传递给-take-的？" class="headerlink" title="13.假设 SynchronousQueue 底层使用的是堆栈，线程 1 执行 take 操作阻塞住了，然后有线程 2 执行 put 操作，问此时线程 2 是如何把 put 的数据传递给 take 的？"></a>13.假设 SynchronousQueue 底层使用的是堆栈，线程 1 执行 take 操作阻塞住了，然后有线程 2 执行 put 操作，问此时线程 2 是如何把 put 的数据传递给 take 的？</h5><p>答：这是一个好问题，也是理解 SynchronousQueue 的核心问题。</p><p>首先线程 1 被阻塞住，此时堆栈头就是线程 1 了，此时线程 2 执行 put 操作，会把 put 的数据赋值给堆栈头的 match 属性，并唤醒线程 1，线程 1 被唤醒后，拿到堆栈头中的 match 属性，就能够拿到 put 的数据了。</p><p>严格上说并不是 put 操作直接把数据传递给了 take，而是 put 操作改变了堆栈头的数据，从而 take 可以从堆栈头上直接拿到数据，堆栈头是 take 和 put 操作之间的沟通媒介。</p><h5 id="14-如果想使用固定大小的队列，有几种队列可以选择，有何不同？"><a href="#14-如果想使用固定大小的队列，有几种队列可以选择，有何不同？" class="headerlink" title="14.如果想使用固定大小的队列，有几种队列可以选择，有何不同？"></a>14.如果想使用固定大小的队列，有几种队列可以选择，有何不同？</h5><p>答：可以使用 LinkedBlockingQueue 和 ArrayBlockingQueue 两种队列。</p><p>前者是链表，后者是数组，链表新增时，只要建立起新增数据和链尾数据之间的关联即可，数组新增时，需要考虑到索引的位置（takeIndex 和 putIndex 分别记录着下次拿数据、放数据的索引位置），如果增加到了数组最后一个位置，下次就要重头开始新增。</p><h5 id="15-ArrayBlockingQueue-可以动态扩容么？用到数组最后一个位置时怎么办？"><a href="#15-ArrayBlockingQueue-可以动态扩容么？用到数组最后一个位置时怎么办？" class="headerlink" title="15.ArrayBlockingQueue 可以动态扩容么？用到数组最后一个位置时怎么办？"></a>15.ArrayBlockingQueue 可以动态扩容么？用到数组最后一个位置时怎么办？</h5><p>答：不可以的，虽然 ArrayBlockingQueue 底层是数组，但不能够动态扩容的。</p><p>假设 put 操作用到了数组的最后一个位置，那么下次 put 就需要从数组 0 的位置重新开始了。</p><p>假设 take 操作用到数组的最后一个位置，那么下次 take 的时候也会从数组 0 的位置重新开始。</p><h5 id="16-ArrayBlockingQueue-take-和-put-都是怎么找到索引位置的？是利用-hash-算法计算得到的么？"><a href="#16-ArrayBlockingQueue-take-和-put-都是怎么找到索引位置的？是利用-hash-算法计算得到的么？" class="headerlink" title="16.ArrayBlockingQueue take 和 put 都是怎么找到索引位置的？是利用 hash 算法计算得到的么？"></a>16.ArrayBlockingQueue take 和 put 都是怎么找到索引位置的？是利用 hash 算法计算得到的么？</h5><p>答：ArrayBlockingQueue 有两个属性，为 takeIndex 和 putIndex，分别标识下次 take 和 put 的位置，每次 take 和 put 完成之后，都会往后加一，虽然底层是数组，但和 HashMap 不同，并不是通过 hash 算法计算得到的。</p><h4 id="4-5-2-总结"><a href="#4-5-2-总结" class="headerlink" title="4.5.2-总结"></a>4.5.2-总结</h4><p>队列是锁、线程池等复杂 API 的基础，很多面试官都会在问这些 API 时冷不防的问你队列的知识，如果你回答不好，面试官可能会认为你仅仅是用过锁和线程池，但却对其底层的原理和实现了解的不够全面，所以说队列还是蛮重要的，但队列的源码比较复杂，建议大家可以尝试 debug 的方式来理解源码。</p><h3 id="4-6-举一反三：队列在-Java-其它源码中的应用"><a href="#4-6-举一反三：队列在-Java-其它源码中的应用" class="headerlink" title="4.6-举一反三：队列在 Java 其它源码中的应用"></a>4.6-举一反三：队列在 Java 其它源码中的应用</h3><p>队列除了提供 API 供开发者使用外，自身也和 Java 中其他 API 紧密结合，比如线程池和锁，线程池直接使用了队列的 API，锁借鉴了队列的思想，重新实现了队列，线程池和锁都是我们工作中经常使用的 API，也是面试官常问的 API，队列在两者的实现上发挥着至关重要的作用，接下来我们一起来看下。</p><h4 id="4-6-1-队列和线程池的结合"><a href="#4-6-1-队列和线程池的结合" class="headerlink" title="4.6.1-队列和线程池的结合"></a>4.6.1-队列和线程池的结合</h4><h5 id="1-队列在线程池中的作用"><a href="#1-队列在线程池中的作用" class="headerlink" title="1.队列在线程池中的作用"></a>1.队列在线程池中的作用</h5><p>线程池大家应该都使用过，比如我们想新建一个固定大小的线程池，并让运行的线程打印一句话出来，我们会这么写代码：</p><pre class=" language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// submit 是提交任务的意思</span><span class="token comment" spellcheck="true">// Thread.currentThread() 得到当前线程</span>executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is run"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果(我们打印出了当前线程的名字)：</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> is run</code></pre><p>代码中的 Executors 是并发的工具类，主要是为了帮助我们更方便的构造线程池的，其中 newFixedThreadPool 方法表示会构造出固定大小的线程池，我们给的入参是 10，代表线程池最大可以构造 10 个线程出来。</p><p>在实际的工作中，我们对流量的大小是无法控制的，这里我们设定的最大是 10 个线程，但如果一下子来了 100 个请求，这时候 10 个线程肯定是忙不过来了，那么剩余的 90 个请求怎么办呢？</p><p>这时候就需要队列出马了，我们会把线程无法消化的数据放到队列中去，让数据在队列中排队，等线程有能力消费了，再从队列中拿出来慢慢去消费。</p><p>我们画一个图释义一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E7%9A%84%E9%98%9F%E5%88%97.jpeg" alt="线程池中的队列"></p><p>上图右边表示 10 个线程正在全力消费请求，左边表示剩余请求正在队列中排队，等待消费。</p><p>由此可见，队列在线程池中占有很重要的地位，当线程池中的线程忙不过来的时候，请求都可以在队列中等待，从而慢慢地消费。</p><p>接下来我们来看下，线程池到底用到了那几种队列类型，分别起的什么作用。</p><h5 id="2-线程池中使用到的队列的类型"><a href="#2-线程池中使用到的队列的类型" class="headerlink" title="2.线程池中使用到的队列的类型"></a>2.线程池中使用到的队列的类型</h5><ul><li><h6 id="LinkedBlockingQueue-队列的使用"><a href="#LinkedBlockingQueue-队列的使用" class="headerlink" title="LinkedBlockingQueue 队列的使用"></a>LinkedBlockingQueue 队列的使用</h6><p>刚刚我们说的 newFixedThreadPool 是一种固定大小的线程池，意思是当线程池初始化好后，线程池里面的线程大小是不会变的了（线程池默认设置是不会回收核心线程数的），我们来看下 newFixedThreadPool 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor 初始化时，第一个参数表示 coreSize，第二个参数是 maxSize，coreSize == maxSize,</span><span class="token comment" spellcheck="true">// 表示线程池初始化时，线程大小已固定，所以叫做固定(Fixed)线程池。 </span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码中可以看到初始化了 ThreadPoolExecutor，ThreadPoolExecutor 是线程池的 API，我们在线程池章节会细说，它的第五个构造参数就是队列，线程池根据场景会选择不同的队列，此处使用的是 LinkedBlockingQueue，并且是默认参数的 Queue，这说明此阻塞队列的最大容量是 Integer 的最大值，也就是说当线程池的处理能力有限时，阻塞队列中最大可以存放 Integer 最大值个任务。</p><p>但我们在实际工作中，常常不建议直接使用 newFixedThreadPool，主要是因为其使用的是 LinkedBlockingQueue 的默认构造器，队列容量太大了，在要求实时响应的请求中，队列容量太大往往危害也很大。</p><p>比如说我们用上述的线程池，线程 10 个，队列是 Integer 的最大值，当并发流量很大时，比如来了 1w/qps 请求，这时候 10 个线程根本消费不完，就会有很多请求被阻塞在队列中，虽然 10 个线程仍然在不断地消费，但需要消费完队列中的所有数据是需要时间的，假设需要 3 秒才能全部消费完，而这些实时请求都是有超时时间的，默认超时时间是 2 秒，当时间到达 2 秒时，请求已经超时了，返回报错，可这时候队列中的任务还有很多都在等待消费呢，即使后来消费完成，也无法返回给调用方了。</p><p>以上情况就会造成，调用方看到接口是超时报错返回的，但服务端的任务其实还在排队执行，过了 3 秒后，服务端的任务可能都会执行成功，但调用方已经无法感知了，调用方再次调用时，就会发现其实这笔请求已经成功了。</p><p>如果调用方是从页面发起的，那么体验就会更差，页面上第一次调用页面报错，用户重新刷新页面时，页面显示上次的请求已经成功了，这个就是很不好的体验了。</p><p>所以我们希望队列的大小不要设置成那么大，可以根据实际的消费情况来设置队列的大小，这样就可以保证在接口超时前，队列中排队的请求可以执行完。</p><p>场景比较复杂，为了方便理解，我们画了一个图，把整个流程释义一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E4%BD%BF%E7%94%A8LinkedBlockingQueue.jpeg" alt="线程池中使用LinkedBlockingQueue"></p><p>这种问题，在实际工作中已经属于非常严重的生产事故了，我们使用时一定要小心。</p><p>和 newFixedThreadPool 相同的是，newSingleThreadExecutor 方法底层使用的也是 LinkedBlockingQueue，newSingleThreadExecutor 线程池底层线程只会有一个，这代表着这个线程池一次只能处理一个请求，其余的请求都会在队列中排队等待执行，我们看下 newSingleThreadExecutor 的源码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token comment" spellcheck="true">// 前两个参数规定了这个线程池一次只能消费一个线程</span>        <span class="token comment" spellcheck="true">// 第五个参数使用的是 LinkedBlockingQueue,说明当请求超过单线程消费能力时，就会排队</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，底层使用的也是 LinkedBlockingQueue 的默认参数，也就是说排队的最大值是 Integer 的最大值。</p></li><li><h6 id="SynchronousQueue-队列"><a href="#SynchronousQueue-队列" class="headerlink" title="SynchronousQueue 队列"></a>SynchronousQueue 队列</h6><p>除了 newFixedThreadPool 方法，在线程池新建时，还有其他的几个方法也对应着不同的队列，我们一起来看下 newCachedThreadPool，newCachedThreadPool 底层对应的是 SynchronousQueue 队列，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第五个参数是 SynchronousQueue</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SynchronousQueue 队列是没有大小限制的，请求多少队列都能承受的住，可以说这是他的优点，缺点就是每次往队列里面 put 数据时，并不能立马返回，而是需要等待有线程 take 数据之后，才能正常返回，如果请求量大，而消费能力较差时，就会导致大量请求被 hodler 住，必须等到慢慢消费完成之后才能被释放，所以在平时工作使用中也需要慎重。</p></li><li><h6 id="DelayedWorkQueue"><a href="#DelayedWorkQueue" class="headerlink" title="DelayedWorkQueue"></a>DelayedWorkQueue</h6><p>newScheduledThreadPool 代表定时任务线程池，底层源码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/newScheduledThreadPool.jpeg" alt="newScheduledThreadPool"></p><p>截图从左往右我们可以看到，底层队列使用的是 DelayedWorkQueue 延迟队列，说明线程池底层延时的功能就是 DelayedWorkQueue 队列提供的，新的延迟请求都先到队列中去，延迟时间到了，线程池自然就能从队列中拿出线程进行执行了。</p><p>newSingleThreadScheduledExecutor 方法也是和 newScheduledThreadPool 一样的，使用 DelayedWorkQueue 的延迟功能，只不过前者是单个线程执行。</p></li></ul><h5 id="3-小结-4"><a href="#3-小结-4" class="headerlink" title="3.小结"></a>3.小结</h5><p>从线程池的源码中，我们可以看到：</p><ol><li>队列在线程池的设计中，起着缓冲数据，延迟执行数据的作用，当线程池消费能力有限时，可以让请求进行排队，让线程池可以慢慢消费。</li><li>线程池根据不同的场景，选择使用了 DelayedWorkQueue、SynchronousQueue、LinkedBlockingQueue 多种队列，从而实现自己不同的功能，比如使用 DelayedWorkQueue 的延迟功能来实现定时执行线程池。</li></ol><h4 id="4-6-2-队列和锁的结合"><a href="#4-6-2-队列和锁的结合" class="headerlink" title="4.6.2-队列和锁的结合"></a>4.6.2-队列和锁的结合</h4><p>我们平时写锁代码的时候都这么写：</p><pre class=" language-java"><code class="language-java">ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//throw Exception;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化锁 -&gt; 加锁 -&gt; 执行业务逻辑 -&gt; 释放锁，这是正常的流程，但我们知道同一时刻只能有一个线程才能获得锁的，那么此时其他获取不到锁的线程该怎么办呢？</p><p>等待，其他获取不到锁的线程，都会到一个等待队列中去等待，等待锁被释放掉时，再去竞争锁，我们画一个示意图。</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E9%98%9F%E5%88%97%E5%92%8C%E9%94%81.jpeg" alt="队列和锁"></p><p>图中红色标识的就是同步队列，获取不到锁的线程都会到同步队列中去排队，当锁被释放后，同步队列中的线程就又开始去竞争锁。</p><p>可以看出队列在锁中起的作用之一，就是帮助管理获取不到锁的线程，让这些线程可以耐心的等待。</p><p>同步队列并没有使用现有的队列的 API 去实现，但底层的结构，思想和目前队列是一致的，所以我们学好队列章节，对理解锁的同步队列，用处非常大。</p><h4 id="4-6-3-总结"><a href="#4-6-3-总结" class="headerlink" title="4.6.3-总结"></a>4.6.3-总结</h4><p>队列的数据结构真的很重要，在线程池和锁两个重量级 API 中起着非常重要的作用，我们要非常清楚队列底层的大体的数据结构，了解数据是如何入队的，如何出队的，队列这章也是比较复杂的，建议大家多多 debug，我们 github 上也提供了一些 debug 的 demo，大家可以尝试调试起来。</p><h3 id="4-7-整体设计：队列设计思想、工作中使用场景"><a href="#4-7-整体设计：队列设计思想、工作中使用场景" class="headerlink" title="4.7-整体设计：队列设计思想、工作中使用场景"></a>4.7-整体设计：队列设计思想、工作中使用场景</h3><p>本章我们学习了 LinkedBlockingQueue、ArrayBlockingQueue、SynchronousQueue、DelayQueue 四种队列，四种队列底层数据结构各不相同，使用场景也不相同，本章我们从设计思想和使用场景两个大的方向做一些对比和总结。</p><h4 id="4-7-1-设计思想"><a href="#4-7-1-设计思想" class="headerlink" title="4.7.1-设计思想"></a>4.7.1-设计思想</h4><p>首先我们画出队列的总体设计图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E9%98%9F%E5%88%97%E7%9A%84%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1%E5%9B%BE.jpeg" alt="队列的总体设计图"></p><p>从图中我们可以看出几点：</p><ol><li>队列解耦了生产者和消费者，提供了生产者和消费者间关系的多种形式，比如 LinkedBlockingQueue、ArrayBlockingQueue 两种队列就把解耦了生产者和消费者，比如 SynchronousQueue 这种就把生产者和消费者相互对应（生产者的消息被消费者开始消费之后，生产者才能返回，为了方便理解，使用相互对应这个词）；</li><li>不同的队列有着不同的数据结构，有链表（LinkedBlockingQueue）、数组（ArrayBlockingQueue）、堆栈（SynchronousQueue）等；</li><li>不同的数据结构，决定了入队和出队的姿势是不同的。</li></ol><p>接下来我们分别按照这几个方面来总结分析一下。</p><h5 id="1-队列的数据结构"><a href="#1-队列的数据结构" class="headerlink" title="1.队列的数据结构"></a>1.队列的数据结构</h5><p>链表结构的队列就是 LinkedBlockingQueue，其特征如下：</p><ol><li>初始大小默认是 Integer 的最大值，也可以设置初始大小；</li><li>链表元素通过 next 属性关联下一个元素；</li><li>新增是从链表的尾部新增，拿是从链表头开始拿。</li></ol><p>数组结构的队列是 ArrayBlockingQueue，特征如下：</p><ol><li>容量大小是固定的，不能动态扩容；</li><li>有 takeIndex 和 putIndex 两个索引记录下次拿和新增的位置；</li><li>当 takeIndex 和 putIndex 到达数组的最后一个位置时，下次都是从 0 开始循环。</li></ol><p>SynchronousQueue 有着两种数据结构，分别是队列和堆栈，特征如下：</p><ol><li>队列保证了先入先出的数据结构，体现了公平性；</li><li>堆栈是先入后出的数据结构，是不公平的，但性能高于先入先出。</li></ol><h5 id="2-入队和出队的方式"><a href="#2-入队和出队的方式" class="headerlink" title="2.入队和出队的方式"></a>2.入队和出队的方式</h5><p>不同的队列有着不同的数据结构，导致其入队和出队的方式也不同：</p><ol><li>链表是入队是直接追加到队尾，出队是从链表头拿数据；</li><li>数组是有 takeIndex 和 putIndex 两个索引位置记录下次拿和取的位置，如总体设计图，入队直接指向了 putIndex，出队指向了 takeIndex；</li><li>堆栈主要都是围绕栈头进行入栈和出栈的。</li></ol><h5 id="3-生产者和消费者之间的通信机制"><a href="#3-生产者和消费者之间的通信机制" class="headerlink" title="3.生产者和消费者之间的通信机制"></a>3.生产者和消费者之间的通信机制</h5><p>从四种队列我们可以看出来生产者和消费者之间有两种通信机制，一种是强关联，一种是无关联。</p><p>强关联主要是指 SynchronousQueue 队列，生产者往队列中 put 数据，如果这时候没有消费者消费的话，生产者就会一直阻塞住，是无法返回的；消费者来队列里取数据，如果这时候队列中没有数据，消费者也会一直阻塞住，所以 SynchronousQueue 队列模型中，生产者和消费者是强关联的，如果只有其中一方存在，只会阻塞，是无法传递数据的。</p><p>无关联主要是说有数据存储功能的队列，比如说 LinkedBlockingQueue 和 ArrayBlockingQueue，只要队列容器不满，生产者就能放成功，生产者就可以直接返回，和有无消费者一点关系都没有，生产者和消费者完全解耦，通过队列容器的储存功能进行解耦。</p><h4 id="4-7-2-工作中的使用场景"><a href="#4-7-2-工作中的使用场景" class="headerlink" title="4.7.2-工作中的使用场景"></a>4.7.2-工作中的使用场景</h4><p>在日常工作中，我们需要根据队列的特征来匹配业务场景，从而决定使用哪种队列，我们总结下各个队列适合使用的场景：</p><h5 id="1-LinkedBlockingQueue"><a href="#1-LinkedBlockingQueue" class="headerlink" title="1.LinkedBlockingQueue"></a>1.LinkedBlockingQueue</h5><p>适合对生产的数据大小不定（时高时低），数据量较大的场景，比如说我们在淘宝上买东西，点击下单按钮时，对应着后台的系统叫做下单系统，下单系统会把下单请求都放到一个线程池里面，这时候我们初始化线程池时，一般会选择 LinkedBlockingQueue，并且设置一个合适的大小，此时选择 LinkedBlockingQueue 主要原因在于：在不高于我们设定的阈值内，队列里面的大小可大可小，不会有任何性能损耗，正好符合下单流量的特点，时大时小。</p><p>一般工作中，我们大多数都会选择 LinkedBlockingQueue 队列，但会设置 LinkedBlockingQueue 的最大容量，如果初始化时直接使用默认的 Integer 的最大值，当流量很大，而消费者处理能力很差时，大量请求都会在队列中堆积，会大量消耗机器的内存，就会降低机器整体性能甚至引起宕机，一旦宕机，在队列中的数据都会消失，因为队列的数据是保存在内存中的，一旦机器宕机，内存中的数据都会消失的，所以使用 LinkedBlockingQueue 队列时，建议还是要根据日常的流量设置合适的队列的大小。</p><h5 id="2-ArrayBlockingQueue"><a href="#2-ArrayBlockingQueue" class="headerlink" title="2.ArrayBlockingQueue"></a>2.ArrayBlockingQueue</h5><p>一般用于生产数据固定的场景，比如说系统每天会进行对账，对账完成之后，会固定的产生 100 条对账结果，因为对账结果固定，我们就可以使用 ArrayBlockingQueue 队列，大小可以设置成 100。</p><h5 id="3-DelayQueue"><a href="#3-DelayQueue" class="headerlink" title="3.DelayQueue"></a>3.DelayQueue</h5><p>延迟队列，在工作中经常遇到，主要用于任务不想立马执行，想等待一段时间才执行的场景。</p><p>比如说延迟对账，我们在工作中曾经遇到过这样的场景：我们在淘宝上买东西，弹出支付宝付款页面，在我们输入指纹的瞬间，流程主要是前端 -》交易后端 -》支付后端，交易后端调用支付后端主要是为了把我们支付宝的钱划给商家，而交易调用支付的过程中，有小概率的情况，因为网络抖动会发生超时的情况，这时候就需要通过及时的对账来解决这个事情（对账只是解决这个问题的手段之一），我们简单画一个流程图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E5%BB%B6%E8%BF%9F%E5%AF%B9%E8%B4%A6%E6%B5%81%E7%A8%8B.jpeg" alt="延迟对账流程"></p><p>这是一个真实场景，为了方便描述，已经大大简化了，再说明几点：</p><ol><li>交易调用支付的接口，这个接口的作用就是为了把小美的 800 元转给商家小明；</li><li>接口调用超时，此时交易系统并不知道 800 有没有成功转给小明，当然想知道的方式有很多，我们选择了对账的方式，对账的目的就是为了知道当前 800 元有没有成功转给小明；</li><li>延迟对账的目的，因为支付系统把 800 元转给商家小明也是需要时间的，如果超时之后立马对账，可能转账的动作还在进行中，导致对账的结果不准确，所以需要延迟几秒后再去对账；</li><li>对账之后的结果有几种，比如已经成功的把 800 元转给小明了，这时候需要把对账结果告诉交易系统，交易系统更新数据，前端就能够显示转账成功了。</li></ol><p>在这个案列中，延迟对账的核心技术就是 DelayQueue，我们大概这么做的：新建对账任务，设置 3 秒之后执行，把任务放到 DelayQueue 中，过了 3 秒之后，就会自动执行对账任务了。</p><p>DelayQueue 延迟执行的功能就在这个场景中得到应用。</p><h4 id="4-7-3-总结"><a href="#4-7-3-总结" class="headerlink" title="4.7.3-总结"></a>4.7.3-总结</h4><p>我们不会为了阅读源码而读源码，我们读源码的最初目的，是为了提高我们的技术深度，最终目的是为了在不同的场景中，能够选择合适的技术进行落地，本章中解释的一些队列的场景，我们在工作中其实都会遇到，特别是在使用线程池时，使用哪种队列是我们必须思考的一个问题，所以本章先比较了各个队列的适合使用场景，然后举了几个案列进行具体分析，希望大家也能把技术具体落地到实际工作中，使技术推动、辅助业务。</p><h3 id="4-8-惊叹面试官：由浅入深手写队列"><a href="#4-8-惊叹面试官：由浅入深手写队列" class="headerlink" title="4.8-惊叹面试官：由浅入深手写队列"></a>4.8-惊叹面试官：由浅入深手写队列</h3><p>现在不少大厂面试的时候会要求手写代码，我曾经看过一个大厂面试时，要求在线写代码，题目就是：在不使用 Java 现有队列 API 的情况下，手写出一个队列的实现出来，队列的数据结构，入队和出队方式都自己定义。</p><p>这题其实考察的有几个点：</p><ol><li>考察你对队列的内部结构熟不熟悉；</li><li>考察你定义 API 的功底；</li><li>考察写代码的基本功，代码风格。</li></ol><p>本章就和大家一起，结合以上几点，手写一个队列出来，一起来熟悉一下思路和过程</p><h4 id="4-8-1-接口定义"><a href="#4-8-1-接口定义" class="headerlink" title="4.8.1-接口定义"></a>4.8.1-接口定义</h4><p>在实现队列之前，我们首先需要定义出队列的接口，就是我们常说的 API，API 是我们队列的门面，定义时主要原则就是简单和好用。</p><p>我们这次实现的队列只定义放数据和拿数据两个功能，接口定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 定义队列的接口，定义泛型，可以让使用者放任意类型到队列中去* author  wenhe* date 2019/9/1*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 放数据   * @param item 入参   * @return true 成功、false 失败   */</span>  <span class="token keyword">boolean</span> <span class="token function">put</span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 拿数据，返回一个泛型值   * @return   */</span>  T <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 队列中元素的基本结构</span>  <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据本身</span>    T item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个元素</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>有几点我们说明下：</p><ol><li><p>定义接口时，一定要写注释，接口的注释，方法的注释等等，这样别人看我们的接口时，会轻松很多‘；</p></li><li><p>定义接口时，要求命名简洁明了，最好让别人一看见命名就知道这个接口是干啥的，比如我们命名为 Queue，别人一看就清楚这个接口是和队列相关的；</p></li><li><p>用好泛型，因为我们不清楚放进队列中的到底都是那些值，所以我们使用了泛型 T，表示可以在队列中放任何值；</p></li><li><p>接口里面无需给方法写上 public 方法，因为接口中的方法默认都是 public 的，你写上编译器也会置灰，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpeg" alt="接口定义"></p></li><li><p>我们在接口中定义了基础的元素 Node，这样队列子类如果想用的话，可以直接使用，增加了复用的可能性。</p></li></ol><h4 id="4-8-2-队列子类实现"><a href="#4-8-2-队列子类实现" class="headerlink" title="4.8.2-队列子类实现"></a>4.8.2-队列子类实现</h4><p>接着我们就要开始写子类实现了，我们准备写个最常用的链表数据结构的队列。</p><h5 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h5><p>底层数据结构我们采用链表，一说到链表，大家应该马上就会想到三个关键要素：链表头、链表尾和链表元素，我们也实现了，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 队列头 */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 队列尾 */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义队列元素 */</span><span class="token keyword">class</span> <span class="token class-name">DIYNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">DIYNode</span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了这些元素之外，我们还有队列容器的容量大小、队列目前的使用大小、放数据锁、拿数据锁等等，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 队列的大小，使用 AtomicInteger 来保证其线程安全 */</span><span class="token keyword">private</span> AtomicInteger size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 容量 */</span><span class="token keyword">private</span> <span class="token keyword">final</span> Integer capacity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 放数据锁 */</span><span class="token keyword">private</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 拿数据锁 */</span><span class="token keyword">private</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h5><p>我们提供了使用默认容量（Integer 的最大值）和指定容量两种方式，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 无参数构造器，默认最大容量是 Integer.MAX_VALUE */</span><span class="token keyword">public</span> <span class="token function">DIYQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  capacity <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>  head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DIYNode</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 有参数构造器，可以设定容量的大小 * @param capacity */</span><span class="token keyword">public</span> <span class="token function">DIYQueue</span><span class="token punctuation">(</span>Integer capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 进行边界的校验</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> capacity <span class="token operator">||</span> capacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>  head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DIYNode</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="3-put-方法的实现"><a href="#3-put-方法的实现" class="headerlink" title="3.put 方法的实现"></a>3.put 方法的实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">put</span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 禁止空数据</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 尝试加锁，500 毫秒未获得锁直接被打断</span>    <span class="token keyword">boolean</span> lockSuccess <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lockSuccess<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 校验队列大小</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"queue is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 追加到队尾</span>    tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DIYNode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计数</span>    size<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"tryLock 500 timeOut"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"put error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>put 方法的实现有几点我们需要注意的是：</p><ol><li>注意 try catch finally 的节奏，catch 可以捕捉多种类型的异常，我们这里就捕捉了超时异常和未知异常，在 finally 里面一定记得要释放锁，不然锁不会自动释放的，这个一定不能用错，体现了我们代码的准确性；</li><li>必要的逻辑检查还是需要的，比如入参是否为空的空指针检查，队列是否满的临界检查，这些检查代码可以体现出我们逻辑的严密性；</li><li>在代码的关键地方加上日志和注释，这点也是非常重要的，我们不希望关键逻辑代码注释和日志都没有，不利于阅读代码和排查问题；</li><li>注意线程安全，此处实现我们除了加锁之外，对于容量的大小（size）我们选择线程安全的计数类：AtomicInteger，来保证了线程安全；</li><li>加锁的时候，我们最好不要使用永远阻塞的方法，我们一定要用带有超时时间的阻塞方法，此处我们设置的超时时间是 300 毫秒，也就是说如果 300 毫秒内还没有获得锁，put 方法直接返回 false，当然时间大小你可以根据情况进行设置；</li><li>根据不同的情况设置不同的返回值，put 方法返回的是 false，在发生异常时，我们可以选择返回 false，或者直接抛出异常；</li><li>put 数据时追加到队尾的，所以我们只需要把新数据转化成 DIYNode，放到队列的尾部即可。</li></ol><h5 id="4-take-方法的实现"><a href="#4-take-方法的实现" class="headerlink" title="4.take 方法的实现"></a>4.take 方法的实现</h5><p>take 方法和 put 方法的实现非常类似，只不过 take 是从头部拿取数据，代码实现如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 队列是空的，返回 null</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿数据我们设置的超时时间更短</span>    <span class="token keyword">boolean</span> lockSuccess <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lockSuccess<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"加锁失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把头结点的下一个元素拿出来</span>    Node expectHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把头结点的值拿出来</span>    T result <span class="token operator">=</span> head<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把头结点的值置为 null，帮助 gc</span>    head<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重新设置头结点的值</span>    head <span class="token operator">=</span> <span class="token punctuation">(</span>DIYNode<span class="token punctuation">)</span> expectHead<span class="token punctuation">;</span>    size<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回头结点的值</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" tryLock 200 timeOut"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" take error "</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>      takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过以上几步，我们的队列已经写完了。</p><h4 id="4-8-3-测试"><a href="#4-8-3-测试" class="headerlink" title="4.8.3-测试"></a>4.8.3-测试</h4><p>API 写好了，接下来我们要针对 API 写一些场景测试和单元测试，我们先写个场景测试，看看 API 能否跑通，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DIYQueueDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们需要测试的队列</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DIYQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生产者</span>  <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Product</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"put {} success"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"put {} fail"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"put {} fail"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 消费者</span>  <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumer message :{}"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumer message fail"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 场景测试</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDIYQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    ThreadPoolExecutor executor <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                               <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是偶数的话，就提交一个生产者，奇数的话提交一个消费者</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>代码测试的场景比较简单，从 0 开始循环到 1000，如果是偶数，就让生产者去生产数据，并放到队列中，如果是奇数，就让消费者去队列中拿数据出来进行消费，运行之后的结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%89%8B%E5%86%99%E9%98%9F%E5%88%97%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.jpeg" alt="手写队列测试结果"></p><p>从显示的结果来看，咱们写的 DIYQueue 没有太大的问题，当然如果想大规模的使用，还需要详细的单元测试和性能测试。</p><h4 id="4-8-4-总结"><a href="#4-8-4-总结" class="headerlink" title="4.8.4-总结"></a>4.8.4-总结</h4><p>通过本章的学习，不知道你有没有一种队列很简单的感觉，其实队列本身就很简单，没有想象的那么复杂。</p><p>只要我们懂得了队列的基本原理，清楚几种常用的数据结构，手写队列问题其实并不大，你也赶紧来试一试吧。</p><h2 id="5-线程"><a href="#5-线程" class="headerlink" title="5-线程"></a>5-线程</h2><h3 id="5-1-Thread-源码解析"><a href="#5-1-Thread-源码解析" class="headerlink" title="5.1-Thread 源码解析"></a>5.1-Thread 源码解析</h3><p>从本章开始我们开始学习线程的知识，线程是非常有趣的一个章节，大多数同学对于线程 API，属于不用就忘，到用时需要百度的情况，希望通过本小节的源码阅读，能够加深对线程的印象。</p><p>本小节主要三章，本章主要说线程的基本概念、使用姿势、Thread 和 Runnable 的源码；Future、ExecutorService 源码解析章节主要说异步线程执行；押宝线程源码面试题章节主要说说常遇到的源码面试题。</p><p>由于线程的概念很多，所以本章会先介绍很多线程的基本概念，说清楚后再解析源码。</p><h4 id="5-1-1-类注释"><a href="#5-1-1-类注释" class="headerlink" title="5.1.1-类注释"></a>5.1.1-类注释</h4><h5 id="1-Thread"><a href="#1-Thread" class="headerlink" title="1.Thread"></a>1.Thread</h5><ol><li><p>每个线程都有优先级，高优先级的线程可能会优先执行；</p></li><li><p>父线程创建子线程后，优先级、是否是守护线程等属性父子线程是一致的；</p></li><li><p>JVM 启动时，通常都启动 MAIN 非守护线程，以下任意一个情况发生时，线程就会停止：</p><p>退出方法被调用，并且安全机制允许这么做（比如调用 Thread.interrupt 方法）；</p><p>所有非守护线程都消亡，或者从运行的方法正常返回，或者运行的方法抛出了异常；</p></li><li><p>每个线程都有名字，多个线程可能具有相同的名字，Thread 有的构造器如果没有指定名字，会自动生成一个名字。</p></li></ol><h4 id="5-1-2-线程的基本概念"><a href="#5-1-2-线程的基本概念" class="headerlink" title="5.1.2-线程的基本概念"></a>5.1.2-线程的基本概念</h4><p>我们接下来介绍一下线程的基本概念：</p><h5 id="1-线程的状态"><a href="#1-线程的状态" class="headerlink" title="1.线程的状态"></a>1.线程的状态</h5><p>网上有各种介绍线程状态的文章，我们这里说线程的状态是从源码的角度，源码中一共列举了六种状态，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.jpeg" alt="线程的状态"></p><p>我们解析一下这个图：</p><ol><li>NEW 表示线程创建成功，但没有运行，在 new Thread 之后，没有 start 之前，线程的状态都是 NEW；</li><li>当我们运行 strat 方法，子线程被创建成功之后，子线程的状态变成 RUNNABLE，RUNNABLE 表示线程正在运行中；</li><li>子线程运行完成、被打断、被中止，状态都会从 RUNNABLE 变成 TERMINATED，TERMINATED 表示线程已经运行结束了；</li><li>如果线程正好在等待获得 monitor lock 锁，比如在等待进入 synchronized 修饰的代码块或方法时，会从 RUNNABLE 变成 BLOCKED，BLOCKED 表示阻塞的意思；</li><li>WAITING 和 TIMED_WAITING 类似，都表示在遇到 Object#wait、Thread#join、LockSupport#park 这些方法时，线程就会等待另一个线程执行完特定的动作之后，才能结束等待，只不过 TIMED_WAITING 是带有等待时间的（可以看下面的 join 方法的 demo）。</li></ol><p>再次重申，这 6 种状态并不是线程所有的状态，只是在 Java 源码中列举出的 6 种状态， Java 线程的处理方法都是围绕这 6 种状态的。</p><h5 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2.优先级"></a>2.优先级</h5><p>优先级代表线程执行的机会的大小，优先级高的可能先执行，低的可能后执行，在 Java 源码中，优先级从低到高分别是 1 到 10，线程默认 new 出来的优先级都是 5，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 最低优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MIN_PRIORITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 普通优先级，也是默认的</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NORM_PRIORITY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAX_PRIORITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><h5 id="3-守护线程"><a href="#3-守护线程" class="headerlink" title="3.守护线程"></a>3.守护线程</h5><p>我们默认创建的线程都是非守护线程。创建守护线程时，需要将 Thread 的 daemon 属性设置成 true，守护线程的优先级很低，当 JVM 退出时，是不关心有无守护线程的，即使还有很多守护线程，JVM 仍然会退出，我们在工作中，可能会写一些工具做一些监控的工作，这时我们都是用守护子线程去做，这样即使监控抛出异常，但因为是子线程，所以也不会影响到业务主线程，因为是守护线程，所以 JVM 也无需关注监控是否正在运行，该退出就退出，所以对业务不会产生任何影响。</p><h5 id="4-ClassLoader"><a href="#4-ClassLoader" class="headerlink" title="4.ClassLoader"></a>4.ClassLoader</h5><p>ClassLoader 我们可以简单理解成类加载器，就是把类从文件、二进制数组、URL 等位置加载成可运行 Class。</p><h4 id="5-1-3-线程的两种初始化方式"><a href="#5-1-3-线程的两种初始化方式" class="headerlink" title="5.1.3-线程的两种初始化方式"></a>5.1.3-线程的两种初始化方式</h4><p>无返回值的线程主要有两种初始化方式：</p><h5 id="1-继承-Thread，成为-Thread-的子类"><a href="#1-继承-Thread，成为-Thread-的子类" class="headerlink" title="1.继承 Thread，成为 Thread 的子类"></a>1.继承 Thread，成为 Thread 的子类</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继承 Thread，实现其 run 方法</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">// 调用 start 方法即可，会自动调用到 run 方法的</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendThreadInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述代码打印出的线程名称是：Thread-0，而主线程的名字是：Thread [main,5,main]，由此可见，的确是开了一个子线程来执行打印的操作。</p><p>我们一起来看下 start 的底层源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 该方法可以创建一个新的线程出来</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果没有初始化，抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// started 是个标识符，我们在做一些事情的时候，经常这么写</span>    <span class="token comment" spellcheck="true">// 动作发生之前标识符是 false，发生完成之后变成 true</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里会创建一个新的线程，执行完成之后，新的线程已经在运行了，既 target 的内容已经在运行了</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里执行的还是主线程</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果失败，把线程从线程组中删除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Throwable 可以捕捉一些 Exception 捕捉不到的异常，比如说子线程抛出的异常</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* do nothing. If start0 threw a Throwable then              it will be passed up the call stack */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 开启新线程使用的是 native 方法</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-实现-Runnable-接口，作为-Thread-的入参"><a href="#2-实现-Runnable-接口，作为-Thread-的入参" class="headerlink" title="2.实现 Runnable 接口，作为 Thread 的入参"></a>2.实现 Runnable 接口，作为 Thread 的入参</h5><pre class=" language-java"><code class="language-java">Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} begin run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开一个子线程去执行</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不会新起线程，是在当前主线程上继续运行</span>thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种就是实现 Runnable 的接口，并作为 Thread 构造器的入参，我们调用时使用了两种方式，可以根据情况选择使用 start 或 run 方法，使用 start 会开启子线程来执行 run 里面的内容，使用 run 方法执行的还是主线程。</p><p>我们来看下 run 方法的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 简单的运行，不会新起线程，target 是 Runnable</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>源码中的 target 就是在 new Thread 时，赋值的 Runnable。</p><h4 id="5-1-4-线程初始化"><a href="#5-1-4-线程初始化" class="headerlink" title="5.1.4-线程初始化"></a>5.1.4-线程初始化</h4><p>线程初始化的源码有点长，我们只看比较重要的代码 (不重要的被我删掉了)，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无参构造器，线程名字自动生成</span><span class="token keyword">public</span> <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// g 代表线程组，线程组可以对组内的线程进行批量的操作，比如批量的打断 interrupt</span><span class="token comment" spellcheck="true">// target 是我们要运行的对象</span><span class="token comment" spellcheck="true">// name 我们可以自己传，如果不传默认是 "Thread-" + nextThreadNum()，nextThreadNum 方法返回的是自增的数字</span><span class="token comment" spellcheck="true">// stackSize 可以设置堆栈的大小</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ThreadGroup g<span class="token punctuation">,</span> Runnable target<span class="token punctuation">,</span> String name<span class="token punctuation">,</span>                  <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> AccessControlContext acc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前线程作为父线程</span>    Thread parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> g<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 子线程会继承父线程的守护属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 子线程继承父线程的优先级属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// classLoader</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">isCCLOverridden</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span>contextClassLoader<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inheritedAccessControlContext <span class="token operator">=</span>            acc <span class="token operator">!=</span> null <span class="token operator">?</span> acc <span class="token operator">:</span> AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token function">setPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当父线程的 inheritableThreadLocals 的属性值不为空时</span>    <span class="token comment" spellcheck="true">// 会把 inheritableThreadLocals 里面的值全部传递给子线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>            ThreadLocal<span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Set thread ID */</span>    <span class="token comment" spellcheck="true">// 线程 id 自增</span>    tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从初始化源码中可以看到，很多属性，子线程都是直接继承父线程的，包括优先性、守护线程、inheritableThreadLocals 里面的值等等。</p><h4 id="5-1-5-线程其他操作"><a href="#5-1-5-线程其他操作" class="headerlink" title="5.1.5-线程其他操作"></a>5.1.5-线程其他操作</h4><h5 id="1-join"><a href="#1-join" class="headerlink" title="1. join"></a>1. join</h5><p>join 的意思就是当前线程等待另一个线程执行完成之后，才能继续操作，我们写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  Thread main <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} is run。"</span><span class="token punctuation">,</span>main<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} begin run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>30000L<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} end run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 开一个子线程去执行</span>  thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前主线程等待子线程执行完成之后再执行</span>  thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} is end"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行的结果，就是主线程在执行 thread.join (); 代码后会停住，会等待子线程沉睡 30 秒后再执行，这里的 join 的作用就是让主线程等待子线程执行完成，我们画一个图示意一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Thread-join%E8%BF%87%E7%A8%8B.jpeg" alt="Thread-join过程"></p><p>从图中可以看出，主线程一直等待子线程沉睡 30s 后才继续执行，在等待期间，主线程的状态也是 TIMED_WAITING。</p><h5 id="2-yield"><a href="#2-yield" class="headerlink" title="2.yield"></a>2.yield</h5><p>yield 是个 native 方法，底层代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>意思是当前线程做出让步，放弃当前 cpu，让 cpu 重新选择线程，避免线程过度使用 cpu，我们在写 while 死循环的时候，预计短时间内 while 死循环可以结束的话，可以在循环里面使用 yield 方法，防止 cpu 一直被 while 死循环霸占。</p><p>有点需要说明的是，让步不是绝不执行，重新竞争时，cpu 也有可能重新选中自己。</p><h5 id="3-sleep"><a href="#3-sleep" class="headerlink" title="3.sleep"></a>3.sleep</h5><p>sleep 也是 native 方法，可以接受毫秒的一个入参，也可以接受毫秒和纳秒的两个入参，意思是当前线程会沉睡多久，沉睡时不会释放锁资源，所以沉睡时，其它线程是无法得到锁的。</p><p>接受毫秒和纳秒两个入参时，如果给定纳秒大于等于 0.5 毫秒，算一个毫秒，否则不算。</p><h5 id="4-interrupt"><a href="#4-interrupt" class="headerlink" title="4.interrupt"></a>4.interrupt</h5><p>interrupt 中文是打断的意思，意思是可以打断中止正在运行的线程，比如：</p><ol><li>Object#wait ()、Thread#join ()、Thread#sleep (long) 这些方法运行后，线程的状态是 WAITING 或 TIMED_WAITING，这时候打断这些线程，就会抛出 InterruptedException 异常，使线程的状态直接到 TERMINATED；</li><li>如果 I/O 操作被阻塞了，我们主动打断当前线程，连接会被关闭，并抛出 ClosedByInterruptException 异常；</li></ol><p>我们举一个例子来说明如何打断 WAITING 的线程，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>  Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} begin run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子线程开始沉睡 30 s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>30000L<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子线程被打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} end run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 开一个子线程去执行</span>  thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"主线程等待 1s 后，发现子线程还没有运行成功，打断子线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>例子主要说的是，主线程会等待子线程执行 1s，如果 1s 内子线程还没有执行完，就会打断子线程，子线程被打断后，会抛出 InterruptedException 异常，执行结束，运行的结果如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%8A%9B%E5%BC%82%E5%B8%B8.jpeg" alt="线程中断抛异常"></p><h4 id="5-1-6-总结"><a href="#5-1-6-总结" class="headerlink" title="5.1.6-总结"></a>5.1.6-总结</h4><p>本章主要介绍了线程的基本概念、状态、无返回值线程的初始化方式和线程的常用操作，这些知识也是工作中常用的，也是大家都必须了解的，为后面的学习打下基础。</p><h3 id="5-2-Future、ExecutorService-源码解析"><a href="#5-2-Future、ExecutorService-源码解析" class="headerlink" title="5.2-Future、ExecutorService 源码解析"></a>5.2-Future、ExecutorService 源码解析</h3><p>本章和大家一起看下有返回值的线程如何创建，两种线程 API 之间如何关联，介绍一下和线程相关的其余 API。</p><h4 id="5-2-1-整体架构"><a href="#5-2-1-整体架构" class="headerlink" title="5.2.1-整体架构"></a>5.2.1-整体架构</h4><p>画了一个关于线程 API 之间关系的依赖图，如下：</p><p>![线程 API 关系依赖图](线程 API 关系依赖图.jpeg)</p><p>在上一章节，我们说了 Thread 和 Runnable，本小节我们按照这个图把剩下的几个 API 也说完，然后把 API 之间的关系理清楚。</p><p>为了方便大家更好的理解，我们首先看一个 demo，这个场景说的是我们往线程池里面提交一个有返回值的线程，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 首先我们创建了一个线程池</span>ThreadPoolExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                                     <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// futureTask 我们叫做线程任务，构造器的入参是 Callable</span>FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回一句话</span>    <span class="token keyword">return</span> <span class="token string">"我是子线程"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把任务提交到线程池中，线程池会分配线程帮我们执行任务</span>executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到任务执行的结果</span>String result <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"result is {}"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从上面这个 demo 中，我们大概可以看出各个 API 的作用：</p><ol><li>Callable 定义我们需要做的事情，是可以有返回值的；</li><li>FutureTask 我们叫做任务，入参是 Callable，是对 Callable 的包装，方便线程池的使用；</li><li>最后通过 FutureTask.get() 得到子线程的计算结果。</li></ol><p>接着我们分别来看看各种 API 的底层实现。</p><h4 id="5-2-2-Callable"><a href="#5-2-2-Callable" class="headerlink" title="5.2.2-Callable"></a>5.2.2-Callable</h4><p>Callable 是一个接口，约定了线程要做的事情，和 Runnable 一样，不过这个线程任务是有返回值的，我们来看下接口定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    V <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>返回值是一个泛型，可以定义成任何类型，但我们使用的时候，都不会直接使用 Callable，而是会结合 FutureTask 一起使用。</p><h4 id="5-2-3-FutureTask"><a href="#5-2-3-FutureTask" class="headerlink" title="5.2.3-FutureTask"></a>5.2.3-FutureTask</h4><p>FutureTask 我们可以当做是线程运行的具体任务，从上图中，我们可以看到 FutureTask 实现了 RunnableFuture 接口，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>而 RunnableFuture 又实现了 Runnable, Future 两个接口，接下来我们先看 Future，再看 RunnableFuture，最后看 FutureTask。</p><h5 id="1-Future"><a href="#1-Future" class="headerlink" title="1.Future"></a>1.Future</h5><p>我们刚才说 Callable 是可以返回子线程执行结果的，在获取结果的时候，就需要用到 Future 接口了。</p><p>Future 接口注释上写了这些：</p><ol><li>定义了异步计算的接口，提供了计算是否完成的 check、等待完成和取回等多种方法；</li><li>如果想得到结果可以使用 get 方法，此方法(无参方法)会一直阻塞到异步任务计算完成；</li><li>取消可以使用 cancel 方法，但一旦任务计算完成，就无法被取消了。</li></ol><p>Future 接口定义了这些方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果任务已经成功了，或已经取消了，是无法再取消的，会直接返回取消成功(true)</span><span class="token comment" spellcheck="true">// 如果任务还没有开始进行时，发起取消，是可以取消成功的。</span><span class="token comment" spellcheck="true">// 如果取消时，任务已经在运行了，mayInterruptIfRunning 为 true 的话，就可以打断运行中的线程</span><span class="token comment" spellcheck="true">// mayInterruptIfRunning 为 false，表示不能打断直接返回</span><span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回线程是否已经被取消了，true 表示已经被取消了</span><span class="token comment" spellcheck="true">// 如果线程已经运行结束了，isCancelled 和 isDone 返回的都是 true</span><span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程是否已经运行结束了</span><span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等待结果返回</span><span class="token comment" spellcheck="true">// 如果任务被取消了，抛 CancellationException 异常</span><span class="token comment" spellcheck="true">// 如果等待过程中被打断了，抛 InterruptedException 异常</span>V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等待，但是带有超时时间的，如果超时时间外仍然没有响应，抛 TimeoutException 异常</span>V <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">;</span></code></pre><p>从接口上可以看出，Future 定义了各种方法对任务进行了管理，比如说取消任务，得到任务的计算结果等等。</p><h5 id="2-RunnableFuture"><a href="#2-RunnableFuture" class="headerlink" title="2.RunnableFuture"></a>2.RunnableFuture</h5><p>RunnableFuture 也是一个接口，定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>RunnableFuture 接口的最大目的，是让 Future 可以对 Runnable 进行管理，可以取消 Runnable，查看 Runnable 是否完成等等。</p><h5 id="3-统一-Callable-和-Runnable"><a href="#3-统一-Callable-和-Runnable" class="headerlink" title="3.统一 Callable 和 Runnable"></a>3.统一 Callable 和 Runnable</h5><p>我们现在清楚了，新建任务有两种方式，一种是无返回值的 Runnable，一种是有返回值的 Callable，但对 Java 其他 API 来说使用起来并不是很方便，没有一个统一的接口，比如说线程池在提交任务时，是不是应该针对 Runnable 和 Callable 两种情况提供不同的实现思路呢？所以 FutureTask 出现了，FutureTask 实现了 RunnableFuture 接口，又集合了 Callable（Callable 是 FutureTask 的属性），还提供了两者一系列的转化方法，这样 FutureTask 就统一了 Callable 和 Runnable，我们一起来细看下。</p><ul><li><h6 id="FutureTask-的类定义"><a href="#FutureTask-的类定义" class="headerlink" title="FutureTask 的类定义"></a>FutureTask 的类定义</h6><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>从类定义上可以看出来 FutureTask 实现了 RunnableFuture 接口，也就是说间接实现了 Runnnable 接口（RunnableFuture 实现了 Runnnable 接口），就是说 FutureTask 本身就是个 Runnnable，同时 FutureTask 也实现了 Future，也就是说 FutureTask 具备对任务进行管理的功能（Future 具备对任务进行管理的功能）。</p></li><li><h6 id="FutureTask-的属性"><a href="#FutureTask-的属性" class="headerlink" title="FutureTask 的属性"></a>FutureTask 的属性</h6><p>我们一起来看下 FutureTask 有哪些重要属性：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 任务状态</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NEW          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程任务创建</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COMPLETING   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任务执行中</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORMAL       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任务执行结束</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCEPTIONAL  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任务异常</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任务取消成功</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTING <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任务正在被打断中</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTED  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任务被打断成功</span><span class="token comment" spellcheck="true">// 组合了 Callable </span><span class="token keyword">private</span> Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 异步线程返回的结果</span><span class="token keyword">private</span> Object outcome<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前任务所运行的线程</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> Thread runner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 记录调用 get 方法时被等待的线程</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> WaitNode waiters<span class="token punctuation">;</span></code></pre><p>从属性上我们明显看到 Callable 是作为 FutureTask 的属性之一，这也就让 FutureTask 具备了转化 Callable 和 Runnable 的功能，接着我们看下 FutureTask 的构造器，看看两者是如何转化的。</p></li><li><h6 id="FutureTask-的构造器"><a href="#FutureTask-的构造器" class="headerlink" title="FutureTask 的构造器"></a>FutureTask 的构造器</h6><p>FutureTask 有两个构造器，分别接受 Callable 和 Runnable，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用 Callable 进行初始化</span><span class="token keyword">public</span> <span class="token function">FutureTask</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callable <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> callable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 任务状态初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// ensure visibility of callable</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用 Runnable 初始化，并传入 result 作为返回结果。</span><span class="token comment" spellcheck="true">// Runnable 是没有返回值的，所以 result 一般没有用，置为 null 就好了</span><span class="token keyword">public</span> <span class="token function">FutureTask</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">,</span> V result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Executors.callable 方法把 runnable 适配成 RunnableAdapter，RunnableAdapter 实现了 callable，所以也就是把 runnable 直接适配成了 callable。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">callable</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// ensure visibility of callable</span><span class="token punctuation">}</span></code></pre><p>Runnable 的两个构造器，只有一个目的，就是把入参都转化成 Callable，那么为什么不都转化成 Runnnable 呢？主要是因为 Callable 的功能比 Runnnable 丰富，Callable 有返回值，而 Runnnable 没有。</p><p>我们注意到入参是 Runnable 的构造器，会使用 Executors.callable 方法来把 Runnnable 转化成 Callable，Runnnable 和 Callable 两者都是接口，两者之间是无法进行转化的，所以 Java 新建了一个转化类：RunnableAdapter 来进行转化，我们来看下转化的逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转化 Runnable 成 Callable 的工具类</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RunnableAdapter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Runnable task<span class="token punctuation">;</span>    <span class="token keyword">final</span> T result<span class="token punctuation">;</span>    <span class="token function">RunnableAdapter</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到：</p><ol><li>首先 RunnableAdapter 实现了 Callable，所以 RunnableAdapter 就是 Callable；</li><li>其次 Runnable 是 RunnableAdapter 的一个属性，在构造 RunnableAdapter 的时候会传进来，并且在 call 方法里面调用 Runnable 的 run 方法。</li></ol><p>这是一个典型的适配模型，我们要把 Runnable 适配成 Callable，首先要实现 Callable 的接口，接着在 Callable 的 call 方法里面调用被适配对象（Runnable）的方法。</p><p>FutureTask 构造器设计很巧妙，将 Runnable 和 Callable 灵活的打通，向内和向外只提供功能更加丰富的 Callable 接口，值得我们学习。</p></li><li><h6 id="FutureTask-对-Future-接口方法的实现"><a href="#FutureTask-对-Future-接口方法的实现" class="headerlink" title="FutureTask 对 Future 接口方法的实现"></a>FutureTask 对 Future 接口方法的实现</h6><p>我们主要看几个关键的方法实现源码。</p><ul><li><p>get</p><p>get 有无限阻塞和带超时时间两种方法，我们通常建议使用带超时时间的方法，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果任务已经在执行中了，并且等待一定的时间后，仍然在执行中，直接抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> COMPLETING <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> COMPLETING<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 任务执行成功，返回执行的结果</span>    <span class="token keyword">return</span> <span class="token function">report</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等待任务执行完成</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算等待终止时间，如果一直等待的话，终止时间为 0</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> 0L<span class="token punctuation">;</span>    WaitNode q <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不排队</span>    <span class="token keyword">boolean</span> queued <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无限循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果线程已经被打断了，删除，抛异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前任务状态</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前任务已经执行完了，返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> COMPLETING<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前任务的线程置空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span>                q<span class="token punctuation">.</span>thread <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果正在执行，当前线程让出 cpu，重新竞争，防止 cpu 飙高</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> COMPLETING<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cannot time out yet</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果第一次运行，新建 waitNode，当前线程就是 waitNode 的属性</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> null<span class="token punctuation">)</span>            q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 默认第一次都会执行这里，执行成功之后，queued 就为 true，就不会再执行了</span>            <span class="token comment" spellcheck="true">// 把当前 waitNode 当做 waiters 链表的第一个</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queued<span class="token punctuation">)</span>            queued <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span>                                                 q<span class="token punctuation">.</span>next <span class="token operator">=</span> waiters<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果设置了超时时间，并过了超时时间的话，从 waiters 链表中删除当前 wait</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> state<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没有过超时时间，线程进入 TIMED_WAITING 状态</span>            LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 没有设置超时时间，进入 WAITING 状态</span>        <span class="token keyword">else</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>get 方法虽然名字叫做 get，但却做了很多 wait 的事情，当发现任务还在进行中，没有完成时，就会阻塞当前进程，等待任务完成后再返回结果值。阻塞底层使用的是 LockSupport.park 方法，使当前线程进入 WAITING 或 TIMED_WAITING 状态。</p></li><li><p>run</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * run 方法可以直接被调用 * 也可以开启新的线程进行调用 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 状态不是任务创建，或者当前任务已经有线程在执行了，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span>        <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                     null<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Callable 不为空，并且已经初始化完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V result<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> ran<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用执行</span>                result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> null<span class="token punctuation">;</span>                ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 给 outcome 赋值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ran<span class="token punctuation">)</span>                <span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        runner <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>            <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>run 方法我们再说明几点：</p><ol><li>run 方法是没有返回值的，通过给 outcome 属性赋值（set(result)），get 时就能从 outcome 属性中拿到返回值；</li><li>FutureTask 两种构造器，最终都转化成了 Callable，所以在 run 方法执行的时候，只需要执行 Callable 的 call 方法即可，在执行 c.call() 代码时，如果入参是 Runnable 的话， 调用路径为 c.call() -&gt; RunnableAdapter.call() -&gt; Runnable.run()，如果入参是 Callable 的话，直接调用。</li></ol></li><li><p>cancel</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 取消任务，如果正在运行，尝试去打断</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>state <span class="token operator">==</span> NEW <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//任务状态不是创建 并且不能把 new 状态置为取消，直接返回 false</span>          UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> NEW<span class="token punctuation">,</span>              mayInterruptIfRunning <span class="token operator">?</span> INTERRUPTING <span class="token operator">:</span> CANCELLED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进行取消操作，打断可能会抛出异常，选择 try finally 的结构</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// in case call to interrupt throws exception</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mayInterruptIfRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread t <span class="token operator">=</span> runner<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// final state</span>                <span class="token comment" spellcheck="true">//状态设置成已打断</span>                UNSAFE<span class="token punctuation">.</span><span class="token function">putOrderedInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> INTERRUPTED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 清理线程</span>        <span class="token function">finishCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="5-2-4-总结"><a href="#5-2-4-总结" class="headerlink" title="5.2.4-总结"></a>5.2.4-总结</h4><p>大家现在可以回头看看一开始我们贴出来的图，看看自己照着图能否想起来各个 API 的作用，比如 Callable 是干啥的，FutureTask 又有什么作用，Runnable 和 Calllable 之间又是如何关联起来，几个 API 之间的关系的确很复杂，FutureTask 是关键，通过 FutureTask 把 Runnnable、Callable、Future 都串起来了，使 FutureTask 具有三者的功能，统一了 Runnnable 和 Callable，更方便使用。</p><h3 id="5-3-线程源码面试题"><a href="#5-3-线程源码面试题" class="headerlink" title="5.3-线程源码面试题"></a>5.3-线程源码面试题</h3><p>关于线程方面的面试题，大部分都是概念题，我们需要大概的清楚这些概念，和面试官达成共识即可，本章我们一起来看下这些面试题，对前两章的学习进行巩固。</p><h4 id="5-3-1-面试题"><a href="#5-3-1-面试题" class="headerlink" title="5.3.1-面试题"></a>5.3.1-面试题</h4><h5 id="1-创建子线程时，子线程是得不到父线程的-ThreadLocal，有什么办法可以解决这个问题？"><a href="#1-创建子线程时，子线程是得不到父线程的-ThreadLocal，有什么办法可以解决这个问题？" class="headerlink" title="1.创建子线程时，子线程是得不到父线程的 ThreadLocal，有什么办法可以解决这个问题？"></a>1.创建子线程时，子线程是得不到父线程的 ThreadLocal，有什么办法可以解决这个问题？</h5><p>答：这道题主要考察线程的属性和创建过程，可以这么回答。</p><p>可以使用 InheritableThreadLocal 来代替 ThreadLocal，ThreadLocal 和 InheritableThreadLocal 都是线程的属性，所以可以做到线程之间的数据隔离，在多线程环境下我们经常使用，但在有子线程被创建的情况下，父线程 ThreadLocal 是无法传递给子线程的，但 InheritableThreadLocal 可以，主要是因为在线程创建的过程中，会把</p><p>InheritableThreadLocal 里面的所有值传递给子线程，具体代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当父线程的 inheritableThreadLocals 的值不为空时</span><span class="token comment" spellcheck="true">// 会把 inheritableThreadLocals 里面的值全部传递给子线程</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>        ThreadLocal<span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-线程创建有几种实现方式？"><a href="#2-线程创建有几种实现方式？" class="headerlink" title="2.线程创建有几种实现方式？"></a>2.线程创建有几种实现方式？</h5><p>答：主要有三种，分成两大类，第一类是子线程没有返回值，第二类是子线程有返回值。</p><p>无返回值的线程有两种写法，第一种是继承 Thread，可以这么写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendThreadInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二种是实现 Runnable 接口，并作为 Thread 构造器的入参，代码如下：</p><pre class=" language-java"><code class="language-java">Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} begin run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开一个子线程去执行</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这两种都会开一个子线程去执行任务，并且是没有返回值的，如果需要子线程有返回值，需要使用 Callable 接口，但 Callable 接口是无法直接作为 Thread 构造器的入参的，必须结合 FutureTask 一起使用，可以这样写代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testThreadByCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>  FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String result <span class="token operator">=</span> <span class="token string">"我是子线程"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子线程正在运行：{}"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"返回的结果是 {}"</span><span class="token punctuation">,</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把 FutureTask 作为 Thread 的入参就可以了，FutureTask 组合了 Callable ，使我们可以使用 Callable，并且 FutureTask 实现了 Runnable 接口，使其可以作为 Thread 构造器的入参，还有 FutureTask 实现了 Future，使其对任务有一定的管理功能。</p><h5 id="3-线程-1-去等待子线程-2-执行完成之后才能执行，如何去实现？"><a href="#3-线程-1-去等待子线程-2-执行完成之后才能执行，如何去实现？" class="headerlink" title="3.线程 1 去等待子线程 2 执行完成之后才能执行，如何去实现？"></a>3.线程 1 去等待子线程 2 执行完成之后才能执行，如何去实现？</h5><p>答：这里考察的就是 Thread.join 方法，我们可以这么做：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJoin2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是子线程 2,开始沉睡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是子线程 2，执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是子线程 1，开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是子线程 1，我在等待子线程 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里是代码关键  </span>      thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是子线程 1，子线程 2 执行完成，我继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是子线程 1，执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>子线程 1 需要等待子线程 2，只需要子线程 1 运行的时候，调用子线程 2 的 join 方法即可，这样线程 1 执行到 join 代码时，就会等待线程 2 执行完成之后，才会继续执行。</p><h5 id="4-守护线程和非守护线程的区别？如果我想在项目启动的时候收集代码信息，请问是守护线程好，还是非守护线程好，为什么？"><a href="#4-守护线程和非守护线程的区别？如果我想在项目启动的时候收集代码信息，请问是守护线程好，还是非守护线程好，为什么？" class="headerlink" title="4.守护线程和非守护线程的区别？如果我想在项目启动的时候收集代码信息，请问是守护线程好，还是非守护线程好，为什么？"></a>4.守护线程和非守护线程的区别？如果我想在项目启动的时候收集代码信息，请问是守护线程好，还是非守护线程好，为什么？</h5><p>答：两者的主要区别是，在 JVM 退出时，JVM 是不会管守护线程的，只会管非守护线程，如果非守护线程还有在运行的，JVM 就不会退出，如果没有非守护线程了，但还有守护线程的，JVM 直接退出。</p><p>如果需要在项目启动的时候收集代码信息，就需要看收集工作是否重要了，如果不太重要，又很耗时，就应该选择守护线程，这样不会妨碍 JVM 的退出，如果收集工作非常重要的话，那么就需要非守护进程，这样即使启动时发生未知异常，JVM 也会等到代码收集信息线程结束后才会退出，不会影响收集工作。</p><h5 id="5-线程-start-和-run-之间的区别。"><a href="#5-线程-start-和-run-之间的区别。" class="headerlink" title="5.线程 start 和 run 之间的区别。"></a>5.线程 start 和 run 之间的区别。</h5><p>答：调用 Thread.start 方法会开一个新的线程，run 方法不会。</p><h5 id="6-Thread、Runnable、Callable-三者之间的区别。"><a href="#6-Thread、Runnable、Callable-三者之间的区别。" class="headerlink" title="6.Thread、Runnable、Callable 三者之间的区别。"></a>6.Thread、Runnable、Callable 三者之间的区别。</h5><p>答：Thread 实现了 Runnable，本身就是 Runnable，但同时负责线程创建、线程状态变更等操作。</p><p>Runnable 是无返回值任务接口，Callable 是有返回值任务接口，如果任务需要跑起来，必须需要 Thread 的支持才行，Runnable 和 Callable 只是任务的定义，具体执行还需要靠 Thread。</p><h5 id="6-Thread、Runnable、Callable-三者之间的区别。-1"><a href="#6-Thread、Runnable、Callable-三者之间的区别。-1" class="headerlink" title="6.Thread、Runnable、Callable 三者之间的区别。"></a>6.Thread、Runnable、Callable 三者之间的区别。</h5><p>答：Thread 实现了 Runnable，本身就是 Runnable，但同时负责线程创建、线程状态变更等操作。</p><p>Runnable 是无返回值任务接口，Callable 是有返回值任务接口，如果任务需要跑起来，必须需要 Thread 的支持才行，Runnable 和 Callable 只是任务的定义，具体执行还需要靠 Thread。</p><h5 id="7-线程池-submit-有两个方法，方法一可接受-Runnable，方法二可接受-Callable，但两个方法底层的逻辑却是同一套，这是如何适配的。"><a href="#7-线程池-submit-有两个方法，方法一可接受-Runnable，方法二可接受-Callable，但两个方法底层的逻辑却是同一套，这是如何适配的。" class="headerlink" title="7.线程池 submit 有两个方法，方法一可接受 Runnable，方法二可接受 Callable，但两个方法底层的逻辑却是同一套，这是如何适配的。"></a>7.线程池 submit 有两个方法，方法一可接受 Runnable，方法二可接受 Callable，但两个方法底层的逻辑却是同一套，这是如何适配的。</h5><p>答：问题考察点在于 Runnable 和 Callable 之间是如何转化的，可以这么回答。</p><p>Runnable 和 Callable 是通过 FutureTask 进行统一的，FutureTask 有个属性是 Callable，同时也实现了 Runnable 接口，两者的统一转化是在 FutureTask 的构造器里实现的，FutureTask 的最终目标是把 Runnable 和 Callable 都转化成 Callable，Runnable 转化成 Callable 是通过 RunnableAdapter 适配器进行实现的。</p><p>线程池的 submit 底层的逻辑只认 FutureTask，不认 Runnable 和 Callable 的差异，所以只要都转化成 FutureTask，底层实现都会是同一套。</p><p>具体 Runnable 转化成 Callable 的代码和逻辑可以参考上一章，有非常详细的描述。</p><h5 id="8-Callable-能否丢给-Thread-去执行？"><a href="#8-Callable-能否丢给-Thread-去执行？" class="headerlink" title="8.Callable 能否丢给 Thread 去执行？"></a>8.Callable 能否丢给 Thread 去执行？</h5><p>答：可以的，可以新建 Callable，并作为 FutureTask 的构造器入参，然后把 FutureTask 丢给 Thread 去执行即可。</p><h5 id="9-FutureTask-有什么作用-谈谈对-FutureTask-的理解-。"><a href="#9-FutureTask-有什么作用-谈谈对-FutureTask-的理解-。" class="headerlink" title="9.FutureTask 有什么作用(谈谈对 FutureTask 的理解)。"></a>9.FutureTask 有什么作用(谈谈对 FutureTask 的理解)。</h5><p>答：作用如下：</p><ol><li>组合了 Callable，实现了 Runnable，把 Callable 和 Runnnable 串联了起来。</li><li>统一了有参任务和无参任务两种定义方式，方便了使用。</li><li>实现了 Future 的所有方法，对任务有一定的管理功能，比如说拿到任务执行结果，取消任务，打断任务等等。</li></ol><h5 id="10-聊聊对-FutureTask-的-get、cancel-方法的理解"><a href="#10-聊聊对-FutureTask-的-get、cancel-方法的理解" class="headerlink" title="10.聊聊对 FutureTask 的 get、cancel 方法的理解"></a>10.聊聊对 FutureTask 的 get、cancel 方法的理解</h5><p>答：get 方法主要作用是得到 Callable 异步任务执行的结果，无参 get 会一直等待任务执行完成之后才返回，有参 get 方法可以设定固定的时间，在设定的时间内，如果任务还没有执行成功，直接返回异常，在实际工作中，建议多多使用 get 有参方法，少用 get 无参方法，防止任务执行过慢时，多数线程都在等待，造成线程耗尽的问题。</p><p>cancel 方法主要用来取消任务，如果任务还没有执行，是可以取消的，如果任务已经在执行过程中了，你可以选择不取消，或者直接打断执行中的任务。</p><p>两个方法具体的执行步骤和原理见上一章节源码解析。</p><h5 id="11-Thread-yield-方法在工作中有什么用？"><a href="#11-Thread-yield-方法在工作中有什么用？" class="headerlink" title="11.Thread.yield 方法在工作中有什么用？"></a>11.Thread.yield 方法在工作中有什么用？</h5><p>答：yield 方法表示当前线程放弃 cpu，重新参与到 cpu 的竞争中去，再次竞争时，自己有可能得到 cpu 资源，也有可能得不到，这样做的好处是防止当前线程一直霸占 cpu。</p><p>我们在工作中可能会写一些 while 自旋的代码，如果我们一直 while 自旋，不采取任何手段，我们会发现 cpu 一直被当前 while 循环占用，如果能预见 while 自旋时间很长，我们会设置一定的判断条件，让当前线程陷入阻塞，如果能预见 while 自旋时间很短，我们通常会使用 Thread.yield 方法，使当前自旋线程让步，不一直霸占 cpu，比如这样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// dosomething</span>  Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="12-wait-和sleep-的相同点和区别"><a href="#12-wait-和sleep-的相同点和区别" class="headerlink" title="12.wait()和sleep()的相同点和区别?"></a>12.wait()和sleep()的相同点和区别?</h5><p>答：相同点：</p><ol><li>两者都让线程进入到 TIMED_WAITING 状态，并且可以设置等待的时间。</li></ol><p>不同点：</p><ol><li>wait 是 Object 类的方法，sleep 是 Thread 类的方法。</li><li>sleep 不会释放锁，沉睡的时候，其它线程是无法获得锁的，但 wait 会释放锁。</li></ol><h5 id="13-写一个简单的死锁-demo"><a href="#13-写一个简单的死锁-demo" class="headerlink" title="13.写一个简单的死锁 demo"></a>13.写一个简单的死锁 demo</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 共享变量 1</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object share1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 共享变量 2</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object share2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化线程 1，线程 1 需要在锁定 share1 共享资源的情况下再锁定 share2</span>  Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>share1<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>share2<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} is run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化线程 2，线程 2 需要在锁定 share2 共享资源的情况下再锁定 share1</span>  Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>share2<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>share1<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} is run"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当线程 1、2 启动后，都在等待对方锁定的资源，但都得不到，造成死锁</span>  thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-3-2-总结"><a href="#5-3-2-总结" class="headerlink" title="5.3.2-总结"></a>5.3.2-总结</h4><p>线程章节算是中等难度，我们需要清楚线程的概念，线程如何初始化，线程的状态变更等等问题，这些知识点都是线程池、锁的基础，学好线程后，再学习线程池和锁就会轻松很多。</p><h2 id="6-锁"><a href="#6-锁" class="headerlink" title="6-锁"></a>6-锁</h2><h3 id="6-1-AbstractQueuedSynchronizer-源码解析"><a href="#6-1-AbstractQueuedSynchronizer-源码解析" class="headerlink" title="6.1-AbstractQueuedSynchronizer 源码解析"></a>6.1-AbstractQueuedSynchronizer 源码解析</h3><p>AbstractQueuedSynchronizer 中文翻译叫做同步器，简称 AQS，是各种各样锁的基础，比如说 ReentrantLock、CountDownLatch 等等，这些我们经常用的锁底层实现都是 AQS，所以学好 AQS 对于后面理解锁的实现是非常重要的。</p><p>ps：本章内容需要大量队列基础知识，没有看过第四章节队列的同学，建议先阅读下队列章节。</p><h4 id="6-1-1-整体架构"><a href="#6-1-1-整体架构" class="headerlink" title="6.1.1-整体架构"></a>6.1.1-整体架构</h4><p>首先我们来看一下 AQS 的整体架构图，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/AbstractQueuedSynchronizer%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.jpeg" alt="AbstractQueuedSynchronizer整体架构"></p><p>这个图总结了 AQS 整体架构的组成，和部分场景的动态流向，图中两个点说明一下，方便大家观看。</p><ol><li>AQS 中队列只有两个：同步队列 + 条件队列，底层数据结构两者都是链表；</li><li>图中有四种颜色的线代表四种不同的场景，1、2、3 序号代表看的顺序。</li></ol><p>AQS 本身就是一套锁的框架，它定义了获得锁和释放锁的代码结构，所以如果要新建锁，只要继承 AQS，并实现相应方法即可。</p><p>接下来我们一起来看下这个图中各个细节点。</p><h5 id="1-类注释-6"><a href="#1-类注释-6" class="headerlink" title="1.类注释"></a>1.类注释</h5><p>首先我们来看一下，从 AQS 类注释上，我们可以得到哪些信息：</p><ol><li>提供了一种框架，自定义了先进先出的同步队列，让获取不到锁的线程能进入同步队列中排队；</li><li>同步器有个状态字段，我们可以通过状态字段来判断能否得到锁，此时设计的关键在于依赖安全的 atomic value 来表示状态（虽然注释是这个意思，但实际上是通过把状态声明为 volatile，在锁里面修改状态值来保证线程安全的）；</li><li>子类可以通过给状态 CAS 赋值来决定能否拿到锁，可以定义那些状态可以获得锁，哪些状态表示获取不到锁（比如定义状态值是 0 可以获得锁，状态值是 1 就获取不到锁）；</li><li>子类可以新建非 public 的内部类，用内部类来继承 AQS，从而实现锁的功能；</li><li>AQS 提供了排它模式和共享模式两种锁模式。排它模式下：只有一个线程可以获得锁，共享模式可以让多个线程获得锁，子类 ReadWriteLock 实现了两种模式；</li><li>内部类 ConditionObject 可以被用作 Condition，我们通过 new ConditionObject () 即可得到条件队列；</li><li>AQS 实现了锁、排队、锁队列等框架，至于如何获得锁、释放锁的代码并没有实现，比如 tryAcquire、tryRelease、tryAcquireShared、tryReleaseShared、isHeldExclusively 这些方法，AQS 中默认抛 UnsupportedOperationException 异常，都是需要子类去实现的；</li><li>AQS 继承 AbstractOwnableSynchronizer 是为了方便跟踪获得锁的线程，可以帮助监控和诊断工具识别是哪些线程持有了锁；</li><li>AQS 同步队列和条件队列，获取不到锁的节点在入队时是先进先出，但被唤醒时，可能并不会按照先进先出的顺序执行。</li></ol><p>AQS 的注释还有很多很多，以上 9 点是挑选出来稍微比较重要的注释总结。</p><h5 id="2-类定义"><a href="#2-类定义" class="headerlink" title="2.类定义"></a>2.类定义</h5><p>AQS 类定义代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractQueuedSynchronizer</span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractOwnableSynchronizer</span>    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span></code></pre><p>可以看出两点：</p><ol><li><p>AQS 是个抽象类，就是给各种锁子类继承用的，AQS 定义了很多如何获得锁，如何释放锁的抽象方法，目的就是为了让子类去实现；</p></li><li><p>继承了 AbstractOwnableSynchronizer，AbstractOwnableSynchronizer 的作用就是为了知道当前是那个线程获得了锁，方便监控用的，代码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/AbstractOwnableSynchronizer.jpeg" alt="AbstractOwnableSynchronizer"></p></li></ol><h5 id="3-基本属性"><a href="#3-基本属性" class="headerlink" title="3.基本属性"></a>3.基本属性</h5><p>AQS 的属性可简单分为四类：同步器简单属性、同步队列属性、条件队列属性、公用 Node。</p><ul><li><h6 id="简单属性"><a href="#简单属性" class="headerlink" title="简单属性"></a>简单属性</h6><p>首先我们来看一下简单属性有哪些：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步器的状态，子类会根据状态字段进行判断是否可以获得锁</span><span class="token comment" spellcheck="true">// 比如 CAS 成功给 state 赋值 1 算得到锁，赋值失败为得不到锁， CAS 成功给 state 赋值 0 算释放锁，赋值失败为释放失败</span><span class="token comment" spellcheck="true">// 可重入锁，每次获得锁 +1，每次释放锁 -1</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自旋超时阀值，单位纳秒</span><span class="token comment" spellcheck="true">// 当设置等待时间时才会用到这个属性</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> spinForTimeoutThreshold <span class="token operator">=</span> 1000L<span class="token punctuation">;</span></code></pre><p>最重要的就是 state 属性，是 int 属性的，所有继承 AQS 的锁都是通过这个字段来判断能不能获得锁，能不能释放锁。</p></li><li><h6 id="同步队列属性"><a href="#同步队列属性" class="headerlink" title="同步队列属性"></a>同步队列属性</h6><p>首先我们介绍以下同步队列：当多个线程都来请求锁时，某一时刻有且只有一个线程能够获得锁（排它锁），那么剩余获取不到锁的线程，都会到同步队列中去排队并阻塞自己，当有线程主动释放锁时，就会从同步队列头开始释放一个排队的线程，让线程重新去竞争锁。</p><p>所以同步队列的主要作用阻塞获取不到锁的线程，并在适当时机释放这些线程。</p><p>同步队列底层数据结构是个双向链表，我们从源码中可以看到链表的头尾，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步队列的头。</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同步队列的尾</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span></code></pre><p>源码中的 Node 是同步队列中的元素，但 Node 被同步队列和条件队列公用，所以我们在说完条件队列之后再说 Node。</p></li><li><h6 id="条件队列的属性"><a href="#条件队列的属性" class="headerlink" title="条件队列的属性"></a>条件队列的属性</h6><p>首先我们介绍下条件队列：条件队列和同步队列的功能一样，管理获取不到锁的线程，底层数据结构也是链表队列，但条件队列不直接和锁打交道，但常常和锁配合使用，是一定的场景下，对锁功能的一种补充。</p><p>条件队列的属性如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 条件队列，从属性上可以看出是链表结构</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionObject</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1173984872572414699L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 条件队列中第一个 node</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node firstWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 条件队列中最后一个 node</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node lastWaiter<span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre><p>ConditionObject 我们就称为条件队列，我们需要使用时，直接 new ConditionObject () 即可。</p><p>ConditionObject 是实现 Condition 接口的，Condition 接口相当于 Object 的各种监控方法，比如 Object#wait ()、Object#notify、Object#notifyAll 这些方法，我们可以先这么理解，后面会细说。</p></li><li><h6 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h6><p>Node 非常重要，即是同步队列的节点，又是条件队列的节点，在入队的时候，我们用 Node 把线程包装一下，然后把 Node 放入两个队列中，我们看下 Node 的数据结构，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 同步队列单独的属性     */</span>    <span class="token comment" spellcheck="true">//node 是共享模式</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//node 是排它模式</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点的前节点</span>    <span class="token comment" spellcheck="true">// 节点 acquire 成功后就会变成head</span>    <span class="token comment" spellcheck="true">// head 节点不能被 cancelled</span>    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点的下一个节点</span>    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 两个队列共享的属性     */</span>    <span class="token comment" spellcheck="true">// 表示当前节点的状态，通过节点的状态来控制节点的行为</span>    <span class="token comment" spellcheck="true">// 普通同步节点，就是 0 ，条件节点是 CONDITION -2</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// waitStatus 的状态有以下几种</span>    <span class="token comment" spellcheck="true">// 被取消</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SIGNAL 状态的意义：同步队列中的节点在自旋获取锁的时候，如果前一个节点的状态是 SIGNAL，那么自己就可以阻塞休息了，否则自己一直自旋尝试获得锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 表示当前 node 正在条件队列中，当有节点从同步队列转移到条件队列时，状态就会被更改成 CONDITION</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无条件传播,共享模式下，该状态的进程处于可运行状态</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点的线程</span>    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在同步队列中，nextWaiter 并不真的是指向其下一个节点，我们用 next 表示同步队列的下一个节点，nextWaiter 只是表示当前 Node 是排它模式还是共享模式</span>    <span class="token comment" spellcheck="true">// 但在条件队列中，nextWaiter 就是表示下一个节点元素</span>    Node nextWaiter<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从 Node 的结构中，我们需要重点关注 waitStatus 字段，Node 的很多操作都是围绕着 waitStatus 字段进行的。</p><p>Node 的 pre、next 属性是同步队列中的链表前后指向字段，nextWaiter 是条件队列中下一个节点的指向字段，但在同步队列中，nextWaiter 只是一个标识符，表示当前节点是共享还是排它模式。</p></li><li><h6 id="共享锁和排它锁的区别"><a href="#共享锁和排它锁的区别" class="headerlink" title="共享锁和排它锁的区别"></a>共享锁和排它锁的区别</h6><p>排它锁的意思是同一时刻，只能有一个线程可以获得锁，也只能有一个线程可以释放锁。</p><p>共享锁可以允许多个线程获得同一个锁，并且可以设置获取锁的线程数量。</p></li></ul><h5 id="4-Condition"><a href="#4-Condition" class="headerlink" title="4.Condition"></a>4.Condition</h5><p>刚才我们看条件队列 ConditionObject 时，发现其是实现 Condition 接口的，现在我们一起来看下 Condition 接口，其类注释上是这么写的：</p><ol><li>当 lock 代替 synchronized 来加锁时，Condition 就可以用来代替 Object 中相应的监控方法了，比如 Object#wait ()、Object#notify、Object#notifyAll 这些方法；</li><li>提供了一种线程协作方式：一个线程被暂停执行，直到被其它线程唤醒；</li><li>Condition 实例是绑定在锁上的，通过 Lock#newCondition 方法可以产生该实例；</li><li>除了特殊说明外，任意空值作为方法的入参，都会抛出空指针；</li><li>Condition 提供了明确的语义和行为，这点和 Object 监控方法不同。</li></ol><p>类注释上甚至还给我们举了一个例子：</p><p>假设我们有一个有界边界的队列，支持 put 和 take 方法，需要满足：<br>1：如果试图往空队列上执行 take，线程将会阻塞，直到队列中有可用的元素为止；<br>2：如果试图往满的队列上执行 put，线程将会阻塞，直到队列中有空闲的位置为止。</p><p>1、2 中线程阻塞都会到条件队列中去阻塞。</p><p>take 和 put 两种操作如果依靠一个条件队列，那么每次只能执行一种操作，所以我们可以新建两个条件队列，这样就可以分别执行操作了，看了这个需求，是不是觉得很像我们第三章学习的队列？实际上注释上给的 demo 就是我们学习过的队列，篇幅有限，感兴趣的可以看看 ConditionDemo 这个测试类。</p><p>除了类注释，Condition 还定义出一些方法，这些方法奠定了条件队列的基础，方法主要有：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span></code></pre><p>这个方法的主要作用是：使当前线程一直等待，直到被 signalled 或被打断。</p><p>当以下四种情况发生时，条件队列中的线程将被唤醒</p><ol><li>有线程使用了 signal 方法，正好唤醒了条件队列中的当前线程；</li><li>有线程使用了 signalAll 方法；</li><li>其它线程打断了当前线程，并且当前线程支持被打断；</li><li>被虚假唤醒 (即使没有满足以上 3 个条件，wait 也是可能被偶尔唤醒，虚假唤醒定义可以参考： <a href="https://en.wikipedia.org/wiki/Spurious_wakeup)。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Spurious_wakeup)。</a></li></ol><p>被唤醒时，有一点需要注意的是：线程从条件队列中苏醒时，必须重新获得锁，才能真正被唤醒，这个我们在说源码的时候，也会强调这个。</p><p>await 方法还有带等待超时时间的，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 返回的 long 值表示剩余的给定等待时间，如果返回的时间小于等于 0 ，说明等待时间过了</span><span class="token comment" spellcheck="true">// 选择纳秒是为了避免计算剩余等待时间时的截断误差</span><span class="token keyword">long</span> <span class="token function">awaitNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 虽然入参可以是任意单位的时间，但底层仍然转化成纳秒</span><span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span></code></pre><p>除了等待方法，还是唤醒线程的两个方法，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 唤醒条件队列中的一个线程，在被唤醒前必须先获得锁</span><span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 唤醒条件队列中的所有线程</span><span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>至此，AQS 基本的属性就已经介绍完了，接着让我们来看一看 AQS 的重要方法。</p><h4 id="6-1-2-同步器的状态"><a href="#6-1-2-同步器的状态" class="headerlink" title="6.1.2-同步器的状态"></a>6.1.2-同步器的状态</h4><p>在同步器中，我们有两个状态，一个叫做 state，一个叫做 waitStatus，两者是完全不同的概念：</p><ol><li>state 是锁的状态，是 int 类型，子类继承 AQS 时，都是要根据 state 字段来判断有无得到锁，比如当前同步器状态是 0，表示可以获得锁，当前同步器状态是 1，表示锁已经被其他线程持有，当前线程无法获得锁；</li><li>waitStatus 是节点（Node）的状态，种类很多，一共有初始化 (0)、CANCELLED (1)、SIGNAL (-1)、CONDITION (-2)、PROPAGATE (-3)，各个状态的含义可以见上文。</li></ol><p>这两个状态我们需要牢记，不要混淆了。</p><h4 id="6-1-3-获取锁"><a href="#6-1-3-获取锁" class="headerlink" title="6.1.3-获取锁"></a>6.1.3-获取锁</h4><p>获取锁最直观的感受就是使用 Lock.lock () 方法来获得锁，最终目的是想让线程获得对资源的访问权。</p><p>Lock 一般是 AQS 的子类，lock 方法根据情况一般会选择调用 AQS 的 acquire 或 tryAcquire 方法。</p><p>acquire 方法 AQS 已经实现了，tryAcquire 方法是等待子类去实现，acquire 方法制定了获取锁的框架，先尝试使用 tryAcquire 方法获取锁，获取不到时，再入同步队列中等待锁。tryAcquire 方法 AQS 中直接抛出一个异常，表明需要子类去实现，子类可以根据同步器的 state 状态来决定是否能够获得锁，接下来我们详细看下 acquire 的源码解析。</p><p>acquire 也分两种，一种是排它锁，一种是共享锁，我们一一来看下：</p><h5 id="1-acquire-排它锁"><a href="#1-acquire-排它锁" class="headerlink" title="1.acquire 排它锁"></a>1.acquire 排它锁</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 排它模式下，尝试获得锁</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// tryAcquire 方法是需要实现类去实现的，实现思路一般都是 cas 给 state 赋值来决定是否能获得锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token comment" spellcheck="true">// addWaiter 入参代表是排他模式</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码的主要步骤是（流程见整体架构图中红色场景）：</p><ol><li>尝试执行一次 tryAcquire，如果成功直接返回，失败走 2；</li><li>线程尝试进入同步队列，首先调用 addWaiter 方法，把当前线程放到同步队列的队尾；</li><li>接着调用 acquireQueued 方法，两个作用，1：阻塞当前节点，2：节点被唤醒时，使其能够获得锁；</li><li>如果 2、3 失败了，打断线程。</li></ol><ul><li><h6 id="addWaiter"><a href="#addWaiter" class="headerlink" title="addWaiter"></a>addWaiter</h6><p>代码很少，每个方法都是关键，接下来我们先来看下 addWaiter 的源码实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法主要目的：node 追加到同步队列的队尾</span><span class="token comment" spellcheck="true">// 入参 mode 表示 Node 的模式（排它模式还是共享模式）</span><span class="token comment" spellcheck="true">// 出参是新增的 node</span><span class="token comment" spellcheck="true">// 主要思路：</span><span class="token comment" spellcheck="true">// 新 node.pre = 队尾</span><span class="token comment" spellcheck="true">// 队尾.next = 新 node</span><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化 Node</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里的逻辑和 enq 一致，enq 的逻辑仅仅多了队尾是空，初始化的逻辑</span>    <span class="token comment" spellcheck="true">// 这个思路在 java 源码中很常见，先简单的尝试放一下，成功立马返回，如果不行，再 while 循环</span>    <span class="token comment" spellcheck="true">// 很多时候，这种算法可以帮忙解决大部分的问题，大部分的入队可能一次都能成功，无需自旋</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//自旋保证node加入到队尾</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 线程加入同步队列中方法，追加到队尾</span><span class="token comment" spellcheck="true">// 这里需要重点注意的是，返回值是添加 node 的前一个节点</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到队尾节点</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果队尾为空，说明当前同步队列都没有初始化，进行初始化</span>        <span class="token comment" spellcheck="true">// tail = head = new Node();</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队尾不为空，将当前节点追加到队尾</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// node 追加到队尾</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果之前学习过队列的同学，对这个方法应该感觉毫不吃力，就是把新的节点追加到同步队列的队尾。</p><p>其中有一点值得我们学习的地方，是在 addWaiter 方法中，并没有进入方法后立马就自旋，而是先尝试一次追加到队尾，如果失败才自旋，因为大部分操作可能一次就会成功，这种思路在我们写自旋的时候可以借鉴。</p></li><li><h6 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued"></a>acquireQueued</h6><p>下一步就是要阻塞当前线程了，是 acquireQueued 方法来实现的，我们来看下源码实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主要做两件事情：</span><span class="token comment" spellcheck="true">// 1：通过不断的自旋尝试使自己前一个节点的状态变成 signal，然后阻塞自己。</span><span class="token comment" spellcheck="true">// 2：获得锁的线程执行完成之后，释放锁时，会把阻塞的 node 唤醒,node 唤醒之后再次自旋，尝试获得锁</span><span class="token comment" spellcheck="true">// 返回 false 表示获得锁成功，返回 true 表示失败</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自旋</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 选上一个节点</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 有两种情况会走到 p == head：</span>            <span class="token comment" spellcheck="true">// 1:node 之前没有获得锁，进入 acquireQueued 方法时，才发现他的前置节点就是头节点，于是尝试获得一次锁；</span>            <span class="token comment" spellcheck="true">// 2:node 之前一直在阻塞沉睡，然后被唤醒，此时唤醒 node 的节点正是其前一个节点，也能走到 if</span>            <span class="token comment" spellcheck="true">// 如果自己 tryAcquire 成功，就立马把自己设置成 head，把上一个节点移除</span>            <span class="token comment" spellcheck="true">// 如果 tryAcquire 失败，尝试进入同步队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获得锁，设置成 head 节点</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//p被回收</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// shouldParkAfterFailedAcquire 把 node 的前一个节点状态置为 SIGNAL</span>            <span class="token comment" spellcheck="true">// 只要前一个节点状态是 SIGNAL了，那么自己就可以阻塞(park)了</span>            <span class="token comment" spellcheck="true">// parkAndCheckInterrupt 阻塞当前线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token comment" spellcheck="true">// 线程是在这个方法里面阻塞的，醒来的时候仍然在无限 for 循环里面，就能再次自旋尝试获得锁</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果获得node的锁失败，将 node 从队列中移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此方法的注释还是很清楚的，我们接着看下此方法的核心：shouldParkAfterFailedAcquire，这个方法的主要目的就是把前一个节点的状态置为 SIGNAL，只要前一个节点的状态是 SIGNAL，当前节点就可以阻塞了（parkAndCheckInterrupt 就是使节点阻塞的方法），源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当前线程可以安心阻塞的标准，就是前一个节点线程状态是 SIGNAL 了。</span><span class="token comment" spellcheck="true">// 入参 pred 是前一个节点，node 是当前节点。</span><span class="token comment" spellcheck="true">// 关键操作：</span><span class="token comment" spellcheck="true">// 1：确认前一个节点是否有效，无效的话，一直往前找到状态不是取消的节点。</span><span class="token comment" spellcheck="true">// 2: 把前一个节点状态置为 SIGNAL。</span><span class="token comment" spellcheck="true">// 1、2 两步操作，有可能一次就成功，有可能需要外部循环多次才能成功（外面是个无限的 for 循环），但最后一定是可以成功的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果前一个节点 waitStatus 状态已经是 SIGNAL 了，直接返回，不需要在自旋了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*         * This node has already set status asking a release         * to signal it, so it can safely park.         */</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果当前节点状态已经被取消了。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * Predecessor was cancelled. Skip over predecessors and         * indicate retry.         */</span>        <span class="token comment" spellcheck="true">// 找到前一个状态不是取消的节点，因为把当前 node 挂在有效节点身上</span>        <span class="token comment" spellcheck="true">// 因为节点状态是取消的话，是无效的，是不能作为 node 的前置节点的，所以必须找到 node 的有效节点才行</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 否则直接把节点状态置 为SIGNAL</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * waitStatus must be 0 or PROPAGATE.  Indicate that we         * need a signal, but don't park yet.  Caller will need to         * retry to make sure it cannot acquire before parking.         */</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>acquire 整个过程非常长，代码也非常多，但注释很清楚，可以一行一行仔细看看代码。</p><p>总结一下，acquire 方法大致分为三步：</p><ol><li>使用 tryAcquire 方法尝试获得锁，获得锁直接返回，获取不到锁的走 2；</li><li>把当前线程组装成节点（Node），追加到同步队列的尾部（addWaiter）；</li><li>自旋，使同步队列中当前节点的前置节点状态为 signal 后，然后阻塞自己。</li></ol><p>整体的代码结构比较清晰，一些需要注意的点，都用注释表明了，强烈建议阅读下源码。</p></li></ul><h5 id="2-acquireShared-获取共享锁"><a href="#2-acquireShared-获取共享锁" class="headerlink" title="2.acquireShared 获取共享锁"></a>2.acquireShared 获取共享锁</h5><p>acquireShared 整体流程和 acquire 相同，代码也很相似，重复的源码就不贴了，我们就贴出来不一样的代码来，也方便大家进行比较：</p><ol><li><p>第一步尝试获得锁的地方，有所不同，排它锁使用的是 tryAcquire 方法，共享锁使用的是 tryAcquireShared 方法，如下图：</p><p>![acquireShared 获取共享锁1](acquireShared 获取共享锁1.jpeg)</p></li><li><p>第二步不同，在于节点获得排它锁时，仅仅把自己设置为同步队列的头节点即可（setHead 方法），但如果是共享锁的话，还会去唤醒自己的后续节点，一起来获得该锁（setHeadAndPropagate 方法），不同之处如下（左边排它锁，右边共享锁）：</p><p>![acquireShared 获取共享锁2](acquireShared 获取共享锁2.jpeg)</p></li></ol><p>接下来我们一起来看下 setHeadAndPropagate 方法的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主要做两件事情</span><span class="token comment" spellcheck="true">// 1:把当前节点设置成头节点</span><span class="token comment" spellcheck="true">// 2:看看后续节点有无正在等待，并且也是共享模式的，有的话唤醒这些节点</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> propagate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node h <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Record old head for check below</span>    <span class="token comment" spellcheck="true">// 当前节点设置成头节点</span>    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Try to signal next queued node if:     *   Propagation was indicated(表示指示) by caller,     *     or was recorded (as h.waitStatus either before     *     or after setHead) by a previous operation     *     (note: this uses sign-check of waitStatus because     *      PROPAGATE status may transition to SIGNAL.)     * and     *   The next node is waiting in shared mode,     *     or we don't know, because it appears null     *     * The conservatism(保守) in both of these checks may cause     * unnecessary wake-ups, but only when there are multiple     * racing acquires/releases, so most need signals now or soon     * anyway.     */</span>    <span class="token comment" spellcheck="true">// propagate > 0 表示已经有节点获得共享锁了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> h <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//共享模式，还唤醒头节点的后置节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 释放后置共享节点</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * Ensure that a release propagates, even if there are other     * in-progress acquires/releases.  This proceeds in the usual     * way of trying to unparkSuccessor of head if it needs     * signal. But if it does not, status is set to PROPAGATE to     * ensure that upon release, propagation continues.     * Additionally, we must loop in case a new node is added     * while we are doing this. Also, unlike other uses of     * unparkSuccessor, we need to know if CAS to reset status     * fails, if so rechecking.     */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 还没有到队尾，此时队列中至少有两个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果队列状态是 SIGNAL ，说明后续节点都需要唤醒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// CAS 保证只有一个节点可以运行唤醒的操作</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// loop to recheck cases</span>                <span class="token comment" spellcheck="true">// 进行唤醒操作</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                     <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// loop on failed CAS</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第一种情况，头节点没有发生移动，结束。</span>        <span class="token comment" spellcheck="true">// 第二种情况，因为此方法可以被两处调用，一次是获得锁的地方，一处是释放锁的地方，</span>        <span class="token comment" spellcheck="true">// 加上共享锁的特性就是可以多个线程获得锁，也可以释放锁，这就导致头节点可能会发生变化，</span>        <span class="token comment" spellcheck="true">// 如果头节点发生了变化，就继续循环，一直循环到头节点不变化时，结束循环。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// loop if head changed</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个就是共享锁独特的地方，当一个线程获得锁后，它就会去唤醒排在它后面的其它节点，让其它节点也能够获得锁。</p><h4 id="6-1-4-释放锁"><a href="#6-1-4-释放锁" class="headerlink" title="6.1.4-释放锁"></a>6.1.4-释放锁</h4><p>释放锁的触发时机就是我们常用的 Lock.unLock () 方法，目的就是让线程释放对资源的访问权（流程见整体架构图紫色路线）。</p><p>释放锁也是分为两类，一类是排它锁的释放，一类是共享锁的释放，我们分别来看下。</p><h5 id="1-释放排它锁-release"><a href="#1-释放排它锁-release" class="headerlink" title="1.释放排它锁 release"></a>1.释放排它锁 release</h5><p>排它锁的释放就比较简单了，从队头开始，找它的下一个节点，如果下一个节点是空的，就会从尾开始，一直找到状态不是取消的节点，然后释放该节点，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// unlock 的基础方法</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// tryRelease 交给实现类去实现，一般就是用当前同步器状态减去 arg，如果返回 true 说明成功释放锁。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 头节点不为空，并且非初始化状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 从头开始唤醒等待锁的节点</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 很有意思的方法，当线程释放锁成功后，从 node 开始唤醒同步队列中的节点</span><span class="token comment" spellcheck="true">// 通过唤醒机制,保证线程不会一直在同步队列中阻塞等待</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// node 节点是当前释放锁的节点，也是同步队列的头节点</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果节点已经被取消了，把节点的状态置为初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿出 node 节点的后面一个节点</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// s 为空，表示 node 的后一个节点为空</span>    <span class="token comment" spellcheck="true">// s.waitStatus 大于0，代表 s 节点已经被取消了</span>    <span class="token comment" spellcheck="true">// 遇到以上这两种情况，就从队尾开始，向前遍历，找到第一个 waitStatus 字段不是被取消的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里从尾迭代，而不是从头开始迭代是有原因的。</span>        <span class="token comment" spellcheck="true">// 主要是因为节点被阻塞的时候，是在 acquireQueued 方法里面被阻塞的，唤醒时也一定会在 acquireQueued 方法里面被唤醒，唤醒之后的条件是，判断当前节点的前置节点是否是头节点，这里是判断当前节点的前置节点，所以这里必须使用从尾到头的迭代顺序才行，目的就是为了过滤掉无效的前置节点，不然节点被唤醒时，发现其前置节点还是无效节点，就又会陷入阻塞。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// t.waitStatus &lt;= 0 说明 t 没有被取消，肯定还在等待被唤醒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 唤醒以上代码找到的线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-释放共享锁-releaseShared"><a href="#2-释放共享锁-releaseShared" class="headerlink" title="2.释放共享锁 releaseShared"></a>2.释放共享锁 releaseShared</h5><p>释放共享锁的方法是 releaseShared，主要分成两步：</p><ol><li>tryReleaseShared 尝试释放当前共享锁，失败返回 false，成功走 2；</li><li>唤醒当前节点的后续阻塞节点，这个方法我们之前看过了，线程在获得共享锁的时候，就会去唤醒其后面的节点，方法名称为：doReleaseShared。</li></ol><p>我们一起来看下 releaseShared 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 共享模式下，释放当前线程的共享锁</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个方法就是线程在获得锁时，唤醒后续节点时调用的方法</span>        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-1-5-条件队列的重要方法"><a href="#6-1-5-条件队列的重要方法" class="headerlink" title="6.1.5-条件队列的重要方法"></a>6.1.5-条件队列的重要方法</h4><p>在看条件队列的方法之前，我们先得弄明白为什么有了同步队列，还需要条件队列？</p><p>主要是因为并不是所有场景一个同步队列就可以搞定的，在遇到锁 + 队列结合的场景时，就需要 Lock + Condition 配合才行，先使用 Lock 来决定哪些线程可以获得锁，哪些线程需要到同步队列里面排队阻塞；获得锁的多个线程在碰到队列满或者空的时候，可以使用 Condition 来管理这些线程，让这些线程阻塞等待，然后在合适的时机后，被正常唤醒。</p><p>同步队列 + 条件队列联手使用的场景，最多被使用到锁 + 队列的场景中。</p><p>所以说条件队列也是不可或缺的一环。</p><p>接下来我们来看一下条件队列一些比较重要的方法，以下方法都在 ConditionObject 内部类中。</p><h5 id="1-入队列等待-await"><a href="#1-入队列等待-await" class="headerlink" title="1.入队列等待 await"></a>1.入队列等待 await</h5><p>获得锁的线程，如果在碰到队列满或空的时候，就会阻塞住，这个阻塞就是用条件队列实现的，这个动作我们叫做入条件队列，方法名称为 await，流程见整体架构图中深绿色箭头流向，我们一起来看下 await 的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程入条件队列</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加入到条件队列的队尾</span>    Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记位置 A</span>    <span class="token comment" spellcheck="true">// 加入条件队列后，会释放 lock 时申请的资源，唤醒同步队列队列头的节点</span>    <span class="token comment" spellcheck="true">// 自己马上就要阻塞了，必须马上释放之前 lock 的资源，不然自己不被唤醒的话，别的线程永远得不到该共享资源了</span>    <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 确认node不在同步队列上，再阻塞，如果 node 在同步队列上，是不能够上锁的</span>    <span class="token comment" spellcheck="true">// 目前想到的只有两种可能：</span>    <span class="token comment" spellcheck="true">// 1:node 刚被加入到条件队列中，立马就被其他线程 signal 转移到同步队列中去了</span>    <span class="token comment" spellcheck="true">// 2:线程之前在条件队列中沉睡，被唤醒后加入到同步队列中去</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this = AbstractQueuedSynchronizer$ConditionObject</span>        <span class="token comment" spellcheck="true">// 阻塞在条件队列上</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 标记位置 B</span>    <span class="token comment" spellcheck="true">// 其他线程通过 signal 已经把 node 从条件队列中转移到同步队列中的数据结构中去了</span>    <span class="token comment" spellcheck="true">// 所以这里节点苏醒了，直接尝试 acquireQueued</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>        interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// clean up if cancelled</span>        <span class="token comment" spellcheck="true">// 如果状态不是CONDITION，就会自动删除</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>await 方法有几点需要特别注意：</p><ol><li>上述代码标记位置 A 处，节点在准备进入条件队列之前，一定会先释放当前持有的锁，不然自己进去条件队列了，其余的线程都无法获得锁了；</li><li>上述代码标记位置 B 处，此时节点是被 Condition.signal 或者 signalAll 方法唤醒的，此时节点已经成功的被转移到同步队列中去了（整体架构图中蓝色流程），所以可以直接执行 acquireQueued 方法；</li><li>Node 在条件队列中的命名，源码喜欢用 Waiter 来命名，所以我们在条件队列中看到 Waiter，其实就是 Node。</li></ol><p>await 方法中有两个重要方法：addConditionWaiter 和 unlinkCancelledWaiters，我们一一看下。</p><ul><li><h6 id="addConditionWaiter"><a href="#addConditionWaiter" class="headerlink" title="addConditionWaiter"></a>addConditionWaiter</h6><p>addConditionWaiter 方法主要是把节点放到条件队列中，方法源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 增加新的 waiter 到队列中，返回新添加的 waiter</span><span class="token comment" spellcheck="true">// 如果尾节点状态不是 CONDITION 状态，删除条件队列中所有状态不是 CONDITION 的节点</span><span class="token comment" spellcheck="true">// 如果队列为空，新增节点作为队列头节点，否则追加到尾节点上</span><span class="token keyword">private</span> Node <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If lastWaiter is cancelled, clean out.</span>    <span class="token comment" spellcheck="true">// 如果尾部的 waiter 不是 CONDITION 状态了，删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新建条件队列 node</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列是空的，直接放到队列头</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span>        firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列不为空，直接到队列尾部</span>    <span class="token keyword">else</span>        t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>整体过程比较简单，就是追加到队列的尾部，其中有个重要方法叫做 unlinkCancelledWaiters，这个方法会删除掉条件队列中状态不是 CONDITION 的所有节点，我们来看下 unlinkCancelledWaiters 方法的源码，如下：</p></li><li><h6 id="unlinkCancelledWaiters"><a href="#unlinkCancelledWaiters" class="headerlink" title="unlinkCancelledWaiters"></a>unlinkCancelledWaiters</h6><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 会检查尾部的 waiter 是不是已经不是CONDITION状态了</span><span class="token comment" spellcheck="true">// 如果不是，删除这些 waiter</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node t <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// trail 表示上一个状态,这个字段作用非常大，可以把状态都是 CONDITION 的 node 串联起来，即使 node 之间有其他节点都可以</span>    Node trail <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node next <span class="token operator">=</span> t<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前node的状态不是CONDITION，删除自己</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//删除当前node</span>            t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 trail 是空的，咱们循环又是从头开始的，说明从头到当前节点的状态都不是 CONDITION</span>            <span class="token comment" spellcheck="true">// 都已经被删除了，所以移动队列头节点到当前节点的下一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trail <span class="token operator">==</span> null<span class="token punctuation">)</span>                firstWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果找到上次状态是CONDITION的节点的话，先把当前节点删掉，然后把自己挂到上一个状态是 CONDITION 的节点上</span>            <span class="token keyword">else</span>                trail<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历结束，最后一次找到的CONDITION节点就是尾节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                lastWaiter <span class="token operator">=</span> trail<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 状态是 CONDITION 的 Node</span>        <span class="token keyword">else</span>            trail <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继续循环，循环顺序从头到尾</span>        t <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了方便大家理解这个方法，画了一个释义图，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/unlinkCancelledWaiters.jpeg" alt="unlinkCancelledWaiters"></p></li></ul><h5 id="2-单个唤醒-signal"><a href="#2-单个唤醒-signal" class="headerlink" title="2.单个唤醒 signal"></a>2.单个唤醒 signal</h5><p>signal 方法是唤醒的意思，比如之前队列满了，有了一些线程因为 take 操作而被阻塞进条件队列中，突然队列中的元素被线程 A 消费了，线程 A 就会调用 signal 方法，唤醒之前阻塞的线程，会从条件队列的头节点开始唤醒（流程见整体架构图中蓝色部分），源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 唤醒阻塞在条件队列中的节点</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从头节点开始唤醒</span>    Node first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// doSignal 方法会把条件队列中的节点转移到同步队列中去</span>        <span class="token function">doSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把条件队列头节点转移到同步队列去</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// nextWaiter为空，说明到队尾了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            lastWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从队列头部开始唤醒，所以直接把头节点.next 置为 null，这种操作其实就是把 node 从条件队列中移除了</span>        <span class="token comment" spellcheck="true">// 这里有个重要的点是，每次唤醒都是从队列头部开始唤醒，所以把 next 置为 null 没有关系，如果唤醒是从任意节点开始唤醒的话，就会有问题，容易造成链表的割裂</span>        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// transferForSignal 方法会把节点转移到同步队列中去</span>        <span class="token comment" spellcheck="true">// 通过 while 保证 transferForSignal 能成功</span>        <span class="token comment" spellcheck="true">// 等待队列的 node 不用管他，在 await 的时候，会自动清除状态不是 Condition 的节点(通过 unlinkCancelledWaiters 方法)</span>        <span class="token comment" spellcheck="true">// (first = firstWaiter) != null  = true 的话，表示还可以继续循环， = false 说明队列中的元素已经循环完了</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   </code></pre><p>我们来看下最关键的方法：transferForSignal。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 返回 true 表示转移成功， false 失败</span><span class="token comment" spellcheck="true">// 大概思路：</span><span class="token comment" spellcheck="true">// 1. node 追加到同步队列的队尾</span><span class="token comment" spellcheck="true">// 2. 将 node 的前一个节点状态置为 SIGNAL，成功直接返回，失败直接唤醒</span><span class="token comment" spellcheck="true">// 可以看出来 node 的状态此时是 0 了</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * If cannot change waitStatus, the node has been cancelled.     */</span>    <span class="token comment" spellcheck="true">// 将 node 的状态从 CONDITION 修改成初始化，失败返回 false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前队列加入到同步队列，返回的 p 是 node 在同步队列中的前一个节点</span>    <span class="token comment" spellcheck="true">// 看命名是 p，实际是 pre 单词的缩写</span>    Node p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 状态修改成 SIGNAL，如果成功直接返回</span>    <span class="token comment" spellcheck="true">// 把当前节点的前一个节点修改成 SIGNAL 的原因，是因为 SIGNAL 本身就表示当前节点后面的节点都是需要被唤醒的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 如果 p 节点被取消，或者状态不能修改成SIGNAL，直接唤醒</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>整个源码下来，我们可以看到，唤醒条件队列中的节点，实际上就是把条件队列中的节点转移到同步队列中，并把其前置节点状态置为 SIGNAL。</p><h5 id="3-全部唤醒-signalAll"><a href="#3-全部唤醒-signalAll" class="headerlink" title="3.全部唤醒 signalAll"></a>3.全部唤醒 signalAll</h5><p>signalAll 的作用是唤醒条件队列中的全部节点，源码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拿到头节点</span>        Node first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 从头节点开始唤醒条件队列中所有的节点</span>            <span class="token function">doSignalAll</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把条件队列所有节点依次转移到同步队列去</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignalAll</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastWaiter <span class="token operator">=</span> firstWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拿出条件队列队列头节点的下一个节点</span>            Node next <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把头节点从条件队列中删除</span>            first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 头节点转移到同步队列中去</span>            <span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 开始循环头节点的下一个节点</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>从源码中可以看出，其本质就是 for 循环调用 transferForSignal 方法，将条件队列中的节点循环转移到同步队列中去。</p><h4 id="6-1-6-总结"><a href="#6-1-6-总结" class="headerlink" title="6.1.6-总结"></a>6.1.6-总结</h4><p>AQS 源码终于说完了，你都懂了么，可以在默默回忆一下 AQS 架构图，看看这张图现在能不能看懂了。</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/AQS%E6%9E%B6%E6%9E%84%E5%9B%BE.jpeg" alt="AQS架构图"></p><h3 id="6-2-ReentrantLock-源码解析"><a href="#6-2-ReentrantLock-源码解析" class="headerlink" title="6.2-ReentrantLock 源码解析"></a>6.2-ReentrantLock 源码解析</h3><p>本章我们就要来学习一下第一个 AQS 的实现类：ReentrantLock，看看其底层是如何组合 AQS ，实现了自己的那些功能。</p><p>本章的描述思路是先描述清楚 ReentrantLock 的构成组件，然后使用加锁和释放锁的方法把这些组件串起来。</p><h4 id="6-2-1-类注释"><a href="#6-2-1-类注释" class="headerlink" title="6.2.1-类注释"></a>6.2.1-类注释</h4><p>ReentrantLock 中文我们习惯叫做可重入互斥锁，可重入的意思是同一个线程可以对同一个共享资源重复的加锁或释放锁，互斥就是 AQS 中的排它锁的意思，只允许一个线程获得锁。</p><p>我们来一起来看下类注释上都有哪些重要信息：</p><ol><li>可重入互斥锁，和 synchronized 锁具有同样的功能语义，但更有扩展性；</li><li>构造器接受 fairness 的参数，fairness 是 ture 时，保证获得锁时的顺序，false 不保证；</li><li>公平锁的吞吐量较低，获得锁的公平性不能代表线程调度的公平性；</li><li>tryLock() 无参方法没有遵循公平性，是非公平的（lock 和 unlock 都有公平和非公平，而 tryLock 只有公平锁，所以单独拿出来说一说）。</li></ol><p>我们补充一下第二点，ReentrantLock 的公平和非公平，是针对获得锁来说的，如果是公平的，可以保证同步队列中的线程从头到尾的顺序依次获得锁，非公平的就无法保证，在释放锁的过程中，我们是没有公平和非公平的说法的。</p><h4 id="6-2-2-类结构"><a href="#6-2-2-类结构" class="headerlink" title="6.2.2-类结构"></a>6.2.2-类结构</h4><p>ReentrantLock 类本身是不继承 AQS 的，实现了 Lock 接口，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Lock 接口定义了各种加锁，释放锁的方法，接口有如下几个：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获得锁方法，获取不到锁的线程会到同步队列中阻塞排队</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取可中断的锁</span><span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 尝试获得锁，如果锁空闲，立马返回 true，否则返回 false</span><span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 带有超时等待时间的锁，如果超时时间到了，仍然没有获得锁，返回 false</span><span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 释放锁</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到新的 Condition</span>Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ReentrantLock 就负责实现这些接口，我们使用时，直接面对的也是这些方法，这些方法的底层实现都是交给 Sync 内部类去实现的，Sync 类的定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Sync 继承了 AbstractQueuedSynchronizer ，所以 Sync 就具有了锁的框架，根据 AQS 的框架，Sync 只需要实现 AQS 预留的几个方法即可，但 Sync 也只是实现了部分方法，还有一些交给子类 NonfairSync 和 FairSync 去实现了，NonfairSync 是非公平锁，FairSync 是公平锁，定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步器 Sync 的两个子类锁</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>几个类整体的结构如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ReentrantLock%E7%B1%BB%E7%BB%93%E6%9E%84.jpeg" alt="ReentrantLock类结构"></p><p>图中 Sync、NonfairSync、FairSync 都是静态内部类的方式实现的，这个也符合 AQS 框架定义的实现标准。</p><h4 id="6-2-3-构造器"><a href="#6-2-3-构造器" class="headerlink" title="6.2.3-构造器"></a>6.2.3-构造器</h4><p>ReentrantLock 构造器有两种，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无参数构造器，相当于 ReentrantLock(false)，默认是非公平的</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>无参构造器默认构造是非公平的锁，有参构造器可以选择。</p><p>从构造器中可以看出，公平锁是依靠 FairSync 实现的，非公平锁是依靠 NonfairSync 实现的。</p><h4 id="6-2-4-Sync-同步器"><a href="#6-2-4-Sync-同步器" class="headerlink" title="6.2.4-Sync 同步器"></a>6.2.4-Sync 同步器</h4><p>Sync 表示同步器，继承了 AQS，UML 图如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ReentrantLock%E5%90%8C%E6%AD%A5%E5%99%A8.jpeg" alt="ReentrantLock同步器"></p><p>从 UML 图中可以看出，lock 方法是个抽象方法，留给 FairSync 和 NonfairSync 两个子类去实现，我们一起来看下剩余重要的几个方法。</p><h5 id="1-nonfairTryAcquire"><a href="#1-nonfairTryAcquire" class="headerlink" title="1.nonfairTryAcquire"></a>1.nonfairTryAcquire</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 尝试获得非公平锁</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步器的状态是 0，表示同步器的锁没有人持有</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程持有锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 标记当前持有锁的线程是谁</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果当前线程已经持有锁了，同一个线程可以对同一个资源重复加锁，代码实现的是可重入锁</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程持有锁的数量 + acquires</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int 是有最大值的，&lt;0 表示持有锁的数量超过了 int 的最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//否则线程进入同步队列</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码有三点需要注意：</p><ol><li>通过判断 AQS 的 state 的状态来决定是否可以获得锁，0 表示锁是空闲的；</li><li>else if 的代码体现了可重入加锁，同一个线程对共享资源重入加锁，底层实现就是把 state + 1，并且可重入的次数是有限制的，为 Integer 的最大值；</li><li>这个方法是非公平的，所以只有非公平锁才会用到，公平锁是另外的实现。</li></ol><p>无参的 tryLock 方法调用的就是此方法，tryLock 的方法源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 入参数是 1 表示尝试获得一次锁</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-tryRelease"><a href="#2-tryRelease" class="headerlink" title="2.tryRelease"></a>2.tryRelease</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 释放锁方法，非公平和公平锁都使用</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前同步器的状态减去释放的个数，releases 一般为 1</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前线程根本都不持有锁，报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 c 为 0，表示当前线程持有的锁都释放了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果 c 不为 0，那么就是可重入锁，并且锁没有释放完，用 state 减去 releases 即可，无需做其他操作</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>tryRelease 方法是公平锁和非公平锁都公用的，在锁释放的时候，是没有公平和非公平的说法的。</p><p>从代码中可以看到，锁最终被释放的标椎是 state 的状态为 0，在重入加锁的情况下，需要重入解锁相应的次数后，才能最终把锁释放，比如线程 A 对共享资源 B 重入加锁 5 次，那么释放锁的话，也需要释放 5 次之后，才算真正的释放该共享资源了。</p><h4 id="6-2-5-FairSync-公平锁"><a href="#6-2-5-FairSync-公平锁" class="headerlink" title="6.2.5-FairSync 公平锁"></a>6.2.5-FairSync 公平锁</h4><p>FairSync 公平锁只实现了 lock 和 tryAcquire 两个方法，lock 方法非常简单，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// acquire 是 AQS 的方法，表示先尝试获得锁，失败之后进入同步队列阻塞等待</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>tryAcquire 方法是 AQS 在 acquire 方法中留给子类实现的抽象方法，FairSync 中实现的源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// hasQueuedPredecessors 是实现公平的关键</span>        <span class="token comment" spellcheck="true">// 会判断当前线程是不是属于同步队列的头节点的下一个节点(头节点是释放锁的节点)</span>        <span class="token comment" spellcheck="true">// 如果是(返回false)，符合先进先出的原则，可以获得锁</span>        <span class="token comment" spellcheck="true">// 如果不是(返回true)，则继续等待</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 可重入锁</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码和 Sync 的 nonfairTryAcquire 方法实现类似，唯一不同的是在获得锁时使用 hasQueuedPredecessors 方法体现了其公平性。</p><h4 id="6-2-6-NonfairSync-非公平锁"><a href="#6-2-6-NonfairSync-非公平锁" class="headerlink" title="6.2.6-NonfairSync 非公平锁"></a>6.2.6-NonfairSync 非公平锁</h4><p>NonfairSync 底层实现了 lock 和 tryAcquire 两个方法，如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加锁</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// cas 给 state 赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// cas 赋值成功，代表拿到当前锁，记录拿到锁的线程</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// acquire 是抽象类AQS的方法,</span>        <span class="token comment" spellcheck="true">// 会再次尝试获得锁，失败会进入到同步队列中</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 直接使用的是 Sync.nonfairTryAcquire 方法 </span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-2-7-如何串起来"><a href="#6-2-7-如何串起来" class="headerlink" title="6.2.7-如何串起来"></a>6.2.7-如何串起来</h4><p>以上内容主要说了 ReentrantLock 的基本结构，比较零散，那么这些零散的结构如何串联起来呢？我们是通过 lock、tryLock、unlock 这三个 API 将以上几个类串联起来，我们来一一看下。</p><h5 id="1-lock-加锁"><a href="#1-lock-加锁" class="headerlink" title="1.lock 加锁"></a>1.lock 加锁</h5><p>lock 的代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其底层的调用关系(只是简单表明调用关系，并不是完整分支图)如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/lock%E5%BA%95%E5%B1%82%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.jpeg" alt="lock底层的调用关系"></p><h5 id="2-tryLock-尝试加锁"><a href="#2-tryLock-尝试加锁" class="headerlink" title="2.tryLock 尝试加锁"></a>2.tryLock 尝试加锁</h5><p>tryLock 有两个方法，一种是无参的，一种提供了超时时间的入参，两种内部是不同的实现机制，代码分别如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无参构造器</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// timeout 为超时的时间，在时间内，仍没有得到锁，会返回 false</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着我们一起看下两个 tryLock 的调用关系图，下图显示的是无参 tryLock 的调用关系图，如下：</p><p>![tryLock 的调用关系图](tryLock 的调用关系图.jpeg)</p><p>我们需要注意的是 tryLock 无参方法底层走的就是非公平锁实现，没有公平锁的实现。</p><p>下图展示的是带有超时时间的有参 tryLock 的调用实现图：</p><p>![tryLock 的调用实现图](tryLock 的调用实现图.jpeg)</p><h5 id="3-unlock-释放锁"><a href="#3-unlock-释放锁" class="headerlink" title="3.unlock 释放锁"></a>3.unlock 释放锁</h5><p>unlock 释放锁的方法，底层调用的是 Sync 同步器的 release 方法，release 是 AQS 的方法，分成两步：</p><ol><li>尝试释放锁，如果释放失败，直接返回 false；</li><li>释放成功，从同步队列的头节点的下一个节点开始唤醒，让其去竞争锁。</li></ol><p>第一步就是我们上文中 Sync 的 tryRelease 方法（4.1），第二步 AQS 已经实现了。</p><p>unLock 的源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 释放锁</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-Condition-1"><a href="#4-Condition-1" class="headerlink" title="4.Condition"></a>4.Condition</h5><p>ReentrantLock 对 Condition 并没有改造，直接使用 AQS 的 ConditionObject 即可。</p><h4 id="6-2-8-总结"><a href="#6-2-8-总结" class="headerlink" title="6.2.8-总结"></a>6.2.8-总结</h4><p>这就是我们在研究完 AQS 源码之后，碰到的第一个锁，是不是感觉很简单，AQS 搭建了整个锁架构，子类锁只需要根据场景，实现 AQS 对应的方法即可，不仅仅是 ReentrantLock 是这样，JUC 中的其它锁也都是这样，只要对 AQS 了如指掌，锁其实非常简单。</p><h3 id="6-3-CountDownLatch、Atomic-等其它源码解析"><a href="#6-3-CountDownLatch、Atomic-等其它源码解析" class="headerlink" title="6.3-CountDownLatch、Atomic 等其它源码解析"></a>6.3-CountDownLatch、Atomic 等其它源码解析</h3><p>本小节和大家一起来看看 CountDownLatch 和 Atomic 打头的原子操作类，CountDownLatch 的源码非常少，看起来比较简单，但 CountDownLatch 的实际应用却不是很容易；Atomic 原子操作类就比较好理解和应用，接下来我们分别来看一下。</p><h4 id="6-3-1-CountDownLatch"><a href="#6-3-1-CountDownLatch" class="headerlink" title="6.3.1-CountDownLatch"></a>6.3.1-CountDownLatch</h4><p>CountDownLatch 中文有的叫做计数器，也有翻译为计数锁，其最大的作用不是为了加锁，而是通过计数达到等待的功能，主要有两种形式的等待：</p><ol><li>让一组线程在全部启动完成之后，再一起执行（先启动的线程需要阻塞等待后启动的线程，直到一组线程全部都启动完成后，再一起执行）；</li><li>主线程等待另外一组线程都执行完成之后，再继续执行。</li></ol><p>我们会举一个示例来演示这两种情况，但在这之前，我们先来看看 CountDownLatch 的底层源码实现，这样就会清晰一点，不然一开始就来看示例，估计很难理解。</p><p>CountDownLatch 有两个比较重要的 API，分别是 await 和 countDown，管理着线程能否获得锁和锁的释放（也可以称为对 state 的计数增加和减少）。</p><h5 id="1-await"><a href="#1-await" class="headerlink" title="1.await"></a>1.await</h5><p>await 我们可以叫做等待，也可以叫做加锁，有两种不同入参的方法，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 带有超时时间的，最终都会转化成毫秒</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个方法底层使用的都是 sync，sync 是一个同步器，是 CountDownLatch 的内部类实现的，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>可以看出来 Sync 继承了 AbstractQueuedSynchronizer，具备了同步器的通用功能。</p><p>无参 await 底层使用的是 acquireSharedInterruptibly 方法，有参的使用的是 tryAcquireSharedNanos 方法，这两个方法都是 AQS 的方法，底层实现很相似，主要分成两步：</p><ol><li>使用子类的 tryAcquireShared 方法尝试获得锁，如果获取了锁直接返回，获取不到锁走 2；</li><li>获取不到锁，用 Node 封装一下当前线程，追加到同步队列的尾部，等待在合适的时机去获得锁。</li></ol><p>第二步是 AQS 已经实现了，第一步 tryAcquireShared 方法是交给 Sync 实现的，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果当前同步器的状态是 0 的话，表示可获得锁</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获得锁的代码也很简单，直接根据同步器的 state 字段来进行判断，但还是有两点需要注意一下：</p><ol><li>获得锁时，state 的值不会发生变化，像 ReentrantLock 在获得锁时，会把 state + 1，但 CountDownLatch 不会；</li><li>CountDownLatch 的 state 并不是 AQS 的默认值 0，而是可以赋值的，是在 CountDownLatch 初始化的时候赋值的，代码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化,count 代表 state 的初始化值</span><span class="token keyword">public</span> <span class="token function">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"count &lt; 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// new Sync 底层代码是 state = count;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的初始化的 count 和一般的锁意义不太一样，count 表示我们希望等待的线程数，在两种不同的等待场景中，count 有不同的含义：</p><ol><li>让一组线程在全部启动完成之后，再一起执行的等待场景下， count 代表一组线程的个数；</li><li>主线程等待另外一组线程都执行完成之后，再继续执行的等待场景下，count 代表一组线程的个数。</li></ol><p>所以我们可以把 count 看做我们希望等待的一组线程的个数，可能我们是等待一组线程全部启动完成，可能我们是等待一组线程全部执行完成。</p><h5 id="2-countDown"><a href="#2-countDown" class="headerlink" title="2.countDown"></a>2.countDown</h5><p>countDown 中文翻译为倒计时，每调用一次，都会使 state 减一，底层调用的方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>releaseShared 是 AQS 定义的方法，方法主要分成两步：</p><ol><li>尝试释放锁（tryReleaseShared），锁释放失败直接返回，释放成功走 2；</li><li>释放当前节点的后置等待节点。</li></ol><p>第二步 AQS 已经实现了，第一步是 Sync 实现的，我们一起来看下 tryReleaseShared 方法的实现源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对 state 进行递减，直到 state 变成 0；</span><span class="token comment" spellcheck="true">// state 递减为 0 时，返回 true，其余返回 false</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自旋保证 CAS 一定可以成功</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// state 已经是 0 了，直接返回 false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对 state 进行递减</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中可以看到，只有到 count 递减到 0 时，countDown 才会返回 true。</p><h5 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h5><p>看完 CountDownLatch 两个重要 API 后，我们来实现文章开头说的两个功能：</p><ol><li>让一组线程在全部启动完成之后，再一起执行；</li><li>主线程等待另外一组线程都执行完成之后，再继续执行。</li></ol><p>代码在 CountDownLatchDemo 类中，大家可以调试看看，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 线程任务</span>  <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义计数锁用来实现功能 1</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch startSignal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义计数锁用来实现功能 2</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch doneSignal<span class="token punctuation">;</span>    <span class="token function">Worker</span><span class="token punctuation">(</span>CountDownLatch startSignal<span class="token punctuation">,</span> CountDownLatch doneSignal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>startSignal <span class="token operator">=</span> startSignal<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>doneSignal <span class="token operator">=</span> doneSignal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 子线程做的事情</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// await 时有两点需要注意：await 时 state 不会发生变化，2：startSignal 的state初始化是 1，所以所有子线程都是获取不到锁的，都需要到同步队列中去等待，达到先启动的子线程等待后面启动的子线程的结果</span>        startSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// countDown 每次会使 state 减一，doneSignal 初始化为 9，countDown 前 8 次执行都会返回 false (releaseShared 方法)，执行第 9 次时，state 递减为 0，会 countDown 成功，表示所有子线程都执行完了，会释放 await 在 doneSignal 上的主线程</span>        doneSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// return;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"sleep 5s …………"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// state 初始化为 1 很关键，子线程是不断的 await，await 时 state 是不会变化的，并且发现 state 都是 1，所有线程都获取不到锁</span>    <span class="token comment" spellcheck="true">// 造成所有线程都到同步队列中去等待，当主线程执行 countDown 时，就会一起把等待的线程给释放掉</span>    CountDownLatch startSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// state 初始化成 9，表示有 9 个子线程执行完成之后，会唤醒主线程</span>    CountDownLatch doneSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// create and start threads</span>    <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>startSignal<span class="token punctuation">,</span> doneSignal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这行代码唤醒 9 个子线程，开始执行(因为 startSignal 锁的状态是 1，所以调用一次 countDown 方法就可以释放9个等待的子线程)</span>    startSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这行代码使主线程陷入沉睡，等待 9 个子线程执行完成之后才会继续执行(就是等待子线程执行 doneSignal.countDown())</span>    doneSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>执行结果：Thread<span class="token operator">-</span><span class="token number">0</span> beginThread<span class="token operator">-</span><span class="token number">1</span> beginThread<span class="token operator">-</span><span class="token number">2</span> beginThread<span class="token operator">-</span><span class="token number">3</span> beginThread<span class="token operator">-</span><span class="token number">4</span> beginThread<span class="token operator">-</span><span class="token number">5</span> beginThread<span class="token operator">-</span><span class="token number">6</span> beginThread<span class="token operator">-</span><span class="token number">7</span> beginThread<span class="token operator">-</span><span class="token number">8</span> beginmain thread beginThread<span class="token operator">-</span>0sleep 5s …………Thread<span class="token operator">-</span>1sleep 5s …………Thread<span class="token operator">-</span>4sleep 5s …………Thread<span class="token operator">-</span>3sleep 5s …………Thread<span class="token operator">-</span>2sleep 5s …………Thread<span class="token operator">-</span>8sleep 5s …………Thread<span class="token operator">-</span>7sleep 5s …………Thread<span class="token operator">-</span>6sleep 5s …………Thread<span class="token operator">-</span>5sleep 5s …………Thread<span class="token operator">-</span><span class="token number">0</span> endThread<span class="token operator">-</span><span class="token number">1</span> endThread<span class="token operator">-</span><span class="token number">4</span> endThread<span class="token operator">-</span><span class="token number">3</span> endThread<span class="token operator">-</span><span class="token number">2</span> endThread<span class="token operator">-</span><span class="token number">8</span> endThread<span class="token operator">-</span><span class="token number">7</span> endThread<span class="token operator">-</span><span class="token number">6</span> endThread<span class="token operator">-</span><span class="token number">5</span> endmain thread end</code></pre><p>从执行结果中，可以看出已经实现了以上两个功能，实现比较绕，大家可以根据注释，debug 看一看。</p><h4 id="6-3-2-Atomic-原子操作类"><a href="#6-3-2-Atomic-原子操作类" class="headerlink" title="6.3.2-Atomic 原子操作类"></a>6.3.2-Atomic 原子操作类</h4><p>Atomic 打头的原子操作类有很多，涉及到 Java 常用的数字类型的，基本都有相应的 Atomic 原子操作类，如下图所示：</p><p>![Atomic 原子操作类](Atomic 原子操作类.jpeg)</p><p>Atomic 打头的原子操作类，在高并发场景下，都是线程安全的，我们可以放心使用。</p><p>我们以 AtomicInteger 为例子，来看下主要的底层实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化</span><span class="token keyword">public</span> <span class="token function">AtomicInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 得到当前值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自增 1，并返回自增之前的值    </span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自减 1，并返回自增之前的值    </span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中，我们可以看到，线程安全的操作方法，底层都是使用 unsafe 方法实现，以上几个 unsafe 方法不是使用 Java 实现的，都是线程安全的。</p><p>AtomicInteger 是对 int 类型的值进行自增自减，那如果 Atomic 的对象是个自定义类怎么办呢，Java 也提供了自定义对象的原子操作类，叫做 AtomicReference。AtomicReference 类可操作的对象是个泛型，所以支持自定义类，其底层是没有自增方法的，操作的方法可以作为函数入参传递，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对 x 执行 accumulatorFunction 操作</span><span class="token comment" spellcheck="true">// accumulatorFunction 是个函数，可以自定义想做的事情</span><span class="token comment" spellcheck="true">// 返回老值</span><span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">getAndAccumulate</span><span class="token punctuation">(</span>V x<span class="token punctuation">,</span>                                BinaryOperator<span class="token operator">&lt;</span>V<span class="token operator">></span> accumulatorFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// prev 是老值，next 是新值</span>    V prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自旋 + CAS 保证一定可以替换老值</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行自定义操作</span>        next <span class="token operator">=</span> accumulatorFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-3-3-总结"><a href="#6-3-3-总结" class="headerlink" title="6.3.3-总结"></a>6.3.3-总结</h4><p>CountDownLatch 的源码实现简单，但真的要用好还是不简单的，其使用场景比较复杂，建议同学们可以 debug 一下 CountDownLatchDemo，在增加实战能力基础上，增加底层的理解能力。</p><h3 id="6-4-只求问倒：连环相扣系列锁面试题"><a href="#6-4-只求问倒：连环相扣系列锁面试题" class="headerlink" title="6.4-只求问倒：连环相扣系列锁面试题"></a>6.4-只求问倒：连环相扣系列锁面试题</h3><p>面试中，问锁主要是两方面：锁的日常使用场景 + 锁原理，锁的日常使用场景主要考察对锁 API 的使用熟练度，看看你是否真的使用过这些 API，而不是纸上谈兵，锁原理主要就是问 AQS 底层的源码原理了，如果问得更加深入的话，可能会现场让你实现一个简单的锁，简单要求的会让你直接使用 AQS API，复杂要求的可能需要重新实现 AQS。</p><p>接下来我们一起看一看关于锁的常见源码面试题。</p><h4 id="6-4-1-AQS-相关面试题"><a href="#6-4-1-AQS-相关面试题" class="headerlink" title="6.4.1-AQS 相关面试题"></a>6.4.1-AQS 相关面试题</h4><h5 id="1-说说自己对-AQS-的理解？"><a href="#1-说说自己对-AQS-的理解？" class="headerlink" title="1.说说自己对 AQS 的理解？"></a>1.说说自己对 AQS 的理解？</h5><p>答：回答这样的问题的时候，面试官主要考察的是你对 AQS 的知识有没有系统的整理，建议回答的方向是由大到小，由全到细，由使用到原理。</p><p>如果和面试官面对面的话，可以边说边画出我们在 AQS 源码解析上中画出的整体架构图，并且可以这么说：</p><ol><li>AQS 是一个锁框架，它定义了锁的实现机制，并开放出扩展的地方，让子类去实现，比如我们在 lock 的时候，AQS 开放出 state 字段，让子类可以根据 state 字段来决定是否能够获得锁，对于获取不到锁的线程 AQS 会自动进行管理，无需子类锁关心，这就是 lock 时锁的内部机制，封装的很好，又暴露出子类锁需要扩展的地方；</li><li>AQS 底层是由同步队列 + 条件队列联手组成，同步队列管理着获取不到锁的线程的排队和释放，条件队列是在一定场景下，对同步队列的补充，比如获得锁的线程从空队列中拿数据，肯定是拿不到数据的，这时候条件队列就会管理该线程，使该线程阻塞；</li><li>AQS 围绕两个队列，提供了四大场景，分别是：获得锁、释放锁、条件队列的阻塞，条件队列的唤醒，分别对应着 AQS 架构图中的四种颜色的线的走向。</li></ol><p>以上三点都是 AQS 全局方面的描述，接着你可以问问面试官要不要说细一点，可以的话，按照 AQS 源码解析上下两篇，把四大场景都说一下就好了。</p><p>这样说的好处是很多的：</p><ol><li>面试的主动权把握在自己手里，而且都是自己掌握的知识点；</li><li>由全到细的把 AQS 全部说完，会给面试官一种你对 AQS 了如指掌的感觉，再加上全部说完耗时会很久，面试时间又很有限，面试官就不会再问关于 AQS 一些刁钻的问题了，这样 AQS 就可以轻松过关。</li></ol><p>当然如果你对 AQS 了解的不是很深，那么就大概回答下 AQS 的大体架构就好了，就不要说的特别细，免得给自己挖坑。</p><h5 id="2-多个线程通过锁请求共享资源，获取不到锁的线程怎么办？"><a href="#2-多个线程通过锁请求共享资源，获取不到锁的线程怎么办？" class="headerlink" title="2.多个线程通过锁请求共享资源，获取不到锁的线程怎么办？"></a>2.多个线程通过锁请求共享资源，获取不到锁的线程怎么办？</h5><p>答：加锁(排它锁)主要分为以下四步：</p><ol><li>尝试获得锁，获得锁了直接返回，获取不到锁的走到 2；</li><li>用 Node 封装当前线程，追加到同步队列的队尾，追加到队尾时，又有两步，如 3 和 4；</li><li>自旋 + CAS 保证前一个节点的状态置为 signal；</li><li>阻塞自己，使当前线程进入等待状态。</li></ol><p>获取不到锁的线程会进行 2、3、4 步，最终会陷入等待状态，这个描述的是排它锁。</p><h5 id="3-问题-1-2-中，排它锁和共享锁的处理机制是一样的么？"><a href="#3-问题-1-2-中，排它锁和共享锁的处理机制是一样的么？" class="headerlink" title="3.问题 1.2 中，排它锁和共享锁的处理机制是一样的么？"></a>3.问题 1.2 中，排它锁和共享锁的处理机制是一样的么？</h5><p>答：排它锁和共享锁在问题 1.2 中的 2、3、4 步骤都是一样的， 不同的是在于第一步，线程获得排它锁的时候，仅仅把自己设置为同步队列的头节点即可，但如果是共享锁的话，还会去唤醒自己的后续节点，一起来获得该锁。</p><h5 id="4-共享锁和排它锁的区别？"><a href="#4-共享锁和排它锁的区别？" class="headerlink" title="4.共享锁和排它锁的区别？"></a>4.共享锁和排它锁的区别？</h5><p>答：排它锁的意思是同一时刻，只能有一个线程可以获得锁，也只能有一个线程可以释放锁。</p><p>共享锁可以允许多个线程获得同一个锁，并且可以设置获取锁的线程数量，共享锁之所以能够做到这些，是因为线程一旦获得共享锁，把自己设置成同步队列的头节点后，会自动的去释放头节点后等待获取共享锁的节点，让这些等待节点也一起来获得共享锁，而排它锁就不会这么干。</p><h5 id="5-排它锁和共享锁说的是加锁时的策略，那么锁释放时有排它锁和共享锁的策略么？"><a href="#5-排它锁和共享锁说的是加锁时的策略，那么锁释放时有排它锁和共享锁的策略么？" class="headerlink" title="5.排它锁和共享锁说的是加锁时的策略，那么锁释放时有排它锁和共享锁的策略么？"></a>5.排它锁和共享锁说的是加锁时的策略，那么锁释放时有排它锁和共享锁的策略么？</h5><p>答：是的，排它锁和共享锁，主要体现在加锁时，多个线程能否获得同一个锁。</p><p>但在锁释放时，是没有排它锁和共享锁的概念和策略的，概念仅仅针对锁获取。</p><h5 id="6-描述下同步队列？"><a href="#6-描述下同步队列？" class="headerlink" title="6.描述下同步队列？"></a>6.描述下同步队列？</h5><p>答：同步队列底层的数据结构就是双向的链表，节点叫做 Node，头节点叫做 head，尾节点叫做 tail，节点和节点间的前后指向分别叫做 prev、next，如果是面对面面试的话，可以画一下 AQS 整体架构图中的同步队列。</p><p>同步队列的作用：阻塞获取不到锁的线程，并在适当时机释放这些线程。</p><p>实现的大致过程：当多个线程都来请求锁时，某一时刻有且只有一个线程能够获得锁（排它锁），那么剩余获取不到锁的线程，都会到同步队列中去排队并阻塞自己，当有线程主动释放锁时，就会从同步队列中头节点开始释放一个排队的线程，让线程重新去竞争锁。</p><h5 id="7-描述下线程入、出同步队列的时机和过程？"><a href="#7-描述下线程入、出同步队列的时机和过程？" class="headerlink" title="7.描述下线程入、出同步队列的时机和过程？"></a>7.描述下线程入、出同步队列的时机和过程？</h5><p>答：(排它锁为例)从 AQS 整体架构图中，可以看出同步队列入队和出队都是有两个箭头指向，所以入队和出队的时机各有两个。</p><p>同步队列入队时机：</p><ol><li>多个线程请求锁，获取不到锁的线程需要到同步队列中排队阻塞；</li><li>条件队列中的节点被唤醒，会从条件队列中转移到同步队列中来。</li></ol><p>同步队列出队时机：</p><ol><li>锁释放时，头节点出队；</li><li>获得锁的线程，进入条件队列时，会释放锁，同步队列头节点开始竞争锁。</li></ol><p>四个时机的过程可以参考 AQS 源码解析，1 参考 acquire 方法执行过程，2 参考 signal 方法，3 参考 release 方法，4 参考 await 方法。</p><h5 id="8-为什么-AQS-有了同步队列之后，还需要条件队列？"><a href="#8-为什么-AQS-有了同步队列之后，还需要条件队列？" class="headerlink" title="8.为什么 AQS 有了同步队列之后，还需要条件队列？"></a>8.为什么 AQS 有了同步队列之后，还需要条件队列？</h5><p>答：的确，一般情况下，我们只需要有同步队列就好了，但在上锁后，需要操作队列的场景下，一个同步队列就搞不定了，需要条件队列进行功能补充，比如当队列满时，执行 put 操作的线程会进入条件队列等待，当队列空时，执行 take 操作的线程也会进入条件队列中等待，从一定程度上来看，条件队列是对同步队列的场景功能补充。</p><h5 id="9-描述一下条件队列中的元素入队和出队的时机和过程？"><a href="#9-描述一下条件队列中的元素入队和出队的时机和过程？" class="headerlink" title="9.描述一下条件队列中的元素入队和出队的时机和过程？"></a>9.描述一下条件队列中的元素入队和出队的时机和过程？</h5><p>答：入队时机：执行 await 方法时，当前线程会释放锁，并进入到条件队列。</p><p>出队时机：执行 signal、signalAll 方法时，节点会从条件队列中转移到同步队列中。</p><p>具体的执行过程，可以参考源码解析中 await 和 signal 方法。</p><h5 id="10-描述一下条件队列中的节点转移到同步队列中去的时机和过程？"><a href="#10-描述一下条件队列中的节点转移到同步队列中去的时机和过程？" class="headerlink" title="10.描述一下条件队列中的节点转移到同步队列中去的时机和过程？"></a>10.描述一下条件队列中的节点转移到同步队列中去的时机和过程？</h5><p>答：时机：当有线程执行 signal、signalAll 方法时，从条件队列的头节点开始，转移到同步队列中去。</p><p>过程主要是以下几步：</p><ol><li>找到条件队列的头节点，头节点 next 属性置为 null，从条件队列中移除了；</li><li>头节点追加到同步队列的队尾；</li><li>头节点状态（waitStatus）从 CONDITION 修改成 0（初始化状态）；</li><li>将节点的前一个节点状态置为 SIGNAL。</li></ol><h5 id="11-线程入条件队列时，为什么需要释放持有的锁？"><a href="#11-线程入条件队列时，为什么需要释放持有的锁？" class="headerlink" title="11.线程入条件队列时，为什么需要释放持有的锁？"></a>11.线程入条件队列时，为什么需要释放持有的锁？</h5><p>答：原因很简单，如果当前线程不释放锁，一旦跑去条件队里中阻塞了，后续所有的线程都无法获得锁，正确的场景应该是：当前线程释放锁，到条件队列中去阻塞后，其他线程仍然可以获得当前锁。</p><h4 id="6-4-2-AQS-子类锁面试题"><a href="#6-4-2-AQS-子类锁面试题" class="headerlink" title="6.4.2-AQS 子类锁面试题"></a>6.4.2-AQS 子类锁面试题</h4><h5 id="1-你在工作中如何使用锁的，写一个看一看？"><a href="#1-你在工作中如何使用锁的，写一个看一看？" class="headerlink" title="1.你在工作中如何使用锁的，写一个看一看？"></a>1.你在工作中如何使用锁的，写一个看一看？</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> Condition notFull  <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> putptr<span class="token punctuation">,</span> takeptr<span class="token punctuation">,</span> count<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Object x<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      items<span class="token punctuation">[</span>putptr<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putptr <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        putptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>count<span class="token punctuation">;</span>      notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Object <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object x <span class="token operator">=</span> items<span class="token punctuation">[</span>takeptr<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeptr <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        takeptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">--</span>count<span class="token punctuation">;</span>      notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-如果我要自定义锁，大概的实现思路是什么样子的？"><a href="#2-如果我要自定义锁，大概的实现思路是什么样子的？" class="headerlink" title="2.如果我要自定义锁，大概的实现思路是什么样子的？"></a>2.如果我要自定义锁，大概的实现思路是什么样子的？</h5><p>答：现在有很多类似的问题，比如让你自定义队列，自定义锁等等，面试官其实并不是想让我们重新造一个轮子，而是想考察一下我们对于队列、锁理解的深度，我们只需要选择自己最熟悉的 API 描述一下就好了，所以这题我们可以选择 ReentrantLock 来描述一下实现思路：</p><ol><li>新建内部类继承 AQS，并实现 AQS 的 tryAcquire 和 tryRelease 两个方法，在 tryAcquire 方法里面实现控制能否获取锁，比如当同步器状态 state 是 0 时，即可获得锁，在 tryRelease 方法里面控制能否释放锁，比如将同步器状态递减到 0 时，即可释放锁；</li><li>对外提供 lock、release 两个方法，lock 表示获得锁的方法，底层调用 AQS 的 acquire 方法，release 表示释放锁的方法，底层调用 AQS 的 release 方法。</li></ol><h5 id="3-描述-ReentrantLock-两大特性：可重入性和公平性？底层分别如何实现的？"><a href="#3-描述-ReentrantLock-两大特性：可重入性和公平性？底层分别如何实现的？" class="headerlink" title="3.描述 ReentrantLock 两大特性：可重入性和公平性？底层分别如何实现的？"></a>3.描述 ReentrantLock 两大特性：可重入性和公平性？底层分别如何实现的？</h5><p>答：可重入性说的是线程可以对共享资源重复加锁，对应的，释放时也可以重复释放，对于 ReentrantLock 来说，在获得锁的时候，state 会加 1，重复获得锁时，不断的对 state 进行递增即可，比如目前 state 是 4，表示线程已经对共享资源加锁了 4 次，线程每次释放共享资源的锁时，state 就会递减 1，直到递减到 0 时，才算真正释放掉共享资源。</p><p>公平性和非公平指的是同步队列中的线程得到锁的机制，如果同步队列中的线程按照阻塞的顺序得到锁，我们称之为公平的，反之是非公平的，公平的底层实现是 ReentrantLock 的 tryAcquire 方法（调用的是 AQS 的 hasQueuedPredecessors 方法）里面实现的，要释放同步队列的节点时（或者获得锁时），判断当前线程节点是不是同步队列的头节点的后一个节点，如果是就释放，不是则不能释放，通过这种机制，保证同步队列中的线程得到锁时，是按照从头到尾的顺序的。</p><h5 id="4-如果一个线程需要等待一组线程全部执行完之后再继续执行，有什么好的办法么？是如何实现的？"><a href="#4-如果一个线程需要等待一组线程全部执行完之后再继续执行，有什么好的办法么？是如何实现的？" class="headerlink" title="4.如果一个线程需要等待一组线程全部执行完之后再继续执行，有什么好的办法么？是如何实现的？"></a>4.如果一个线程需要等待一组线程全部执行完之后再继续执行，有什么好的办法么？是如何实现的？</h5><p>答：CountDownLatch 就提供了这样的机制，比如一组线程有 5 个，只需要在初始化 CountDownLatch 时，给同步器的 state 赋值为 5，主线程执行 CountDownLatch.await ，子线程都执行 CountDownLatch.countDown 即可。</p><h5 id="5-Atomic-原子操作类可以保证线程安全，如果操作的对象是自定义的类的话，要如何做呢？"><a href="#5-Atomic-原子操作类可以保证线程安全，如果操作的对象是自定义的类的话，要如何做呢？" class="headerlink" title="5.Atomic 原子操作类可以保证线程安全，如果操作的对象是自定义的类的话，要如何做呢？"></a>5.Atomic 原子操作类可以保证线程安全，如果操作的对象是自定义的类的话，要如何做呢？</h5><p>答： Java 为这种情况提供了一个 API：AtomicReference，AtomicReference 类可操作的对象是个泛型，所以支持自定义类。</p><h4 id="6-4-3-总结"><a href="#6-4-3-总结" class="headerlink" title="6.4.3-总结"></a>6.4.3-总结</h4><p>关于 AQS 和锁场景的面试题，其实网上也很多，各个大厂出的题目也都不一样，但考察问题的本质都是一致的，如果把 AQS 架构图中，AQS 的组成和四种颜色箭头的发起时机，调用过程都弄清楚了，回答 AQS 的各种问题都会游刃有余。</p><h3 id="6-5-经验总结：各种锁在工作中使用场景和细节"><a href="#6-5-经验总结：各种锁在工作中使用场景和细节" class="headerlink" title="6.5-经验总结：各种锁在工作中使用场景和细节"></a>6.5-经验总结：各种锁在工作中使用场景和细节</h3><p>本章主要说一说锁在工作中的使用场景，主要以 synchronized 和 CountDownLatch 为例，会分别描述一下这两种锁的使用场景和姿势。</p><h4 id="6-5-1-synchronized"><a href="#6-5-1-synchronized" class="headerlink" title="6.5.1-synchronized"></a>6.5.1-synchronized</h4><p>synchronized 是可重入的排它锁，和 ReentrantLock 锁功能相似，任何使用 synchronized 的地方，几乎都可以使用 ReentrantLock 来代替，两者最大的相似点就是：可重入 + 排它锁，两者的区别主要有这些：</p><ol><li>ReentrantLock 的功能更加丰富，比如提供了 Condition，可以打断的加锁 API、能满足锁 + 队列的复杂场景等等；</li><li>ReentrantLock 有公平锁和非公平锁之分，而 synchronized 都是非公平锁；</li><li>两者的使用姿势也不同，ReentrantLock 需要申明，有加锁和释放锁的 API，而 synchronized 会自动对代码块进行加锁释放锁的操作，synchronized 使用起来更加方便。</li></ol><p>synchronized 和 ReentrantLock 功能相近，所以我们就以 synchronized 举例。</p><h5 id="1-共享资源初始化"><a href="#1-共享资源初始化" class="headerlink" title="1.共享资源初始化"></a>1.共享资源初始化</h5><p>在分布式的系统中，我们喜欢把一些死的配置资源在项目启动的时候加锁到 JVM 内存里面去，这样请求在拿这些共享配置资源时，就可直接从内存里面拿，不必每次都从数据库中拿，减少了时间开销。</p><p>一般这样的共享资源有：死的业务流程配置 + 死的业务规则配置。</p><p>共享资源初始化的步骤一般为：项目启动 -&gt; 触发初始化动作 -&gt;单线程从数据库中捞取数据 -&gt; 组装成我们需要的数据结构 -&gt; 放到 JVM 内存中。</p><p>在项目启动时，为了防止共享资源被多次加载，我们往往会加上排它锁，让一个线程加载共享资源完成之后，另外一个线程才能继续加载，此时的排它锁我们可以选择 synchronized 或者 ReentrantLock，我们以 synchronized 为例，写了 mock 的代码，如下：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 共享资源</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> SHARED_MAP <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newConcurrentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 有无初始化完成的标志位</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 初始化共享资源   */</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loaded<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 再次 check</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>loaded<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SynchronizedDemo init begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 从数据库中捞取数据，组装成 SHARED_MAP 的数据格式</span>      loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SynchronizedDemo init end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>不知道大家有没有从上述代码中发现 @PostConstruct 注解，@PostConstruct 注解的作用是在 Spring 容器初始化时，再执行该注解打上的方法，也就是说上图说的 init 方法触发的时机，是在 Spring 容器启动的时候。</p><p>大家可以下载演示代码，找到 DemoApplication 启动文件，在 DemoApplication 文件上右击 run，就可以启动整个 Spring Boot 项目，在 init 方法上打上断点就可以调试了。</p><p>我们在代码中使用了 synchronized 来保证同一时刻，只有一个线程可以执行初始化共享资源的操作，并且我们加了一个共享资源加载完成的标识位（loaded），来判断是否加载完成了，如果加载完成，那么其它加载线程直接返回。</p><p>如果把 synchronized 换成 ReentrantLock 也是一样的实现，只不过需要显示的使用 ReentrantLock 的 API 进行加锁和释放锁，使用 ReentrantLock 有一点需要注意的是，我们需要在 try 方法块中加锁，在 finally 方法块中释放锁，这样保证即使 try 中加锁后发生异常，在 finally 中也可以正确的释放锁。</p><p>有的同学可能会问，不是可以直接使用了 ConcurrentHashMap 么，为什么还需要加锁呢？的确 ConcurrentHashMap 是线程安全的，但它只能够保证 Map 内部数据操作时的线程安全，是无法保证多线程情况下，查询数据库并组装数据的整个动作只执行一次的，我们加 synchronized 锁住的是整个操作，保证整个操作只执行一次。</p><p>完整 demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 共享资源初始化、注册、动态刷新等场景 * 演示使用 synchronized 防止并发 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 共享资源</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> SHARED_MAP <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newConcurrentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 有无加锁完成的标志位</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 初始化、注册   */</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>loaded<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>loaded<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SynchronizedDemo init begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 从数据库中捞取数据，组装成 SHARED_MAP 的数据格式</span>      loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SynchronizedDemo init end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 刷新   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SHARED_MAP<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SHARED_MAP<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-5-2-CountDownLatch"><a href="#6-5-2-CountDownLatch" class="headerlink" title="6.5.2-CountDownLatch"></a>6.5.2-CountDownLatch</h4><h5 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h5><ol><li><p>小明在淘宝上买了一个商品，觉得不好，把这个商品退掉(商品还没有发货，只退钱)，我们叫做单商品退款，单商品退款在后台系统中运行时，整体耗时 30 毫秒。</p></li><li><p>双 11，小明在淘宝上买了 40 个商品，生成了同一个订单（实际可能会生成多个订单，为了方便描述，我们说成一个），第二天小明发现其中 30 个商品是自己冲动消费的，需要把 30 个商品一起退掉。</p></li></ol><h5 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h5><p>此时后台只有单商品退款的功能，没有批量商品退款的功能（30 个商品一次退我们称为批量），为了快速实现这个功能，同学 A 按照这样的方案做的：for 循环调用 30 次单商品退款的接口，在 qa 环境测试的时候发现，如果要退款 30 个商品的话，需要耗时：30 * 30 = 900 毫秒，再加上其它的逻辑，退款 30 个商品差不多需要 1 秒了，这个耗时其实算很久了，当时同学 A 提出了这个问题，希望大家帮忙看看如何优化整个场景的耗时。</p><p>同学 B 当时就提出，你可以使用线程池进行执行呀，把任务都提交到线程池里面去，假如机器的 CPU 是 4 核的，最多同时能有 4 个单商品退款可以同时执行，同学 A 觉得很有道理，于是准备修改方案，为了便于理解，我们把两个方案都画出来，对比一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/CountDownLatch%E5%95%86%E5%93%81%E9%80%80%E6%AC%BE.jpeg" alt="CountDownLatch商品退款"></p><p>同学 A 于是就按照演变的方案去写代码了，过了一天，抛出了一个问题：向线程池提交了 30 个任务后，主线程如何等待 30 个任务都执行完成呢？因为主线程需要收集 30 个子任务的执行情况，并汇总返回给前端。</p><p>大家可以先不往下看，自己先思考一下，我们前几章说的那种锁可以帮助解决这个问题？</p><p>CountDownLatch 可以的，CountDownLatch 具有这种功能，让主线程去等待子任务全部执行完成之后才继续执行。</p><p>此时还有一个关键，我们需要知道子线程执行的结果，所以我们用 Runnable 作为线程任务就不行了，因为 Runnable 是没有返回值的，我们需要选择 Callable 作为任务。</p><p>我们写了一个 demo，首先我们来看一下单个商品退款的代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单商品退款，耗时 30 毫秒，退款成功返回 true，失败返回 false</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefundDemo</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 根据商品 ID 进行退款   * @param itemId   * @return   */</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">refundByItem</span><span class="token punctuation">(</span>Long itemId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 线程沉睡 30 毫秒，模拟单个商品退款过程</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"refund success,itemId is {}"</span><span class="token punctuation">,</span> itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"refundByItemError,itemId is {}"</span><span class="token punctuation">,</span> itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接着我们看下 30 个商品的批量退款，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchRefundDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义线程池</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ExecutorService EXECUTOR_SERVICE <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> 0L<span class="token punctuation">,</span>                                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// state 初始化为 30 </span>    CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RefundDemo refundDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefundDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 准备 30 个商品</span>    List<span class="token operator">&lt;</span>Long<span class="token operator">></span> items <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 准备开始批量退款</span>    List<span class="token operator">&lt;</span>Future<span class="token operator">></span> futures <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Long item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用 Callable，因为我们需要等到返回值</span>      Future<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> future <span class="token operator">=</span> EXECUTOR_SERVICE<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          <span class="token keyword">boolean</span> result <span class="token operator">=</span> refundDemo<span class="token punctuation">.</span><span class="token function">refundByItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 每个子线程都会执行 countDown，使 state -1 ，但只有最后一个才能真的唤醒主线程</span>          countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 收集批量退款的结果</span>      futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"30 个商品已经在退款中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使主线程阻塞，一直等待 30 个商品都退款完成，才能继续执行</span>    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"30 个商品已经退款完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿到所有结果进行分析</span>    List<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> result <span class="token operator">=</span> futures<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fu<span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// get 的超时时间设置的是 1 毫秒，是为了说明此时所有的子线程都已经执行完成了</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印结果统计</span>    <span class="token keyword">long</span> success <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行结果成功{},失败{}"</span><span class="token punctuation">,</span>success<span class="token punctuation">,</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码只是大概的底层思路，真实的项目会在此思路之上加上请求分组，超时打断等等优化措施。</p><p>我们来看一下执行的结果:</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/CountDownLatch%E5%95%86%E5%93%81%E9%80%80%E6%AC%BE%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="CountDownLatch商品退款执行结果"></p><p>从执行的截图中，我们可以明显的看到 CountDownLatch 已经发挥出了作用，主线程会一直等到 30 个商品的退款结果之后才会继续执行。</p><p>接着我们做了一个不严谨的实验（把以上代码执行很多次，求耗时平均值），通过以上代码，30 个商品退款完成之后，整体耗时大概在 200 毫秒左右。</p><p>而通过 for 循环单商品进行退款，大概耗时在 1 秒左右，前后性能相差 5 倍左右，for 循环退款的代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> begin1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Long item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>  refundDemo<span class="token punctuation">.</span><span class="token function">refundByItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"for 循环单个退款耗时{}"</span><span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>begin1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>性能的巨大提升是线程池 + 锁两者结合的功劳。</p><h4 id="6-5-3-总结"><a href="#6-5-3-总结" class="headerlink" title="6.5.3-总结"></a>6.5.3-总结</h4><p>本章举了实际工作中的两个小案列，看到了 CountDownLatch 和 synchronized（ReentrantLock） 是如何结合实际需求进行落地的，特别是 CountDownLatch 的案列，使用线程池 + 锁结合的方式大大提高了生产效率，所以在工作中如果你也遇到相似的场景，可以毫不犹豫地用起来。</p><h3 id="6-6-从容不迫：重写锁的设计结构和细节"><a href="#6-6-从容不迫：重写锁的设计结构和细节" class="headerlink" title="6.6-从容不迫：重写锁的设计结构和细节"></a>6.6-从容不迫：重写锁的设计结构和细节</h3><p>有的面试官喜欢让同学在说完锁的原理之后，让你重写一个新的锁，要求现场在白板上写出大概的思路和代码逻辑，这种面试题目，蛮难的，我个人觉得其侧重点主要是两个部分：</p><ol><li>考察一下你对锁原理的理解是如何来的，如果你对源码没有解读过的话，只是看看网上的文章，或者背面试题，也是能够说出大概的原理，但你很难现场写出一个锁的实现代码，除非你真的看过源码，或者有和锁相关的项目经验；</li><li>我们不需要创造，我们只需要模仿 Java 锁中现有的 API 进行重写即可。</li></ol><p>如果你看过源码，这道题真的很简单，你可以挑选一个你熟悉的锁进行模仿。</p><p>在锁章节中我们之前说的都是排它锁，这小节我们以共享锁作为案列，自定义一个共享锁。</p><h4 id="6-6-1-需求"><a href="#6-6-1-需求" class="headerlink" title="6.6.1-需求"></a>6.6.1-需求</h4><p>一般自定义锁的时候，我们都是根据需求来进行定义的，不可能凭空定义出锁来，说到共享锁，大家可能会想到很多场景，比如说对于共享资源的读锁可以是共享的，比如对于数据库链接的共享访问，比如对于 Socket 服务端的链接数是可以共享的，场景有很多，我们选择共享访问数据库链接这个场景来定义一个锁。</p><h4 id="6-6-2-详细设计"><a href="#6-6-2-详细设计" class="headerlink" title="6.6.2-详细设计"></a>6.6.2-详细设计</h4><p>假定(以下设想都为假定)我们的数据库是单机 mysql，只能承受 10 个链接，创建数据库链接时，我们是通过最原始 JDBC 的方式，我们用一个接口把用 JDBC 创建链接的过程进行了封装，这个接口我们命名为：创建链接接口。</p><p>共享访问数据库链接的整体要求如下：所有请求加在一起的 mysql 链接数，最大不能超过 10（包含 10），一旦超过 10，直接报错。</p><p>在这个背景下，我们进行了下图的设计：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%81%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1.jpeg" alt="自定义锁详细设计"></p><p>这个设计最最关键的地方，就是我们通过能否获得锁，来决定是否可以得到 mysql 链接，如果能获得锁，那么就能得到链接，否则直接报错。</p><p>接着我们一起来看下落地的代码：</p><h5 id="1-定义锁"><a href="#1-定义锁" class="headerlink" title="1.定义锁"></a>1.定义锁</h5><p>首先我们需要定义一个锁出来，定义时需要有两个元素：</p><ol><li>锁的定义：同步器 Sync；</li><li>锁对外提供的加锁和解锁的方法。</li></ol><p>共享锁的代码实现如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 共享不公平锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShareLock</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同步器</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于确保不能超过最大值</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxCount<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 初始化时给同步器 sync 赋值   * count 代表可以获得共享锁的最大值   */</span>  <span class="token keyword">public</span> <span class="token function">ShareLock</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    maxCount <span class="token operator">=</span> count<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 获得锁   * @return true 表示成功获得锁，false 表示失败   */</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">acquireByShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 释放锁   * @return true 表示成功释放锁，false 表示失败   */</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><p>从上述代码中可以看出，加锁和释放锁的实现，都依靠同步器 Sync 的底层实现。</p><p>唯一需要注意的是，锁需要规定好 API 的规范，主要是两方面：</p><ol><li>API 需要什么，就是锁在初始化的时候，你需要传哪些参数给我，在 ShareLock 初始化时，需要传最大可共享锁的数目；</li><li>需要定义自身的能力，即定义每个方法的入参和出参。在 ShareLock 的实现中，加锁和释放锁的入参都没有，是方法里面写死的 1，表示每次方法执行，只能加锁一次或释放锁一次，出参是布尔值，true 表示加锁或释放锁成功，false 表示失败，底层使用的都是 Sync 非公平锁。</li></ol><p>以上这种思考方式是有方法论的，就是我们在思考一个问题时，可以从两个方面出发：API 是什么？API 有什么能力？</p><h5 id="2-定义同步器-Sync"><a href="#2-定义同步器-Sync" class="headerlink" title="2.定义同步器 Sync"></a>2.定义同步器 Sync</h5><p>Sync 直接继承 AQS ，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 表示最多有 count 个共享锁可以获得</span>  <span class="token keyword">public</span> <span class="token function">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setState</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获得 i 个锁</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">acquireByShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自旋保证 CAS 一定可以成功</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果没有锁可以获得，直接返回 false</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> expectState <span class="token operator">=</span> state <span class="token operator">-</span> i<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果要得到的锁不够了，直接返回 false</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>expectState <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// CAS 尝试得到锁,CAS 成功获得锁，失败继续 for 循环</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>expectState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 释放 i 个锁</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arg<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> expectState <span class="token operator">=</span> state <span class="token operator">+</span> arg<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 超过了 int 的最大值，或者 expectState 超过了我们的最大预期</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>expectState <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> expectState <span class="token operator">></span> maxCount<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"state 超过预期，当前 state is {},计算出的 state is {}"</span><span class="token punctuation">,</span>state        <span class="token punctuation">,</span>expectState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> expectState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>整个代码比较清晰，我们需要注意的是：</p><ol><li>边界的判断，比如入参是否非法，释放锁时，会不会出现预期的 state 非法等边界问题，对于此类问题我们都需要加以判断，体现出思维的严谨性；</li><li>加锁和释放锁，需要用 for 自旋 + CAS 的形式，来保证当并发加锁或释放锁时，可以重试成功。写 for 自旋时，我们需要注意在适当的时机要 return，不要造成死循环，CAS 的方法 AQS 已经提供了，不要自己写，我们自己写的 CAS 方法是无法保证原子性的。</li></ol><h5 id="3-通过能否获得锁来决定能否得到链接"><a href="#3-通过能否获得锁来决定能否得到链接" class="headerlink" title="3.通过能否获得锁来决定能否得到链接"></a>3.通过能否获得锁来决定能否得到链接</h5><p>锁定义好了，我们需要把锁和获取 Mysql 链接结合起来，我们写了一个 Mysql 链接的工具类，叫做 MysqlConnection，其主要负责两大功能：</p><ol><li>通过 JDBC 建立和 Mysql 的链接；</li><li>结合锁，来防止请求过大时，Mysql 的总链接数不能超过 10 个。</li></ol><p>首先我们看下 MysqlConnection 初始化的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlConnection</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> ShareLock lock<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// maxConnectionSize 表示最大链接数</span>  <span class="token keyword">public</span> <span class="token function">MysqlConnection</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxConnectionSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShareLock</span><span class="token punctuation">(</span>maxConnectionSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，在初始化时，需要制定最大的链接数是多少，然后把这个数值传递给锁，因为最大的链接数就是 ShareLock 锁的 state 值。</p><p>接着为了完成 1，我们写了一个 private 的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 得到一个 mysql 链接，底层实现省略</span><span class="token keyword">private</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后我们实现 2，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对外获取 mysql 链接的接口</span><span class="token comment" spellcheck="true">// 这里不用try finally 的结构，获得锁实现底层不会有异常</span><span class="token comment" spellcheck="true">// 即使出现未知异常，也无需释放锁</span><span class="token keyword">public</span> Connection <span class="token function">getLimitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对外释放 mysql 链接的接口</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">releaseLimitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>逻辑也比较简单，加锁时，如果获得了锁，就能返回 Mysql 的链接，释放锁时，在链接关闭成功之后，调用 releaseLimitConnection 方法即可，此方法会把锁的 state 状态加一，表示链接被释放了。</p><p>以上步骤，针对 Mysql 链接限制的场景锁就完成了。</p><h4 id="6-6-3-测试"><a href="#6-6-3-测试" class="headerlink" title="6.6.3-测试"></a>6.6.3-测试</h4><p>锁写好了，接着我们来测试一下，我们写了一个测试的 demo，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"模仿开始获得 mysql 链接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MysqlConnection mysqlConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlConnection</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"初始化 Mysql 链接最大只能获取 10 个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> mysqlConnection<span class="token punctuation">.</span><span class="token function">getLimitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获得第{}个数据库链接成功"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获得第{}个数据库链接失败：数据库连接池已满"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"模仿开始释放 mysql 链接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mysqlConnection<span class="token punctuation">.</span><span class="token function">releaseLimitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"释放第{}个数据库链接成功"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"释放第{}个数据库链接失败"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"模仿结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码逻辑如下：</p><ol><li>获得 Mysql 链接逻辑：for 循环获取链接，1<del>10 都可以获得链接，11</del>12 获取不到链接，因为链接被用完了；</li><li>释放锁逻辑：for 循环释放链接，1<del>10 都可以释放成功，11</del>12 释放失败。</li></ol><p>我们看下运行结果，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%81%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.jpeg" alt="自定义锁测试结果"></p><p>从运行的结果，可以看出，我们实现的 ShareLock 锁已经完成了 Mysql 链接共享的场景了。</p><h4 id="6-6-4-总结"><a href="#6-6-4-总结" class="headerlink" title="6.6.4-总结"></a>6.6.4-总结</h4><p>同学们阅读到这里不知道有没有两点感受：</p><ol><li>重写锁真的很简单，最关键的是要和场景完美贴合，能满足业务场景的锁才是好锁；</li><li>锁其实只是来满足业务场景的，本质都是 AQS，所以只要 AQS 学会了，在了解清楚场景的情况下，重写锁都不难的。</li></ol><p>锁章节最核心的就是 AQS 源码解析的两章，只要我们把 AQS 弄懂了，其余锁的实现，只要稍微看下源码实现，几乎马上就能知道其底层实现的原理，大多数都是通过操作 state 来完成不同的场景需求，所以还是建议大家多看 AQS 源码，多 debug AQS 源码，只要 AQS 弄清楚了，锁都很简单。</p><h2 id="7-线程池"><a href="#7-线程池" class="headerlink" title="7-线程池"></a>7-线程池</h2><h3 id="7-1-ThreadPoolExecutor-源码解析"><a href="#7-1-ThreadPoolExecutor-源码解析" class="headerlink" title="7.1-ThreadPoolExecutor 源码解析"></a>7.1-ThreadPoolExecutor 源码解析</h3><p>线程池我们在工作中经常会用到。在请求量大时，使用线程池，可以充分利用机器资源，增加请求的处理速度，本章节我们就和大家一起来学习线程池。</p><p>本章的基础是第四章队列和第五章线程，没有看过这两章的同学可以先看一看。</p><p>本章的顺序，先说源码，弄懂原理，接着看一看面试题，最后看看实际工作中是如何运用线程池的。</p><h4 id="7-1-1-整体架构"><a href="#7-1-1-整体架构" class="headerlink" title="7.1.1-整体架构"></a>7.1.1-整体架构</h4><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.jpeg" alt="线程池的整体架构"></p><p>本小节主要就按照这个图来进行 ThreadPoolExecutor 源码的讲解，大家在看各个方法时，可以结合这个图一起看。</p><h5 id="1-类结构"><a href="#1-类结构" class="headerlink" title="1.类结构"></a>1.类结构</h5><p>首先我们来看一下 ThreadPoolExecutor 的类结构，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ThreadPoolExecutor%E7%B1%BB%E7%BB%93%E6%9E%84.jpeg" alt="ThreadPoolExecutor类结构"></p><p>从上图中，我们从命名上来看，都有 Executor 的共同命名，Executor 的中文意思为执行的意思，表示对提供的任务进行执行，我们在第五章线程中学习到了几种任务：Runnable、Callable、FutureTask，之前我们都是使用 Thread 来执行这些任务的，除了 Thread，这些 Executor 命名的类和接口也是可以执行这几种任务的，接下来我们大概的看下这几个类的大概含义：</p><ol><li><p>Executor：定义 execute 方法来执行任务，入参是 Runnable，无出参：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Executor.jpeg" alt="Executor"></p></li><li><p>ExecutorService：Executor 的功能太弱，ExecutorService 丰富了对任务的执行和管理的功能，主要代码如下：</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 关闭，不会接受新的任务，也不会等待未完成的任务</span><span class="token comment" spellcheck="true">// 如果需要等待未完成的任务，可以使用 awaitTermination 方法</span><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// executor 是否已经关闭了，返回值 true 表示已关闭</span><span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 所有的任务是否都已经终止，是的话，返回 true</span><span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在超时时间内，等待剩余的任务终止</span><span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 提交有返回值的任务，使用 get 方法可以阻塞等待任务的执行结果返回</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 提交没有返回值的任务，如果使用 get 方法的话，任务执行完之后得到的是 null 值</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给定任务集合，返回已经执行完成的 Future 集合，每个返回的 Future 都是 isDone = true 的状态</span><span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> tasks<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给定任务中有一个执行成功就返回，如果抛异常，其余未完成的任务将被取消</span><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">invokeAny</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> tasks<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span></code></pre><ol><li>AbstractExecutorService 是一个抽象类，封装了 Executor 的很多通用功能，比如：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 把 Runnable 转化成 RunnableFuture</span><span class="token comment" spellcheck="true">// RunnableFuture 是一个接口，实现了 Runnable 和 Future</span><span class="token comment" spellcheck="true">// FutureTask 是 RunnableFuture 的实现类，主要是对任务进行各种管理</span><span class="token comment" spellcheck="true">// Runnable + Future => RunnableFuture => FutureTask</span><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">,</span> T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 提交无返回值的任务</span><span class="token keyword">public</span> Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ftask 其实是 FutureTask</span>    RunnableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 提交有返回值的任务</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ftask 其实是 FutureTask</span>    RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有几个点需要注意下：</p><ol><li>FutureTask 我们在第五章有说，其本身就是一个任务，而且具备对任务管理的功能，比如可以通过 get 方法拿到任务的执行结果；</li><li>submit 方法是我们平时使用线程池时提交任务的方法，支持 Runable 和 Callable 两种任务的提交，方法中 execute 方法是其子类 ThreadPoolExecutor 实现的，不管是那种任务入参，execute 方法最终执行的任务都是 FutureTask；</li><li>ThreadPoolExecutor 继承了 AbstractExecutorService 抽象类，具备以上三个类的所有功能。</li></ol><h5 id="2-类注释-1"><a href="#2-类注释-1" class="headerlink" title="2.类注释"></a>2.类注释</h5><p>ThreadPoolExecutor 的类注释有很多，我们选取关键的注释如下：</p><ol><li>ExecutorService 使用线程池中的线程执行提交的任务，线程池我们可以使用 Executors 进行配置；</li><li>线程池解决两个问题：1：通过减少任务间的调度开销 (主要是通过线程池中的线程被重复使用的方式)，来提高大量任务时的执行性能；2：提供了一种方式来管理线程和消费，维护基本数据统计等工作，比如统计已完成的任务数；</li><li>Executors 为常用的场景设定了可直接初始化线程池的方法，比如 Executors#newCachedThreadPool 无界的线程池，并且可以自动回收；Executors#newFixedThreadPool 固定大小线程池；Executors#newSingleThreadExecutor 单个线程的线程池；</li><li>为了在各种上下文中使用线程池，线程池提供可供扩展的参数设置：1：coreSize：当新任务提交时，发现运行的线程数小于 coreSize，一个新的线程将被创建，即使这时候其它工作线程是空闲的，可以通过 getCorePoolSize 方法获得 coreSize；2：maxSize: 当任务提交时，coreSize &lt; 运行线程数 &lt;= maxSize，但队列没有满时，任务提交到队列中，如果队列满了，在 maxSize 允许的范围内新建线程；</li><li>一般来说，coreSize 和 maxSize 在线程池初始化时就已经设定了，但我们也可以通过 setCorePoolSize、setMaximumPoolSize 方法动态的修改这两个值；</li><li>默认的，core threads 需要到任务提交后才创建的，但我们可以分别使用 prestartCoreThread、prestartAllCoreThreads 两个方法来提前创建一个、所有的 core threads；</li><li>新的线程被默认 ThreadFactory 创建时，优先级会被限制成 NORM_PRIORITY，默认会被设置成非守护线程，这个和新建线程的继承是不同的；</li><li>Keep-alive times 参数的作用：1：如果当前线程池中有超过 coreSize 的线程；2：并且线程空闲的时间超过 keepAliveTime，当前线程就会被回收，这样可以避免线程没有被使用时的资源浪费；</li><li>通过 setKeepAliveTime 方法可以动态的设置 keepAliveTime 的值；</li><li>如果设置 allowCoreThreadTimeOut 为 ture 的话，core thread 空闲时间超过 keepAliveTime 的话，也会被回收；</li><li>线程池新建时，有多种队列可供选择，比如：1：SynchronousQueue，为了避免任务被拒绝，要求线程池的 maxSize 无界，缺点是当任务提交的速度超过消费的速度时，可能出现无限制的线程增长；2：LinkedBlockingQueue，无界队列，未消费的任务可以在队列中等待；3：ArrayBlockingQueue，有界队列，可以防止资源被耗尽；</li><li>队列的维护：提供了 getQueue () 方法方便我们进行监控和调试，严禁用于其他目的，remove 和 purge 两个方法可以对队列中的元素进行操作；</li><li>在 Executor 已经关闭或对最大线程和最大队列都使用饱和时，可以使用 RejectedExecutionHandler 类进行异常捕捉，有如下四种处理策略：ThreadPoolExecutor.AbortPolicy、ThreadPoolExecutor.DiscardPolicy、ThreadPoolExecutor.CallerRunsPolicy、ThreadPoolExecutor.DiscardOldestPolicy；</li><li>线程池提供了很多可供扩展的钩子函数，比如有：1：提供在每个任务执行之前 beforeExecute 和执行之后 afterExecute 的钩子方法，主要用于操作执行环境，比如初始化 ThreadLocals、收集统计数据、添加日志条目等；2: 如果在执行器执行完成之后想干一些事情，可以实现 terminated 方法，如果钩子方法执行时发生异常，工作线程可能会失败并立即终止。</li></ol><p>可以看到 ThreadPoolExecutor 的注释是非常多的，也是非常重要的，我们很多面试的题目，在注释上都能找到答案。</p><h5 id="3-ThreadPoolExecutor-重要属性"><a href="#3-ThreadPoolExecutor-重要属性" class="headerlink" title="3.ThreadPoolExecutor 重要属性"></a>3.ThreadPoolExecutor 重要属性</h5><p>接下来我们来看一看 ThreadPoolExecutor 都有哪些重要属性，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ctl 线程池状态控制字段，由两部分组成：</span><span class="token comment" spellcheck="true">//1:workerCount  wc 工作线程数，我们限制 workerCount 最大到(2^29)-1，大概 5 亿个线程</span><span class="token comment" spellcheck="true">//2:runState rs 线程池的状态，提供了生命周期的控制，源码中有很多关于状态的校验，状态枚举如下：</span><span class="token comment" spellcheck="true">//RUNNING（-536870912）：接受新任务或者处理队列里的任务。</span><span class="token comment" spellcheck="true">//SHUTDOWN（0）：不接受新任务，但仍在处理已经在队列里面的任务。</span><span class="token comment" spellcheck="true">//STOP（-536870912）：不接受新任务，也不处理队列中的任务，对正在执行的任务进行中断。</span><span class="token comment" spellcheck="true">//TIDYING（1073741824）： 所以任务都被中断，workerCount 是 0，整理状态</span><span class="token comment" spellcheck="true">//TERMINATED（1610612736）： terminated() 已经完成的时候</span><span class="token comment" spellcheck="true">//runState 之间的转变过程：</span><span class="token comment" spellcheck="true">//RUNNING -> SHUTDOWN：调用 shudown(),finalize()</span><span class="token comment" spellcheck="true">//(RUNNING or SHUTDOWN) -> STOP：调用shutdownNow()</span><span class="token comment" spellcheck="true">//SHUTDOWN -> TIDYING -> workerCount ==0</span><span class="token comment" spellcheck="true">//STOP -> TIDYING -> workerCount ==0</span><span class="token comment" spellcheck="true">//TIDYING -> TERMINATED -> terminated() 执行完成之后</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 29</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =(2^29)-1=536870911</span><span class="token comment" spellcheck="true">// Packing and unpacking ctl</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-536870912</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-536870912</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1073741824</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1610612736</span><span class="token comment" spellcheck="true">// 已完成任务的计数</span><span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程池最大容量</span><span class="token keyword">private</span> <span class="token keyword">int</span> largestPoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 已经完成的任务数</span><span class="token keyword">private</span> <span class="token keyword">long</span> completedTaskCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户可控制的参数都是 volatile 修饰的</span><span class="token comment" spellcheck="true">// 可以使用 threadFactory 创建 thread</span><span class="token comment" spellcheck="true">// 创建失败一般不抛出异常，只有在 OutOfMemoryError 时候才会</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> ThreadFactory threadFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 饱和或者运行中拒绝任务的 handler 处理类</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> RejectedExecutionHandler handler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程存活时间设置</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 true 的话，核心线程空闲 keepAliveTime 时间后，也会被回收</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// coreSize</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// maxSize 最大限制 (2^29)-1</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认的拒绝策略</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> RejectedExecutionHandler defaultHandler <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 队列会 hold 住任务，并且利用队列的阻塞的特性，来保持线程的存活周期</span><span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 大多数情况下是控制对 workers 的访问权限</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition termination <span class="token operator">=</span> mainLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 包含线程池中所有的工作线程</span><span class="token keyword">private</span> <span class="token keyword">final</span> HashSet<span class="token operator">&lt;</span>Worker<span class="token operator">></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>属性也是非常多，为了方便理解线程池的状态扭转，画了一个图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%8A%B6%E6%80%81%E6%89%AD%E8%BD%AC.jpeg" alt="线程池的状态扭转"></p><p>Worker 我们可以理解成线程池中任务运行的最小单元，Worker 的大致结构如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程池中任务执行的最小单元</span><span class="token comment" spellcheck="true">// Worker 继承 AQS，具有锁功能</span><span class="token comment" spellcheck="true">// Worker 实现 Runnable，本身是一个可执行的任务</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span>    <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 任务运行的线程</span>    <span class="token keyword">final</span> Thread thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要执行的任务</span>    Runnable firstTask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非常巧妙的设计,Worker本身是个 Runnable,把自己作为任务传递给 thread</span>    <span class="token comment" spellcheck="true">// 内部有个属性又设置了 Runnable</span>    <span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把 Worker 自己作为 thread 运行的任务</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/** Worker 本身是 Runnable，run 方法是 Worker 执行的入口， runWorker 是外部的方法 */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6138294804551838833L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Lock methods</span>    <span class="token comment" spellcheck="true">// 0 代表没有锁住，1 代表锁住</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尝试加锁，CAS 赋值为 1，表示锁住</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尝试释放锁，释放锁没有 CAS 校验，可以任意的释放锁</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>理解 Worker 非常关键，主要有以下几点：</p><ol><li>Worker 很像是任务的代理，在线程池中，最小的执行单位就是 Worker，所以 Worker 实现了 Runnable 接口，实现了 run 方法；</li><li>在 Worker 初始化时 this.thread = getThreadFactory ().newThread (this) 这行代码比较关键，它把当前 Worker 作为线程的构造器入参，我们在后续的实现中会发现这样的代码：Thread t = w.thread;t.start ()，此时的 w 是 Worker 的引用申明，此处 t.start 实际上执行的就是 Worker 的 run 方法；</li><li>Worker 本身也实现了 AQS，所以其本身也是一个锁，其在执行任务的时候，会锁住自己，任务执行完成之后，会释放自己。</li></ol><h4 id="7-1-2-线程池的任务提交"><a href="#7-1-2-线程池的任务提交" class="headerlink" title="7.1.2-线程池的任务提交"></a>7.1.2-线程池的任务提交</h4><p>线程池的任务提交从 submit 方法说起，submit 方法是 AbstractExecutorService 抽象类定义的，主要做了两件事情：</p><ol><li>把 Runnable 和 Callable 都转化成 FutureTask，这个我们之前看过源码了；</li><li>使用 execute 方法执行 FutureTask。</li></ol><p>execute 方法是 ThreadPoolExecutor 中的方法，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作的线程小于核心线程数，创建新的线程，成功返回，失败不抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程池状态可能发生变化</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 工作的线程大于等于核心线程数，或者新建线程失败</span>    <span class="token comment" spellcheck="true">// 线程池状态正常，并且可以入队的话，尝试入队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果线程池状态异常 尝试从队列中移除任务，可以移除的话就拒绝掉任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发现可运行的线程数是 0，就初始化一个线程，这里是个极限情况，入队的时候，突然发现</span>        <span class="token comment" spellcheck="true">// 可用线程都被回收了</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Runnable是空的，不会影响新增线程，但是线程在 start 的时候不会运行</span>            <span class="token comment" spellcheck="true">// Thread.run() 里面有判断</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 队列满了，开启线程到 maxSize，如果失败直接拒绝,</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>execute 方法执行的就是整体架构图的左半边的逻辑，其中多次调用 addWorker 方法，addWorker 方法的作用是新建一个 Worker，我们一起来看下源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 结合线程池的情况看是否可以添加新的 worker</span><span class="token comment" spellcheck="true">// firstTask 不为空可以直接执行，为空执行不了，Thread.run()方法有判断，Runnable为空不执行</span><span class="token comment" spellcheck="true">// core 为 true 表示线程最大新增个数是 coresize，false 表示最大新增个数是 maxsize</span><span class="token comment" spellcheck="true">// 返回 true 代表成功，false 失败</span><span class="token comment" spellcheck="true">// break retry 跳到retry处，且不再进入循环</span><span class="token comment" spellcheck="true">// continue retry 跳到retry处，且再次进入循环</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 先是各种状态的校验</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token comment" spellcheck="true">// rs >= SHUTDOWN 说明线程池状态不正常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 工作中的线程数大于等于容量，或者大于等于 coreSize or maxSize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// break 结束 retry 的 for 循环</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>            <span class="token comment" spellcheck="true">// 线程池状态被更改</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 跳转到retry位置</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 巧妙的设计，Worker 本身是个 Runnable.</span>        <span class="token comment" spellcheck="true">// 在初始化的过程中，会把 worker 丢给 thread 去初始化</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动线程，实际上去执行 Worker.run 方法</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>addWorker 方法首先是执行了一堆校验，然后使用 new Worker (firstTask) 新建了 Worker，最后使用 t.start () 执行 Worker，上文我们说了 Worker 在初始化时的关键代码：<code>this.thread = getThreadFactory ().newThread (this)，Worker（this） 是作为新建线程的构造器入参的，所以 t.start ()</code> 会执行到 Worker 的 run 方法上，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>runWorker 方法是非常重要的方法，我们一起看下源码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//帮助gc回收</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// task 为空的情况：</span>        <span class="token comment" spellcheck="true">// 1：任务入队列了，极限情况下，发现没有运行的线程，于是新增一个线程；</span>        <span class="token comment" spellcheck="true">// 2：线程执行完任务执行，再次回到 while 循环。</span>        <span class="token comment" spellcheck="true">// 如果 task 为空，会使用 getTask 方法阻塞从队列中拿数据，如果拿不到数据，会阻塞住</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//锁住 worker</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 线程池 stop 中,但是线程没有到达中断状态，帮助线程中断</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                 <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//执行 before 钩子函数</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//同步执行任务</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//执行 after 钩子函数,如果这里抛出异常，会覆盖 catch 的异常</span>                    <span class="token comment" spellcheck="true">//所以这里异常最好不要抛出来</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//任务执行完成，计算解锁</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做一些抛出异常的善后工作</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个方法执行的逻辑是架构图中的标红部分：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%8F%90%E4%BA%A4.jpeg" alt="线程池的任务提交"></p><p>我们聚焦一下这行代码：task.run () 此时的 task 是什么呢？此时的 task 是 FutureTask 类，所以我们继续追索到 FutureTask 类的 run 方法的源码，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * run 方法可以直接被调用 * 也可以由线程池进行调用 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 状态不是任务创建，或者当前任务已经有线程在执行了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span>        <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                     null<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Callable 不为空，并且已经初始化完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V result<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> ran<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用执行</span>                result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> null<span class="token punctuation">;</span>                ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 给 outcome 赋值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ran<span class="token punctuation">)</span>                <span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// runner must be non-null until state is settled to</span>        <span class="token comment" spellcheck="true">// prevent concurrent calls to run()</span>        runner <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// state must be re-read after nulling runner to prevent</span>        <span class="token comment" spellcheck="true">// leaked interrupts</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>            <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>run 方法中有两行关键代码：</p><ol><li>result = c.call () 这行代码是真正执行业务代码的地方；</li><li>set (result) 这里是给 outCome 赋值，这样 Future.get 方法执行时，就可以从 outCome 中拿值，这个我们在《Future、ExecutorService 源码解析》章节中都有说到。</li></ol><p>至此，submit 方法就执行完成了，整体流程比较复杂，我们画一个图释义一下任务提交执行的流程：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E4%BB%BB%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%B5%81%E7%A8%8B.jpeg" alt="任务提交执行的流程"></p><h4 id="7-1-3-线程执行完任务之后都在干啥"><a href="#7-1-3-线程执行完任务之后都在干啥" class="headerlink" title="7.1.3-线程执行完任务之后都在干啥"></a>7.1.3-线程执行完任务之后都在干啥</h4><p>线程执行完任务之后，是消亡还是干什么呢？这是一个值得思考的问题，我们可以从源码中找到答案，从 ThreadPoolExecutor 的 runWorker 方法中，不知道有没有同学注意到一个 while 循环，我们截图释义一下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%AE%8C%E4%BB%BB%E5%8A%A1%E4%B9%8B%E5%90%8E.jpeg" alt="线程执行完任务之后"></p><p>这个 while 循环有个 getTask 方法，getTask 的主要作用是阻塞从队列中拿任务出来，如果队列中有任务，那么就可以拿出来执行，如果队列中没有任务，这个线程会一直阻塞到有任务为止（或者超时阻塞），下面我们一起来看下 getTask 方法，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从阻塞队列中拿任务</span><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程池关闭 &amp;&amp; 队列为空，不需要在运行了，直接放回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Are workers subject to culling?</span>        <span class="token comment" spellcheck="true">// true  运行的线程数大于 coreSize || 核心线程也可以被灭亡</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队列以 LinkedBlockingQueue 为例，timedOut 为 true 的话说明下面 poll 方法执行返回的是 null</span>        <span class="token comment" spellcheck="true">// 说明在等待 keepAliveTime 时间后，队列中仍然没有数据</span>        <span class="token comment" spellcheck="true">// 说明此线程已经空闲了 keepAliveTime 了</span>        <span class="token comment" spellcheck="true">// 再加上 wc > 1 || workQueue.isEmpty() 的判断</span>        <span class="token comment" spellcheck="true">// 所以使用 compareAndDecrementWorkerCount 方法使线程池数量减少 1</span>        <span class="token comment" spellcheck="true">// 并且直接 return，return 之后，此空闲的线程会自动被回收</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从队列中阻塞拿 worker</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>                workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置已超时，说明此时队列没有数据</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码有两处关键：</p><ol><li>使用队列的 poll 或 take 方法从队列中拿数据，根据队列的特性，队列中有任务可以返回，队列中无任务会阻塞；</li><li>方法中的第二个 if 判断，说的是在满足一定条件下（条件看注释），会减少空闲的线程，减少的手段是使可用线程数减一，并且直接 return，直接 return 后，该线程就执行结束了，JVM 会自动回收该线程。</li></ol><h4 id="7-1-4-总结"><a href="#7-1-4-总结" class="headerlink" title="7.1.4-总结"></a>7.1.4-总结</h4><p>本章节主要以 submit 方法为主线阐述了 ThreadPoolExecutor 的整体架构和底层源码，只要有队列和线程的基础知识的话，理解 ThreadPoolExecutor 并不复杂。ThreadPoolExecutor 还有一些其他的源码，比如说拒绝请求的策略、得到各种属性、设置各种属性等等方法，这些方法都比较简单，感兴趣的同学可以自己去看一看。</p><h3 id="7-2-线程池源码面试题"><a href="#7-2-线程池源码面试题" class="headerlink" title="7.2-线程池源码面试题"></a>7.2-线程池源码面试题</h3><p>线程池在日常面试中占比很大，主要是因为线程池内容涉及的知识点较广，比如涉及到队列、线程、锁等等，所以很多面试官喜欢把线程池作为问题的起点，然后延伸到其它内容，由于我们专栏已经说过队列、线程、锁面试题了，所以本章面试题还是以线程池为主。</p><h5 id="1-说说你对线程池的理解？"><a href="#1-说说你对线程池的理解？" class="headerlink" title="1.说说你对线程池的理解？"></a>1.说说你对线程池的理解？</h5><p>答：答题思路从大到小，从全面到局部，总的可以这么说，线程池结合了锁、线程、队列等元素，在请求量较大的环境下，可以多线程的处理请求，充分的利用了系统的资源，提高了处理请求的速度，细节可以从以下几个方面阐述：</p><ol><li>ThreadPoolExecutor 类结构；</li><li>ThreadPoolExecutor coreSize、maxSize 等重要属性；</li><li>Worker 的重要作用；</li><li>submit 的整个过程。</li></ol><p>通过以上总分的描述，应该可以说清楚对线程池的理解了，如果是面对面面试的话，可以边说边画出线程池的整体架构图（见《ThreadPoolExecutor 源码解析》）。</p><h5 id="2-hreadPoolExecutor、Executor、ExecutorService、Runnable、Callable、FutureTask-之间的关系？"><a href="#2-hreadPoolExecutor、Executor、ExecutorService、Runnable、Callable、FutureTask-之间的关系？" class="headerlink" title="2.hreadPoolExecutor、Executor、ExecutorService、Runnable、Callable、FutureTask 之间的关系？"></a>2.hreadPoolExecutor、Executor、ExecutorService、Runnable、Callable、FutureTask 之间的关系？</h5><p>答：以上 6 个类可以分成两大类：一种是定义任务类，一种是执行任务类。</p><ol><li>定义任务类：Runnable、Callable、FutureTask。Runnable 是定义无返回值的任务，Callable 是定义有返回值的任务，FutureTask 是对 Runnable 和 Callable 两种任务的统一，并增加了对任务的管理功能；</li><li>执行任务类：ThreadPoolExecutor、Executor、ExecutorService。Executor 定义最基本的运行接口，ExecutorService 是对其功能的补充，ThreadPoolExecutor 提供真正可运行的线程池类，三个类定义了任务的运行机制。</li></ol><p>日常的做法都是先根据定义任务类定义出任务来，然后丢给执行任务类去执行。</p><h5 id="3-说一说队列在线程池中起的作用？"><a href="#3-说一说队列在线程池中起的作用？" class="headerlink" title="3.说一说队列在线程池中起的作用？"></a>3.说一说队列在线程池中起的作用？</h5><p>答：作用如下：</p><ol><li>当请求数大于 coreSize 时，可以让任务在队列中排队，让线程池中的线程慢慢的消费请求，实际工作中，实际线程数不可能等于请求数，队列提供了一种机制让任务可排队，起一个缓冲区的作用；</li><li>当线程消费完所有的线程后，会阻塞的从队列中拿数据，通过队列阻塞的功能，使线程不消亡，一旦队列中有数据产生后，可立马被消费。</li></ol><h5 id="4-结合请求不断增加时，说一说线程池构造器参数的含义和表现？"><a href="#4-结合请求不断增加时，说一说线程池构造器参数的含义和表现？" class="headerlink" title="4.结合请求不断增加时，说一说线程池构造器参数的含义和表现？"></a>4.结合请求不断增加时，说一说线程池构造器参数的含义和表现？</h5><p>答：线程池构造器各个参数的含义如下：</p><ol><li>coreSize 核心线程数；</li><li>maxSize 最大线程数；</li><li>keepAliveTime 线程空闲的最大时间；</li><li>queue 有多种队列可供选择，比如：1：SynchronousQueue，为了避免任务被拒绝，要求线程池的 maxSize 无界，缺点是当任务提交的速度超过消费的速度时，可能出现无限制的线程增长；2：LinkedBlockingQueue，无界队列，未消费的任务可以在队列中等待；3：ArrayBlockingQueue，有界队列，可以防止资源被耗尽；</li><li>线程新建的 ThreadFactory 可以自定义，也可以使用默认的 DefaultThreadFactory，DefaultThreadFactory 创建线程时，优先级会被限制成 NORM_PRIORITY，默认会被设置成非守护线程；</li><li>在 Executor 已经关闭或对最大线程和最大队列都使用饱和时，可以使用 RejectedExecutionHandler 类进行异常捕捉，有如下四种处理策略：ThreadPoolExecutor.AbortPolicy、ThreadPoolExecutor.DiscardPolicy、ThreadPoolExecutor.CallerRunsPolicy、ThreadPoolExecutor.DiscardOldestPolicy。</li></ol><p>当请求不断增加时，各个参数起的作用如下：</p><ol><li>请求数 &lt; coreSize：创建新的线程来处理任务；</li><li>coreSize &lt;= 请求数 &amp;&amp; 能够成功入队列：任务进入到队列中等待被消费；</li><li>队列已满 &amp;&amp; 请求数 &lt; maxSize：创建新的线程来处理任务；</li><li>队列已满 &amp;&amp; 请求数 &gt;= maxSize：使用 RejectedExecutionHandler 类拒绝请求。</li></ol><h5 id="5-coreSize-和-maxSize-可以动态设置么，有没有规则限制？"><a href="#5-coreSize-和-maxSize-可以动态设置么，有没有规则限制？" class="headerlink" title="5.coreSize 和 maxSize 可以动态设置么，有没有规则限制？"></a>5.coreSize 和 maxSize 可以动态设置么，有没有规则限制？</h5><p>答：一般来说，coreSize 和 maxSize 在线程池初始化时就已经设定了，但我们也可以通过 setCorePoolSize、setMaximumPoolSize 方法动态的修改这两个值。</p><p>setCorePoolSize 的限制见如下源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果新设置的值小于 coreSize,多余的线程在空闲时会被回收（不保证一定可以回收成功）</span><span class="token comment" spellcheck="true">// 如果大于 coseSize，会新创建线程</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> delta <span class="token operator">=</span> corePoolSize <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 活动的线程大于新设置的核心线程数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> corePoolSize<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 尝试将可以获得锁的 worker 中断，只会循环一次</span>        <span class="token comment" spellcheck="true">// 最后并不能保证活动的线程数一定小于核心线程数</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置的核心线程数大于原来的核心线程数</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 并不清楚应该新增多少线程，取新增核心线程数和等待队列数据的最小值，够用就好</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>delta<span class="token punctuation">,</span> workQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新增线程直到k，如果期间等待队列空了也不会再新增</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>setMaximumPoolSize 的限制见如下源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果 maxSize 大于原来的值，直接设置。</span><span class="token comment" spellcheck="true">// 如果 maxSize 小于原来的值，尝试干掉一些 worker</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> maximumPoolSize <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> maximumPoolSize<span class="token punctuation">)</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="6-说一说对于线程空闲回收的理解，源码中如何体现的？"><a href="#6-说一说对于线程空闲回收的理解，源码中如何体现的？" class="headerlink" title="6.说一说对于线程空闲回收的理解，源码中如何体现的？"></a>6.说一说对于线程空闲回收的理解，源码中如何体现的？</h5><p>答：空闲线程回收的时机：如果线程超过 keepAliveTime 时间后，还从阻塞队列中拿不到任务（这种情况我们称为线程空闲），当前线程就会被回收，如果 allowCoreThreadTimeOut 设置成 true，core thread 也会被回收，直到还剩下一个线程为止，如果 allowCoreThreadTimeOut 设置成 false，只会回收非 core thread 的线程。</p><p>线程在任务执行完成之后，之所有没有消亡，是因为阻塞的从队列中拿任务，在 keepAliveTime 时间后都没有拿到任务的话，就会打断阻塞，线程直接返回，线程的生命周期就结束了，JVM 会回收掉该线程对象，所以我们说的线程回收源码体现就是让线程不在队列中阻塞，直接返回了，可以见 ThreadPoolExecutor 源码解析章节第三小节的源码解析。</p><h5 id="7-如果我想在线程池任务执行之前和之后，做一些资源清理的工作，可以么，如何做？"><a href="#7-如果我想在线程池任务执行之前和之后，做一些资源清理的工作，可以么，如何做？" class="headerlink" title="7.如果我想在线程池任务执行之前和之后，做一些资源清理的工作，可以么，如何做？"></a>7.如果我想在线程池任务执行之前和之后，做一些资源清理的工作，可以么，如何做？</h5><p>答：可以的，ThreadPoolExecutor 提供了一些钩子函数，我们只需要继承 ThreadPoolExecutor 并实现这些钩子函数即可。在线程池任务执行之前实现 beforeExecute 方法，执行之后实现 afterExecute 方法。</p><h5 id="8-线程池中的线程创建，拒绝请求可以自定义实现么？如何自定义？"><a href="#8-线程池中的线程创建，拒绝请求可以自定义实现么？如何自定义？" class="headerlink" title="8.线程池中的线程创建，拒绝请求可以自定义实现么？如何自定义？"></a>8.线程池中的线程创建，拒绝请求可以自定义实现么？如何自定义？</h5><p>答：可以自定义的，线程创建默认使用的是 DefaultThreadFactory，自定义话的只需要实现 ThreadFactory 接口即可；拒绝请求也是可以自定义的，实现 RejectedExecutionHandler 接口即可；在 ThreadPoolExecutor 初始化时，将两个自定义类作为构造器的入参传递给 ThreadPoolExecutor 即可。</p><h5 id="9-说你对-Worker-的理解？"><a href="#9-说你对-Worker-的理解？" class="headerlink" title="9.说你对 Worker 的理解？"></a>9.说你对 Worker 的理解？</h5><p>答：详见《ThreadPoolExecutor 源码解析》</p><h5 id="10-说一说-submit-方法执行的过程？"><a href="#10-说一说-submit-方法执行的过程？" class="headerlink" title="10.说一说 submit 方法执行的过程？"></a>10.说一说 submit 方法执行的过程？</h5><p>答：详见《ThreadPoolExecutor 源码解析》</p><h5 id="11-说一说线程执行任务之后，都在干啥？"><a href="#11-说一说线程执行任务之后，都在干啥？" class="headerlink" title="11.说一说线程执行任务之后，都在干啥？"></a>11.说一说线程执行任务之后，都在干啥？</h5><p>答：线程执行任务完成之后，有两种结果：</p><ol><li>线程会阻塞从队列中拿任务，没有任务的话无限阻塞；</li><li>线程会阻塞从队列中拿任务，没有任务的话阻塞一段时间后，线程返回，被 JVM 回收。</li></ol><h5 id="12-keepAliveTime-设置成负数或者是-0，表示无限阻塞？"><a href="#12-keepAliveTime-设置成负数或者是-0，表示无限阻塞？" class="headerlink" title="12.keepAliveTime 设置成负数或者是 0，表示无限阻塞？"></a>12.keepAliveTime 设置成负数或者是 0，表示无限阻塞？</h5><p>答：这种是不对的，如果 keepAliveTime 设置成负数，在线程池初始化时，就会直接报 IllegalArgumentException 的异常，而设置成 0，队列如果是 LinkedBlockingQueue 的话，执行 workQueue.poll (keepAliveTime, TimeUnit.NANOSECONDS) 方法时，如果队列中没有任务，会直接返回 null，导致线程立马返回，不会无限阻塞。</p><p>如果想无限阻塞的话，可以把 keepAliveTime 设置的很大，把 TimeUnit 也设置的很大，接近于无限阻塞。</p><h5 id="13-说一说-Future-get-方法是如何拿到线程的执行结果的？"><a href="#13-说一说-Future-get-方法是如何拿到线程的执行结果的？" class="headerlink" title="13.说一说 Future.get 方法是如何拿到线程的执行结果的？"></a>13.说一说 Future.get 方法是如何拿到线程的执行结果的？</h5><p>答：我们需要明确几点：</p><ol><li>submit 方法的返回结果实际上是 FutureTask，我们平时都是针对接口编程，所以使用的是 Future.get 来拿到线程的执行结果，实际上是 FutureTask.get ，其方法底层是从 FutureTask 的 outcome 属性拿值的；</li><li>《ThreadPoolExecutor 源码解析》中 2 小节中详细说明了 submit 方法最终会把线程的执行结果赋值给 outcome。</li></ol><p>结合 1、2，当线程执行完成之后，自然就可以从 FutureTask 的 outcome 属性中拿到值。</p><h3 id="7-3-经验总结：不同场景，如何使用线程池"><a href="#7-3-经验总结：不同场景，如何使用线程池" class="headerlink" title="7.3-经验总结：不同场景，如何使用线程池"></a>7.3-经验总结：不同场景，如何使用线程池</h3><p>ThreadPoolExecutor 初始化时，主要有如下几个参数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          TimeUnit unit<span class="token punctuation">,</span>                          BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                          ThreadFactory threadFactory<span class="token punctuation">,</span>                          RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><p>大家对这几个参数应该都很熟悉了，虽然参数很少，但实际工作中却有很多门道，大多数的问题主要集中在线程大小的设置，队列大小的设置两方面上，接下来我们一起看看工作中，如何初始化 ThreadPoolExecutor。</p><h4 id="7-3-1-coreSize-maxSize"><a href="#7-3-1-coreSize-maxSize" class="headerlink" title="7.3.1-coreSize == maxSize"></a>7.3.1-coreSize == maxSize</h4><p>我相信很多人都看过，或自己写过这样的代码：</p><pre class=" language-java"><code class="language-java">ThreadPoolExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> 600000L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span>                                                     <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这行代码主要展示了在初始化 ThreadPoolExecutor 的时候，coreSize 和 maxSize 是相等的，这样设置的话，随着请求的不断增加，会是这样的现象：</p><ol><li>请求数 &lt; coreSize 时，新增线程；</li><li>请求数 &gt;= coreSize &amp;&amp; 队列不满时，添加任务入队；</li><li>队列满时，此时因为 coreSize 和 maxSize 相等，任务会被直接拒绝。</li></ol><p>这么写的最大目的：是想让线程一下子增加到 maxSize，并且不要回收线程，防止线程回收，避免不断增加回收的损耗，一般来说业务流量都有波峰低谷，在流量低谷时，线程不会被回收；流量波峰时，maxSize 的线程可以应对波峰，不需要慢慢初始化到 maxSize 的过程。</p><p>这样设置有两个前提条件：</p><ol><li>allowCoreThreadTimeOut 我们采取默认 false，而不会主动设置成 true，allowCoreThreadTimeOut 是 false 的话，当线程空闲时，就不会回收核心线程；</li><li>keepAliveTime 和 TimeUnit 我们都会设置很大，这样线程空闲的时间就很长，线程就不会轻易的被回收。</li></ol><p>我们现在机器的资源都是很充足的，我们不用去担心线程空闲会浪费机器的资源，所以这种写法目前是很常见的。</p><h4 id="7-3-2-maxSize-无界-SynchronousQueue"><a href="#7-3-2-maxSize-无界-SynchronousQueue" class="headerlink" title="7.3.2-maxSize 无界 + SynchronousQueue"></a>7.3.2-maxSize 无界 + SynchronousQueue</h4><p>在线程池选择队列时，我们也会看到有同学选择 SynchronousQueue，SynchronousQueue 我们在 《SynchronousQueue 源码解析》章节有说过，其内部有堆栈和队列两种形式，默认是堆栈的形式，其内部是没有存储的容器的，放元素和拿元素是一一对应的，比如我使用 put 方法放元素，如果此时没有对应的 take 操作的话，put 操作就会阻塞，需要有线程过来执行 take 操作后，put 操作才会返回。</p><p>基于此特点，如果要使用 SynchronousQueue 的话，我们需要尽量将 maxSize 设置大一点，这样就可以接受更多的请求。</p><p>假设我们设置 maxSize 是 10 的话，选择 SynchronousQueue 队列，假设所有请求都执行 put 操作，没有请求执行 take 操作，前 10 个 put 请求会消耗 10 个线程，都阻塞在 put 操作上，第 11 个请求过来后，请求就会被拒绝，所以我们才说尽量把 maxSize 设置大一点，防止请求被拒绝。</p><p>maxSize 无界 + SynchronousQueue 这样的组合方式优缺点都很明显：</p><p>优点：当任务被消费时，才会返回，这样请求就能够知道当前请求是已经在被消费了，如果是其他的队列的话，我们只知道任务已经被提交成功了，但无法知道当前任务是在被消费中，还是正在队列中堆积。</p><p>缺点：</p><ol><li>比较消耗资源，大量请求到来时，我们会新建大量的线程来处理请求；</li><li>如果请求的量难以预估的话，maxSize 的大小也很难设置。</li></ol><h4 id="7-3-3-maxSize-有界-Queue-无界"><a href="#7-3-3-maxSize-有界-Queue-无界" class="headerlink" title="7.3.3-maxSize 有界 + Queue 无界"></a>7.3.3-maxSize 有界 + Queue 无界</h4><p>在一些对实时性要求不大，但流量忽高忽低的场景下，可以使用 maxSize 有界 + Queue 无界的组合方式。</p><p>比如我们设置 maxSize 为 20，Queue 选择默认构造器的 LinkedBlockingQueue，这样做的优缺点如下：</p><p>优点：</p><ol><li>电脑 cpu 固定的情况下，每秒能同时工作的线程数是有限的，此时开很多的线程其实也是浪费，还不如把这些请求放到队列中去等待，这样可以减少线程之间的 CPU 的竞争；</li><li>LinkedBlockingQueue 默认构造器构造出来的链表的最大容量是 Integer 的最大值，非常适合流量忽高忽低的场景，当流量高峰时，大量的请求被阻塞在队列中，让有限的线程可以慢慢消费。</li></ol><p>缺点：流量高峰时，大量的请求被阻塞在队列中，对于请求的实时性难以保证，所以当对请求的实时性要求较高的场景，不能使用该组合。</p><h4 id="7-3-4-maxSize-有界-Queue-有界"><a href="#7-3-4-maxSize-有界-Queue-有界" class="headerlink" title="7.3.4-maxSize 有界 + Queue 有界"></a>7.3.4-maxSize 有界 + Queue 有界</h4><p>这种组合是对 3 缺点的补充，我们把队列从无界修改成有界，只要排队的任务在要求的时间内，能够完成任务即可。</p><p>这种组合需要我们把线程和队列的大小进行配合计算，保证大多数请求都可以在要求的时间内，有响应返回。</p><h4 id="7-3-5-keepAliveTime-设置无穷大"><a href="#7-3-5-keepAliveTime-设置无穷大" class="headerlink" title="7.3.5-keepAliveTime 设置无穷大"></a>7.3.5-keepAliveTime 设置无穷大</h4><p>有些场景下我们不想让空闲的线程被回收，于是就把 keepAliveTime 设置成 0，实际上这种设置是错误的，当我们把 keepAliveTime 设置成 0 时，线程使用 poll 方法在队列上进行超时阻塞时，会立马返回 null，也就是空闲线程会立马被回收。</p><p>所以如果我们想要空闲的线程不被回收，我们可以设置 keepAliveTime 为无穷大值，并且设置 TimeUnit 为时间的大单位，比如我们设置 keepAliveTime 为 365，TimeUnit 为 TimeUnit.DAYS，意思是线程空闲 1 年内都不会被回收。</p><p>在实际的工作中，机器的内存一般都够大，我们合理设置 maxSize 后，即使线程空闲，我们也不希望线程被回收，我们常常也会设置 keepAliveTime 为无穷大。</p><h4 id="7-3-6-线程池的公用和独立"><a href="#7-3-6-线程池的公用和独立" class="headerlink" title="7.3.6-线程池的公用和独立"></a>7.3.6-线程池的公用和独立</h4><p>在实际工作中，某一个业务下的所有场景，我们都不会公用一个线程池，一般有以下几个原则：</p><ol><li>查询和写入不公用线程池，互联网应用一般来说，查询量远远大于写入的量，如果查询和写入都要走线程池的话，我们一定不要公用线程池，也就是说查询走查询的线程池，写入走写入的线程池，如果公用的话，当查询量很大时，写入的请求可能会到队列中去排队，无法及时被处理；</li><li>多个写入业务场景看情况是否需要公用线程池，原则上来说，每个业务场景都独自使用自己的线程池，绝不共用，这样在业务治理、限流、熔断方面都比较容易，一旦多个业务场景公用线程池，可能就会造成业务场景之间的互相影响，现在的机器内存都很大，每个写入业务场景独立使用自己的线程池也是比较合理的；</li><li>多个查询业务场景是可以公用线程池的，查询的请求一般来说有几个特点：查询的场景多、rt 时间短、查询的量比较大，如果给每个查询场景都弄一个单独的线程池的话，第一个比较耗资源，第二个很难定义线程池中线程和队列的大小，比较复杂，所以多个相似的查询业务场景是可以公用线程池的。</li></ol><h4 id="7-3-7-如何算线程大小和队列大小"><a href="#7-3-7-如何算线程大小和队列大小" class="headerlink" title="7.3.7-如何算线程大小和队列大小"></a>7.3.7-如何算线程大小和队列大小</h4><p>在实际的工作中，我们使用线程池时，需要慎重考虑线程的大小和队列的大小，主要从几个方面入手：</p><ol><li>根据业务进行考虑，初始化线程池时，我们需要考虑所有业务涉及的线程池，如果目前所有的业务同时都有很大流量，那么在对于当前业务设置线程池时，我们尽量把线程大小、队列大小都设置小，如果所有业务基本上都不会同时有流量，那么就可以稍微设置大一点；</li><li>根据业务的实时性要求，如果实时性要求高的话，我们把队列设置小一点，coreSize == maxSize，并且设置 maxSize 大一点，如果实时性要求低的话，就可以把队列设置大一点。</li></ol><p>假设现在机器上某一时间段只会运行一种业务，业务的实时性要求较高，每个请求的平均 rt 是 200ms，请求超时时间是 2000ms，机器是 4 核 CPU，内存 16G，一台机器的 qps 是 100，这时候我们可以模拟一下如何设置：</p><ol><li>4 核 CPU，假设 CPU 能够跑满，每个请求的 rt 是 200ms，就是 200 ms 能执行 4 条请求，2000ms 内能执行 2000/200 * 4 = 40 条请求；</li><li>200 ms 能执行 4 条请求，实际上 4 核 CPU 的性能远远高于这个，我们可以拍脑袋加 10 条，也就是说 2000ms 内预估能够执行 50 条；</li><li>一台机器的 qps 是 100，此时我们计算一台机器 2 秒内最多处理 50 条请求，所以此时如果不进行 rt 优化的话，我们需要加至少一台机器。</li></ol><p>线程池可以大概这么设置：</p><pre class=" language-java"><code class="language-java">ThreadPoolExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> 365L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span>                                                     <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>线程数最大为 15，队列最大为 35，这样机器差不多可以在 2000ms 内处理最大的请求 50 条，当然根据你机器的性能和实时性要求，你可以调整线程数和队列的大小占比，只要总和小于 50 即可。</p><p>以上只是很粗糙的设置，在实际的工作中，还需要根据实际情况不断的观察和调整。</p><h4 id="7-3-8-总结"><a href="#7-3-8-总结" class="headerlink" title="7.3.8-总结"></a>7.3.8-总结</h4><p>线程池设置非常重要，我们尽量少用 Executors 类提供的各种初始化线程池的方法，多根据业务的量，实时性要求来计算机器的预估承载能力，设置预估的线程和队列大小，并且根据实时请求不断的调整线程池的大小值。</p><h3 id="7-4-打动面试官：线程池流程编排中的运用实战"><a href="#7-4-打动面试官：线程池流程编排中的运用实战" class="headerlink" title="7.4-打动面试官：线程池流程编排中的运用实战"></a>7.4-打动面试官：线程池流程编排中的运用实战</h3><p>在线程池的面试中，面试官除了喜欢问 ThreadPoolExecutor 的底层源码外，还喜欢问你有没有在实际的工作中用过 ThreadPoolExecutor，我们在并发集合类的《场景集合：并发 List、Map 的应用场景》一文中说过一种简单的流程引擎，如果没有看过的同学，可以返回去看一下。</p><p>本章就在流程引擎的基础上运用 ThreadPoolExecutor，使用线程池实现 SpringBean 的异步执行。</p><h4 id="7-4-1-流程引擎关键代码回顾"><a href="#7-4-1-流程引擎关键代码回顾" class="headerlink" title="7.4.1-流程引擎关键代码回顾"></a>7.4.1-流程引擎关键代码回顾</h4><p>《场景集合：并发 List、Map 的应用场景》文中流程引擎执行 SpringBean 的核心代码为：</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 批量执行 Spring Bean</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stageInvoke</span><span class="token punctuation">(</span>String flowName<span class="token punctuation">,</span> StageEnum stage<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">></span>        domainAbilitys <span class="token operator">=</span>        FlowCenter<span class="token punctuation">.</span>flowMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>flowName<span class="token punctuation">,</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>domainAbilitys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"找不到该流程对应的领域行为"</span> <span class="token operator">+</span> flowName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>DomainAbilityBean domainAbility <span class="token operator">:</span> domainAbilitys<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行 Spring Bean</span>      domainAbility<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>入参是 flowName（流程名称）、stage（阶段）、content（上下文），其中 stage 中会执行很多 SpringBean，SpringBean 被执行的代码是 domainAbility.invoke(content)。</p><h4 id="7-4-2-异步执行-SpringBean"><a href="#7-4-2-异步执行-SpringBean" class="headerlink" title="7.4.2-异步执行 SpringBean"></a>7.4.2-异步执行 SpringBean</h4><p>从上述代码中，我们可以看到所有的 SpringBean 都是串行执行的，效率较低，我们在实际业务中发现，有的 SpringBean 完全可以异步执行，这样既能完成业务请求，又能减少业务处理的 rt，对于这个需求，我们条件反射的有了两个想法：</p><ol><li>需要新开线程来异步执行 SpringBean，可以使用 Runable 或者 Callable；</li><li>业务请求量很大，我们不能每次来一个请求，就开一个线程，我们应该让线程池来管理异步执行的线程。</li></ol><p>于是我们决定使用线程池来完成这个需求。</p><h4 id="7-4-3-如何区分异步的-SpringBean"><a href="#7-4-3-如何区分异步的-SpringBean" class="headerlink" title="7.4.3-如何区分异步的 SpringBean"></a>7.4.3-如何区分异步的 SpringBean</h4><p>我们的 SpringBean 都是实现 DomainAbilityBean 这个接口的，接口定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DomainAbilityBean</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 领域行为的方法入口   */</span>  FlowContent <span class="token function">invoke</span><span class="token punctuation">(</span>FlowContent content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从接口定义上来看，没有预留任何地方来标识该 SpringBean 应该是同步执行还是异步执行，这时候我们可以采取注解的方式，我们新建一个注解，只要 SpringBean 上有该注解，表示该 SpringBean 应该异步执行，否则应该同步执行，新建的注解如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 异步 SpringBean 执行注解 * SpringBean 需要异步执行的话，就打上该注解*author  wenhe*date 2019/10/7*/</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 表示该注解应该打在类上</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AsyncComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>接着我们新建了两个 SpringBean，并在其中一个 SpringBean 上打上异步的注解，并且打印出执行 SpringBean 的线程名称，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%96%B0%E5%BB%BASpringBean%E5%B9%B6%E5%8A%A0%E4%B8%8A%E5%BC%82%E6%AD%A5%E6%B3%A8%E8%A7%A3.jpeg" alt="新建SpringBean并加上异步注解"></p><p>图中实现了两个 SpringBean：BeanOne 和 BeanTwo，其中 BeanTwo 被打上了 AsyncComponent 注解，表明 BeanTwo 应该被异步执行，两个 SpringBean 都打印出执行的线程的名称。</p><h4 id="7-4-4-mock-流程引擎数据中心"><a href="#7-4-4-mock-流程引擎数据中心" class="headerlink" title="7.4.4-mock 流程引擎数据中心"></a>7.4.4-mock 流程引擎数据中心</h4><p>《场景集合：并发 List、Map 的应用场景》一文中，我们说可以从数据库中加载出流程引擎需要的数据，此时我们 mock 一下，mock 的代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCenter</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * flowMap 是共享变量，方便访问   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>StageEnum<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">>>></span> flowMap      <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newConcurrentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * PostConstruct 注解的意思就是   * 在容器启动成功之后，初始化 flowMap   */</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始化 flowMap mock</span>    Map<span class="token operator">&lt;</span>StageEnum<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">>></span> stageMap <span class="token operator">=</span> flowMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">"flow1"</span><span class="token punctuation">,</span>Maps<span class="token punctuation">.</span><span class="token function">newConcurrentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>StageEnum value <span class="token operator">:</span> StageEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>DomainAbilityBean<span class="token operator">></span> domainAbilitys <span class="token operator">=</span> stageMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Lists<span class="token punctuation">.</span><span class="token function">newCopyOnWriteArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>domainAbilitys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        domainAbilitys<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>            ApplicationContextHelper<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BeanOne<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ApplicationContextHelper<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>BeanTwo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stageMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>domainAbilitys<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    flowMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"flow1"</span><span class="token punctuation">,</span>stageMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印出加载完成之后的数据结果</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"init success,flowMap is {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>flowMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-4-5-新建线程池"><a href="#7-4-5-新建线程池" class="headerlink" title="7.4.5-新建线程池"></a>7.4.5-新建线程池</h4><p>在以上操作完成之后，只剩下最后一步了，之前我们执行 SpringBean 时，是这行代码：domainAbility.invoke(content);</p><p>现在我们需要区分 SpringBean 是否是异步的，如果是异步的，丢到线程池中去执行，如果是同步的，仍然使用原来的方法进行执行，于是我们把这些逻辑封装到一个工具类中，工具类如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 组件执行器 * author  wenhe * date 2019/10/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentExecutor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们新建了一个线程池</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> ExecutorService executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>                                                                   365L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span>                                                                   <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 SpringBean 上有 AsyncComponent 注解，表示该 SpringBean 需要异步执行，就丢到线程池中去</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>DomainAbilityBean component<span class="token punctuation">,</span> FlowContent content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断类上是否有 AsyncComponent 注解</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>AnnotationUtils<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>AsyncComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AopUtils<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 提交到线程池中</span>      executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> component<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 同步 SpringBean 直接执行。</span>    component<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们把原来的执行代码替换成使用组件执行器执行，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%96%B0%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B9%B6%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%99%A8%E6%89%A7%E8%A1%8C.jpeg" alt="新建线程池并使用组件执行器执行"></p><h4 id="7-4-6-测试"><a href="#7-4-6-测试" class="headerlink" title="7.4.6-测试"></a>7.4.6-测试</h4><p>以上步骤完成之后，简单的流程引擎就已经完成了，我们简单地在项目启动的时候加上测试，代码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E7%BA%BF%E7%A8%8B%E6%B1%A0Demo%E6%B5%8B%E8%AF%95.jpeg" alt="线程池Demo测试"></p><p>更严谨的做法，是会写单元测试来测试流程引擎，为了快一点，我们直接在项目启动类上加上了测试代码。</p><p>运行之后的关键结果如下：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>sixth<span class="token punctuation">.</span>SynchronizedDemo<span class="token operator">:</span> SynchronizedDemo init begin<span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>sixth<span class="token punctuation">.</span>SynchronizedDemo<span class="token operator">:</span> SynchronizedDemo init end<span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>FlowCenter <span class="token operator">:</span> init success<span class="token punctuation">,</span>flowMap is <span class="token punctuation">{</span><span class="token string">"flow1"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"PARAM_VALID"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"AFTER_TRANSACTION"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"$ref"</span><span class="token operator">:</span><span class="token string">"$.flow1.PARAM_VALID[0]"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"$ref"</span><span class="token operator">:</span><span class="token string">"$.flow1.PARAM_VALID[1]"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"BUSINESS_VALID"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"$ref"</span><span class="token operator">:</span><span class="token string">"$.flow1.PARAM_VALID[0]"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"$ref"</span><span class="token operator">:</span><span class="token string">"$.flow1.PARAM_VALID[1]"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"IN_TRANSACTION"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"$ref"</span><span class="token operator">:</span><span class="token string">"$.flow1.PARAM_VALID[0]"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"$ref"</span><span class="token operator">:</span><span class="token string">"$.flow1.PARAM_VALID[1]"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>j<span class="token punctuation">.</span>e<span class="token punctuation">.</span>a<span class="token punctuation">.</span>AnnotationMBeanExporter  <span class="token operator">:</span> Registering beans <span class="token keyword">for</span> JMX exposure on startup<span class="token punctuation">[</span>main<span class="token punctuation">]</span> s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>t<span class="token punctuation">.</span>TomcatEmbeddedServletContainer <span class="token operator">:</span> Tomcat started on <span class="token function">port</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">8080</span> <span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>DemoApplication <span class="token operator">:</span> Started DemoApplication in <span class="token number">5.377</span> <span class="token function">seconds</span> <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">6.105</span><span class="token punctuation">)</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanOne <span class="token operator">:</span> BeanOne is run<span class="token punctuation">,</span>thread name is main<span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanOne <span class="token operator">:</span> BeanOne is run<span class="token punctuation">,</span>thread name is main<span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanTwo <span class="token operator">:</span> BeanTwo is run<span class="token punctuation">,</span>thread name is pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanOne <span class="token operator">:</span> BeanOne is run<span class="token punctuation">,</span>thread name is main<span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanTwo <span class="token operator">:</span> BeanTwo is run<span class="token punctuation">,</span>thread name is pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanTwo <span class="token operator">:</span> BeanTwo is run<span class="token punctuation">,</span>thread name is pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">[</span>main<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanOne <span class="token operator">:</span> BeanOne is run<span class="token punctuation">,</span>thread name is main<span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> demo<span class="token punctuation">.</span>three<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>BeanTwo <span class="token operator">:</span> BeanTwo is run<span class="token punctuation">,</span>thread name is pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span></code></pre><p>从运行结果中，我们可以看到 BeanTwo 已经被多个不同的线程异步执行了。</p><h4 id="7-4-7-总结"><a href="#7-4-7-总结" class="headerlink" title="7.4.7-总结"></a>7.4.7-总结</h4><p>这是一个线程池在简单流程引擎上的运用实站，虽然这个流程引擎看起来比较简单，但在实际工作中，还是非常好用的，大家可以把代码拉下来，自己尝试一下，调试一下参数，比如当我新增 SpringBean 的时候，流程引擎的表现如何。</p><h2 id="8-Lambda-流"><a href="#8-Lambda-流" class="headerlink" title="8-Lambda 流"></a>8-Lambda 流</h2><h3 id="8-1-突破难点：如何看-Lambda-源码"><a href="#8-1-突破难点：如何看-Lambda-源码" class="headerlink" title="8.1-突破难点：如何看 Lambda 源码"></a>8.1-突破难点：如何看 Lambda 源码</h3><p>大家都知道 Java8 中新增了 Lambda 表达式，使用 Lambda 表达式可以对代码进行大量的优化，用几行代码就可以做很多事情，本章以 Lambda 为例，第一小节说明一下其底层的执行原理，第二小节说明一下 Lambda 流在工作中常用的姿势。</p><h4 id="8-1-1-Demo"><a href="#8-1-1-Demo" class="headerlink" title="8.1.1-Demo"></a>8.1.1-Demo</h4><p>首先我们来看一个 Lambda 表达式的 Demo，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Demo.jpeg" alt="Lambda-Demo"></p><p>代码比较简单，就是新起一个线程打印一句话，但对于图中 () -&gt; System.out.println ( “ lambda is run “ ) 这种代码，估计很多同学都感觉到很困惑，Java 是怎么识别这种代码的？</p><p>如果我们修改成匿名内部类的写法，就很清楚，大家都能看懂，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Demo2.jpeg" alt="Lambda-Demo2"></p><p>那是不是说 () -&gt; System.out.println ( “ lambda is run “ ) 这种形式的代码，其实就是建立了内部类呢？其实这就是最简单 Lambda 表达式，我们是无法通过 IDEA 看到源码和其底层结构的，下面我们就来介绍几种可看到其底层实现的方式。</p><h4 id="8-1-2-异常判断法"><a href="#8-1-2-异常判断法" class="headerlink" title="8.1.2-异常判断法"></a>8.1.2-异常判断法</h4><p>我们可以在代码执行中主动抛出异常，打印出堆栈，堆栈会说明其运行轨迹，一般这种方法简单高效，基本上可以看到很多情况下的隐藏代码，我们来试一下，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Demo3.jpeg" alt="Lambda-Demo3"></p><p>从异常的堆栈中，我们可以看到 JVM 自动给当前类建立了内部类（错误堆栈中出现多次的 $ 表示有内部类），内部类的代码在执行过程中，抛出了异常，但这里显示的代码是 Unknown Source，所以我们也无法 debug 进去，一般情况下，异常都能暴露出代码执行的路径，我们可以打好断点后再次运行，但对于 Lambda 表达式而言，通过异常判断法我们只清楚有内部类，但无法看到内部类中的源码。</p><h4 id="8-1-3-javap-命令法"><a href="#8-1-3-javap-命令法" class="headerlink" title="8.1.3-javap 命令法"></a>8.1.3-javap 命令法</h4><p>javap 是 Java 自带的可以查看 class 字节码文件的工具，安装过 Java 基础环境的电脑都可以直接执行 javap 命令，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/javap.jpeg" alt="javap"></p><p>命令选项中，我们主要是用-v -verbose 这个命令，可以完整输出字节码文件的内容。</p><p>接下来我们使用 javap 命令查看下 Lambda.class 文件，在讲解的过程中，我们会带上一些关于 class 文件的知识。</p><p>我们在命令窗口中找到 Lambda.class 所在的位置，执行命令：javap -verbose Lambda.class，然后你会看到一长串的东西，这些叫做汇编指令，接下来我们来一一讲解下（ 所有的参考资料来自 <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4" target="_blank" rel="noopener">Java 虚拟机规范</a>，不再一一引用说明）：</p><p>汇编指令中我们很容易找到 Constant pool 打头的一长串类型，我们叫做常量池，官方英文叫做 Run-Time Constant Pool，我们简单理解成一个装满常量的 table ，table 中包含编译时明确的数字和文字，类、方法和字段的类型信息等等。table 中的每个元素叫做 cp<em>info，cp</em>info 由唯一标识 ( tag ) + 名称组成，目前 tag 的类型一共有：</p><p>![tag 的类型](tag 的类型.jpeg)</p><p>贴出我们解析出来的部分图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E8%A7%A3%E6%9E%90%E5%87%BA%E6%9D%A5%E7%9A%84%E9%83%A8%E5%88%86.jpeg" alt="解析出来的部分"></p><ol><li><p>图中 Constant pool 字样代表当前信息是常量池；</p></li><li><p>每行都是一个 <code>cp_info</code> ，第一列的 #1 代表是在常量池下标为 1 的位置 ；</p></li><li><p>每行的第二列，是 <code>cp_info</code> 的唯一标识 ( tag ) ，比如 Methodref 对应着上表中的 CONSTANT_Methodref（上上图中表格中 value 对应 10 的 tag），代表当前行是表示方法的描述信息的，比如说方法的名称，入参类型，出参数类型等，具体的含义在 Java 虚拟机规范中都可以查询到，Methodref 的截图如下：</p><p>![Methodref 的截图](Methodref 的截图.jpeg)</p></li><li><p>每行的第三列，如果是具体的值的话，直接显示具体的值，如果是复杂的值的话，会显示 <code>cp_info</code> 的引用，比如说图中标红 2 处，引用两个 13 和 14 位置的 <code>cp_info</code>，13 表示方法名字是 init，14 表示方法无返回值，结合起来表示方法的名称和返回类型，就是一个无参构造器；</p></li><li><p>每行的第四列，就是具体的值了。</p></li></ol><p>对于比较重要的 cp_info 类型我们说明下其含义：</p><ol><li>InvokeDynamic 表示动态的调用方法，后面我们会详细说明；</li><li>Fieldref 表示字段的描述信息，如字段的名称、类型；</li><li>NameAndType 是对字段和方法类型的描述；</li><li>MethodHandle 方法句柄，动态调用方法的统称，在编译时我们不知道具体是那个方法，但运行时肯定会知道调用的是那个方法；</li><li>MethodType 动态方法类型，只有在动态运行时才会知道其方法类型是什么。</li></ol><p>我们从上上图中标红的 3 处，发现 Ljava/lang/invoke/MethodHandles$Lookup，java/lang/invoke/LambdaMetafactory.metafactory 类似这样的代码，MethodHandles 和 LambdaMetafactory 都是 java.lang.invoke 包下面的重要方法，invoke 包主要实现了动态语言的功能，我们知道 java 语言属于静态编译语言，在编译的时候，类、方法、字段等等的类型都已经确定了，而 invoke 实现的是一种动态语言，也就是说编译的时候并不知道类、方法、字段是什么类型，只有到运行的时候才知道。</p><p>比如这行代码：Runnable runnable = () -&gt; System.out.println(“lambda is run”); 在编译器编译的时候 () 这个括号编译器并不知道是干什么的，只有在运行的时候，才会知道原来这代表着的是 Runnable.run() 方法。invoke 包里面很多类，都是为了代表这些 () 的，我们称作为方法句柄（ MethodHandler ），在编译的时候，编译器只知道这里是个方法句柄，并不知道实际上执行什么方法，只有在执行的时候才知道，那么问题来了，JVM 执行的时候，是如何知道 () 这个方法句柄，实际上是执行 Runnable.run() 方法的呢？</p><p>首先我们看下 simple 方法的汇编指令：</p><p>![simple 方法的汇编指令](simple 方法的汇编指令.jpeg)</p><p>从上图中就可以看出 simple 方法中的 () -&gt; System.out.println(“lambda is run”) 代码中的 ()，实际上就是 Runnable.run 方法。</p><p>我们追溯到 # 2 常量池，也就是上上图中标红 1 处，InvokeDynamic 表示这里是个动态调用，调用的是两个常量池的 cp_info，位置是 #0:#37 ，我们往下找 #37 代表着是 // run:()Ljava/lang/Runnable，这里表明了在 JVM 真正执行的时候，需要动态调用 Runnable.run() 方法，从汇编指令上我们可以看出 () 实际上就是 Runnable.run()，下面我们 debug 来证明一下。</p><p>我们在上上图中 3 处发现了 LambdaMetafactory.metafactory 的字样，通过查询官方文档，得知该方法正是执行时， 链接到真正代码的关键，于是我们在 metafactory 方法中打个断点 debug 一下，如下图：</p><p>![metafactory 方法](metafactory 方法.jpeg)</p><p>metafactory 方法入参 caller 代表实际发生动态调用的位置，invokedName 表示调用方法名称，invokedType 表示调用的多个入参和出参，samMethodType 表示具体的实现者的参数，implMethod 表示实际上的实现者，instantiatedMethodType 等同于 implMethod。</p><p>以上内容总结一下：</p><p>1：从汇编指令的 simple 方法中，我们可以看到会执行 Runnable.run 方法；</p><p>2：在实际的运行时，JVM 碰到 simple 方法的 invokedynamic 指令，会动态调用 LambdaMetafactory.metafactory 方法，执行具体的 Runnable.run 方法。</p><p>所以可以把 Lambda 表达值的具体执行归功于 invokedynamic JVM 指令，正是因为这个指令，才可以做到虽然编译时不知道要干啥，但动态运行时却能找到具体要执行的代码。</p><p>接着我们看一下在汇编指令输出的最后，我们发现了异常判断法中发现的内部类，如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E8%BE%93%E5%87%BA.jpeg" alt="汇编指令输出"></p><p>上图中箭头很多，一层一层的表达清楚了当前内部类的所有信息。</p><h4 id="8-1-4-总结"><a href="#8-1-4-总结" class="headerlink" title="8.1.4-总结"></a>8.1.4-总结</h4><p>我们总结一下，Lambda 表达式执行主要是依靠 invokedynamic 的 JVM 指令来实现。</p><h3 id="8-2-常用的-Lambda-表达式使用场景解析和应用"><a href="#8-2-常用的-Lambda-表达式使用场景解析和应用" class="headerlink" title="8.2-常用的 Lambda 表达式使用场景解析和应用"></a>8.2-常用的 Lambda 表达式使用场景解析和应用</h3><p>我们日常工作中，Lambda 使用比较多的场景，就是 List 或 Map 下的 Lambda 流操作，往往几行代码可以帮助我们实现多层 for 循环嵌套的复杂代码，接下来我们把 Lambda 流的常用方法用案列讲解一下。</p><h4 id="8-2-1-数据准备"><a href="#8-2-1-数据准备" class="headerlink" title="8.2.1-数据准备"></a>8.2.1-数据准备</h4><p>首先我们需要准备一些测试的数据，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">// 学生数据结构</span><span class="token keyword">class</span> <span class="token class-name">StudentDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7716352032236707189L<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">StudentDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">StudentDTO</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String code<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> Double scope<span class="token punctuation">,</span>                    List<span class="token operator">&lt;</span>Course<span class="token operator">></span> learningCources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>learningCources <span class="token operator">=</span> learningCources<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * id   */</span>  <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 学号 唯一标识   */</span>  <span class="token keyword">private</span> String code<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 学生名字   */</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 性别   */</span>  <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 分数   */</span>  <span class="token keyword">private</span> Double scope<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 要学习的课程   */</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Course<span class="token operator">></span> learningCources<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">// 课程数据结构</span><span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2896201730223729591L<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 课程 ID   */</span>  <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 课程 name   */</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Course</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化数据</span><span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>StudentDTO<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>StudentDTO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加学生数据</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token string">"W199"</span><span class="token punctuation">,</span><span class="token string">"小美"</span><span class="token punctuation">,</span><span class="token string">"WM"</span><span class="token punctuation">,</span><span class="token number">100D</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加学生学习的课程</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>300L<span class="token punctuation">,</span><span class="token string">"语文"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>301L<span class="token punctuation">,</span><span class="token string">"数学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>302L<span class="token punctuation">,</span><span class="token string">"英语"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token string">"W25"</span><span class="token punctuation">,</span><span class="token string">"小美"</span><span class="token punctuation">,</span><span class="token string">"WM"</span><span class="token punctuation">,</span><span class="token number">100D</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"W3"</span><span class="token punctuation">,</span><span class="token string">"小名"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">90D</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>300L<span class="token punctuation">,</span><span class="token string">"语文"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>304L<span class="token punctuation">,</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>4L<span class="token punctuation">,</span><span class="token string">"W1"</span><span class="token punctuation">,</span><span class="token string">"小蓝"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">10D</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>301L<span class="token punctuation">,</span><span class="token string">"数学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>305L<span class="token punctuation">,</span><span class="token string">"美术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>请大家稍微看下数据结构，不然看下面案例跑出来的结果会有些吃力。</p><p>代码如下：</p><p>​    </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaExpressionDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> ImmutableList<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Data</span>  <span class="token comment" spellcheck="true">// 学生数据结构</span>  <span class="token keyword">class</span> <span class="token class-name">StudentDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7716352032236707189L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StudentDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">StudentDTO</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String code<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> Double scope<span class="token punctuation">,</span>                      List<span class="token operator">&lt;</span>Course<span class="token operator">></span> learningCources<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>learningCources <span class="token operator">=</span> learningCources<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * id     */</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 学号 唯一标识     */</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 学生名字     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 性别     */</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分数     */</span>    <span class="token keyword">private</span> Double scope<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 要学习的课程     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Course<span class="token operator">></span> learningCources<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Data</span>  <span class="token comment" spellcheck="true">// 课程数据结构</span>  <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2896201730223729591L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 课程 ID     */</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 课程 name     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Course</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 初始化数据</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>StudentDTO<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>StudentDTO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 添加学生数据</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token string">"W199"</span><span class="token punctuation">,</span><span class="token string">"小美"</span><span class="token punctuation">,</span><span class="token string">"WM"</span><span class="token punctuation">,</span><span class="token number">100D</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 添加学生学习的课程</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>300L<span class="token punctuation">,</span><span class="token string">"语文"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>301L<span class="token punctuation">,</span><span class="token string">"数学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>302L<span class="token punctuation">,</span><span class="token string">"英语"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token string">"W25"</span><span class="token punctuation">,</span><span class="token string">"小美"</span><span class="token punctuation">,</span><span class="token string">"WM"</span><span class="token punctuation">,</span><span class="token number">100D</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"W3"</span><span class="token punctuation">,</span><span class="token string">"小名"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">90D</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>300L<span class="token punctuation">,</span><span class="token string">"语文"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>304L<span class="token punctuation">,</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span>4L<span class="token punctuation">,</span><span class="token string">"W1"</span><span class="token punctuation">,</span><span class="token string">"小蓝"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">10D</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>301L<span class="token punctuation">,</span><span class="token string">"数学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>305L<span class="token punctuation">,</span><span class="token string">"美术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 过滤掉我们希望留下来的值</span>        <span class="token comment" spellcheck="true">// StringUtils.equals(str,"hello") 表示我们希望字符串是 hello 能留下来</span>        <span class="token comment" spellcheck="true">// 其他的过滤掉</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Collectors.toList() 帮助我们构造最后的返回结果</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestFilter result is {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// map 方法可以让我们进行一些流的转化，比如原来流中的元素是 A，通过 map 操作，可以使返回的流中的元素是 B</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 得到所有学生的学号</span>    <span class="token comment" spellcheck="true">// 这里 students.stream() 中的元素是 StudentDTO，通过 map 转化成 String 的流</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//StudentDTO::getCode 是 s->s.getCode() 的简写</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMap 所有学生的学号为 {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// mapToInt 固定返回流的类型是 int，还有 mapToLong，mapToDouble</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMapToInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 一定要有 mapToObj，因为 mapToInt 返回的是 IntStream，因为已经确定是 int 类型了</span>        <span class="token comment" spellcheck="true">// 所有没有泛型的，而 Collectors.toList() 强制要求有泛型的流，所以需要使用 mapToObj</span>        <span class="token comment" spellcheck="true">// 方法返回有泛型的流</span>        <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt result is {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算学生总分</span>    Double sumScope <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// IntStream 有许多 sum（求和）、min（求最小值）、max（求最大值）、average（求平均值）等方法</span>        <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt 学生总分为： is {}"</span><span class="token punctuation">,</span> sumScope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// flatMap 方法和 map 方法不同，FlatMap 可以接受入参的类型为 Stream，比如这里的</span>  <span class="token comment" spellcheck="true">// s.getLearningCources().stream() 就是 Stream，可以用下面的 demo 比较一下差异</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFlatMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算学生所有的学习课程，flatMap 返回 List&lt;课程> 格式</span>    List<span class="token operator">&lt;</span>Course<span class="token operator">></span> courses <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getLearningCources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt flatMap 计算学生的所有学习课程如下 {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>courses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算学生所有的学习课程，map 返回两层课程嵌套格式</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Course<span class="token operator">>></span> courses2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getLearningCources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt map 计算学生的所有学习课程如下 {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>courses2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Stream<span class="token operator">&lt;</span>Course<span class="token operator">>></span> courses3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getLearningCources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt map 计算学生的所有学习课程如下  {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>courses3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 去重</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDistinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 得到学生所有的名字，要求是去重过的</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> beforeNames <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestDistinct 没有去重前的学生名单 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>beforeNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> distinctNames <span class="token operator">=</span> beforeNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestDistinct 去重后的学生名单 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>distinctNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 连起来写</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestDistinct 去重后的学生名单 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 排序</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 学生按照学号排序</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> beforeCodes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 按照学号排序之前 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>beforeCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedCodes <span class="token operator">=</span> beforeCodes<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 按照学号排序之后 is {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sortedCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 直接连起来写</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 等同于 .sorted(Comparator.naturalOrder()) 自然排序</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 按照自然排序 is {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义排序器</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 反自然排序</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 反自然排序 is {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 干任何没有返回值的事情</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前循环的学号是{}"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 限制</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> beforeCodes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLimit 限制之前学生的学号为 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>beforeCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> limitCodes <span class="token operator">=</span> beforeCodes<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLimit 限制最大限制 2 个学生的学号 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>limitCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 直接连起来写</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLimit 限制最大限制 2 个学生的学号 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 计算一下学生的总分数</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算一下学生的总分数</span>    Double sum <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getScope<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// scope1 和 scope2 表示循环中的前后两个数</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>scope1<span class="token punctuation">,</span>scope2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> scope1<span class="token operator">+</span>scope2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总成绩为 {}"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    Double sum1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getScope<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 第一个参数表示成绩的基数，会从 100 开始加</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">100D</span><span class="token punctuation">,</span><span class="token punctuation">(</span>scope1<span class="token punctuation">,</span>scope2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> scope1<span class="token operator">+</span>scope2<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总成绩为 {}"</span><span class="token punctuation">,</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 找到第一个叫小美同学的 ID</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Long id <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"小美"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 小美同学的 ID {}"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 防止空指针</span>    Long id2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"小天"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// orElse 表示如果 findFirst 返回 null 的话，就返回 orElse 里的内容</span>        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 小天同学的 ID {}"</span><span class="token punctuation">,</span>id2<span class="token punctuation">)</span><span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>StudentDTO<span class="token operator">></span> student<span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"小天"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// isPresent 为 true 的话，表示 value != null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 小天同学的 ID {}"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 找不到名为小天的同学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 学生根据名字进行分类</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>StudentDTO<span class="token operator">>></span> map1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testListToMap groupingBy 学生根据名字进行分类 result is Map&lt;String,List&lt;StudentDTO>> {}"</span><span class="token punctuation">,</span>             JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 统计有没有姓名重名的</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">>></span> map2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span>                                       Collectors<span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testListToMap groupingBy 统计姓名重名结果 is {}"</span><span class="token punctuation">,</span>             JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 学生转化成学号为 key 的 map</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> StudentDTO<span class="token operator">></span> map3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">,</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testListToMap groupingBy 学生转化成学号为 key 的 map result is{}"</span><span class="token punctuation">,</span>             JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="8-2-2-常用方法"><a href="#8-2-2-常用方法" class="headerlink" title="8.2.2-常用方法"></a>8.2.2-常用方法</h4><h5 id="1-Filter"><a href="#1-Filter" class="headerlink" title="1.Filter"></a>1.Filter</h5><p>Filter 为过滤的意思，只要满足 Filter 表达式的数据就可以留下来，不满足的数据被过滤掉，源码如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Filter.jpeg" alt="Lambda-Filter"></p><p>我们写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// list 在下图中进行了初始化</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 过滤掉我们希望留下来的值</span>      <span class="token comment" spellcheck="true">// StringUtils.equals(str,"hello") 表示我们希望字符串是 hello 能留下来</span>      <span class="token comment" spellcheck="true">// 其他的过滤掉</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Collectors.toList() 帮助我们构造最后的返回结果</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestFilter result is {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>预览</code></pre><p>运行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Filter%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-Filter测试结果"></p><h5 id="2-map"><a href="#2-map" class="headerlink" title="2.map"></a>2.map</h5><p>map 方法可以让我们进行一些流的转化，比如原来流中的元素是 A，通过 map 操作，可以使返回的流中的元素是 B，源码如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Map.jpeg" alt="Lambda-Map"></p><p>我们写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 得到所有学生的学号</span>  <span class="token comment" spellcheck="true">// 这里 students.stream() 中的元素是 StudentDTO，通过 map 方法转化成 String 的流</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//StudentDTO::getCode 是 s->s.getCode() 的简写</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMap 所有学生的学号为 {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 运行结果为：TestMap 所有学生的学号为 ["W199","W25","W3","W1"]</span></code></pre><h5 id="3-mapToInt"><a href="#3-mapToInt" class="headerlink" title="3.mapToInt"></a>3.mapToInt</h5><p>mapToInt 方法的功能和 map 方法一样，只不过 mapToInt 返回的结果已经没有泛型，已经明确是 int 类型的流了，源码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-mapToInt.jpeg" alt="Lambda-mapToInt"></p><p>我们写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMapToInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 一定要有 mapToObj，因为 mapToInt 返回的是 IntStream，因为已经确定是 int 类型了</span>      <span class="token comment" spellcheck="true">// 所有没有泛型的，而 Collectors.toList() 强制要求有泛型的流，所以需要使用 mapToObj</span>      <span class="token comment" spellcheck="true">// 方法返回有泛型的流</span>      <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt result is {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 计算学生总分</span>  Double sumScope <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// DoubleStream/IntStream 有许多 sum（求和）、min（求最小值）、max（求最大值）、average（求平均值）等方法</span>      <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt 学生总分为： is {}"</span><span class="token punctuation">,</span> sumScope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p>TestMapToInt result is [1,2,3,4]<br>TestMapToInt 学生总分为： is 300.0</p><h5 id="4-flatMap"><a href="#4-flatMap" class="headerlink" title="4.flatMap"></a>4.flatMap</h5><p>flatMap 方法也是可以做一些流的转化，和 map 方法不同的是，其明确了 Function 函数的返回值的泛型是流，源码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-flatMap.jpeg" alt="Lambda-flatMap"></p><p>写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFlatMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 计算学生所有的学习课程，flatMap 返回 List&lt;课程> 格式</span>  List<span class="token operator">&lt;</span>Course<span class="token operator">></span> courses <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getLearningCources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt flatMap 计算学生的所有学习课程如下 {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>courses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 计算学生所有的学习课程，map 返回两层课程嵌套格式</span>  List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Course<span class="token operator">>></span> courses2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getLearningCources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt map 计算学生的所有学习课程如下 {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>courses2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Stream<span class="token operator">&lt;</span>Course<span class="token operator">>></span> courses3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getLearningCources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestMapToInt map 计算学生的所有学习课程如下  {}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>courses3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-flatMap%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-flatMap运行结果"></p><h5 id="5-distinct"><a href="#5-distinct" class="headerlink" title="5.distinct"></a>5.distinct</h5><p>distinct 方法有去重的功能，我们写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDistinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 得到学生所有的名字，要求是去重过的</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> beforeNames <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestDistinct 没有去重前的学生名单 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>beforeNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> distinctNames <span class="token operator">=</span> beforeNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestDistinct 去重后的学生名单 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>distinctNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 连起来写</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestDistinct 去重后的学生名单 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-distinct%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-distinct运行结果"></p><h5 id="6-Sorted"><a href="#6-Sorted" class="headerlink" title="6.Sorted"></a>6.Sorted</h5><p>Sorted 方法提供了排序的功能，并且允许我们自定义排序，demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 学生按照学号排序</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> beforeCodes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 按照学号排序之前 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>beforeCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedCodes <span class="token operator">=</span> beforeCodes<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 按照学号排序之后 is {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sortedCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 直接连起来写</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 等同于 .sorted(Comparator.naturalOrder()) 自然排序</span>      <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 自然排序 is {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 自定义排序器</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 反自然排序</span>      <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestSorted 反自然排序 is {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Sorted%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-Sorted运行结果"></p><h5 id="7-peek"><a href="#7-peek" class="headerlink" title="7.peek"></a>7.peek</h5><p>peek 方法很简单，我们在 peek 方法里面做任意没有返回值的事情，比如打印日志，如下：</p><pre class=" language-java"><code class="language-java">students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前循环的学号是{}"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="8-limit"><a href="#8-limit" class="headerlink" title="8.limit"></a>8.limit</h5><p>limit 方法会限制输出值个数，入参是限制的个数大小，demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> beforeCodes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLimit 限制之前学生的学号为 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>beforeCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> limitCodes <span class="token operator">=</span> beforeCodes<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLimit 限制最大限制 2 个学生的学号 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>limitCodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 直接连起来写</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> codes <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TestLimit 限制最大限制 2 个学生的学号 {}"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-Limit%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-Limit运行结果"></p><h5 id="9-reduce"><a href="#9-reduce" class="headerlink" title="9.reduce"></a>9.reduce</h5><p>reduce 方法允许我们在循环里面叠加计算值，我们写了 demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 计算一下学生的总分数</span>  Double sum <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getScope<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// scope1 和 scope2 表示循环中的前后两个数</span>      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>scope1<span class="token punctuation">,</span>scope2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> scope1<span class="token operator">+</span>scope2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总成绩为 {}"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  Double sum1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getScope<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 第一个参数表示成绩的基数，会从 100 开始加</span>      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">100D</span><span class="token punctuation">,</span><span class="token punctuation">(</span>scope1<span class="token punctuation">,</span>scope2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> scope1<span class="token operator">+</span>scope2<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总成绩为 {}"</span><span class="token punctuation">,</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-reduce%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-reduce运行结果"></p><p>第二个计算出来的总成绩多了 100，是因为第二个例子中 reduce 是从基数 100 开始累加的。</p><h5 id="10-findFirst"><a href="#10-findFirst" class="headerlink" title="10.findFirst"></a>10.findFirst</h5><p>findFirst 表示匹配到第一个满足条件的值就返回，demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 找到第一个叫小美同学的 ID</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Long id <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"小美"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 同学中有两个叫小美的，这里匹配到第一个就返回</span>      <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 小美同学的 ID {}"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 防止空指针</span>  Long id2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"小天"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// orElse 表示如果 findFirst 返回 null 的话，就返回 orElse 里的内容</span>      <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 小天同学的 ID {}"</span><span class="token punctuation">,</span>id2<span class="token punctuation">)</span><span class="token punctuation">;</span>  Optional<span class="token operator">&lt;</span>StudentDTO<span class="token operator">></span> student<span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>StringUtils<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"小天"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// isPresent 为 true 的话，表示 value != null，即 student.get() != null</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 小天同学的 ID {}"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testFindFirst 找不到名为小天的同学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Lambda-findFirst%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="Lambda-findFirst运行结果"></p><h5 id="11-groupingBy-amp-amp-toMap"><a href="#11-groupingBy-amp-amp-toMap" class="headerlink" title="11.groupingBy &amp;&amp; toMap"></a>11.groupingBy &amp;&amp; toMap</h5><p>groupingBy 是能够根据字段进行分组，toMap 是把 List 的数据格式转化成 Map 的格式，我们写了一个 demo，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 学生根据名字进行分类</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>StudentDTO<span class="token operator">>></span> map1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testListToMap groupingBy 学生根据名字进行分类 result is Map&lt;String,List&lt;StudentDTO>> {}"</span><span class="token punctuation">,</span>           JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 统计姓名重名的学生有哪些</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">>></span> map2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span>                                  Collectors<span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>StudentDTO<span class="token operator">:</span><span class="token operator">:</span>getCode<span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testListToMap groupingBy 统计姓名重名结果 is {}"</span><span class="token punctuation">,</span>           JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 学生转化成学号为 key 的 map</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> StudentDTO<span class="token operator">></span> map3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//第一个入参表示 map 中 key 的取值</span>       <span class="token comment" spellcheck="true">//第二个入参表示 map 中 value 的取值</span>       <span class="token comment" spellcheck="true">//第三个入参表示，如果前后的 key 是相同的，是覆盖还是不覆盖，(s1,s2)->s1 表示不覆盖，(s1,s2)->s2 表示覆盖</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">,</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testListToMap groupingBy 学生转化成学号为 key 的 map result is{}"</span><span class="token punctuation">,</span>           JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p>![Lambda-groupingBy &amp;&amp; toMap运行结果](Lambda-groupingBy &amp;&amp; toMap运行结果.jpeg)</p><h4 id="8-2-3-总结"><a href="#8-2-3-总结" class="headerlink" title="8.2.3-总结"></a>8.2.3-总结</h4><p>本文我们介绍了 12 种 Lambda 表达式常用的方法，大家可以找到 LambdaExpressionDemo 类，自己 debug 下，这样你在工作中遇到复杂数据结构转化时，肯定会得心应手了。</p><h2 id="9-其他"><a href="#9-其他" class="headerlink" title="9-其他"></a>9-其他</h2><h3 id="9-1-ThreadLocal-源码解析"><a href="#9-1-ThreadLocal-源码解析" class="headerlink" title="9.1-ThreadLocal 源码解析"></a>9.1-ThreadLocal 源码解析</h3><p>ThreadLocal 提供了一种方式，让在多线程环境下，每个线程都可以拥有自己独特的数据，并且可以在整个线程执行过程中，从上而下的传递。</p><h4 id="9-1-1-用法演示"><a href="#9-1-1-用法演示" class="headerlink" title="9.1.1-用法演示"></a>9.1.1-用法演示</h4><p>可能很多同学没有使用过 ThreadLocal，我们先来演示下 ThreadLocal 的用法，demo 如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * ThreadLocal 中保存的数据是 Map */</span><span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 从上下文中拿出 Map</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> contextMap <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>contextMap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    contextMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  contextMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>contextMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key1，value1被放到上下文中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从上下文中拿出刚才放进去的数据</span>  <span class="token function">getFromComtext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> String <span class="token function">getFromComtext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  String value1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"从 ThreadLocal 中取出上下文，key1 对应的值为：{}"</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果:</span>demo<span class="token punctuation">.</span>ninth<span class="token punctuation">.</span>ThreadLocalDemo <span class="token operator">-</span> key1，value1被放到上下文中demo<span class="token punctuation">.</span>ninth<span class="token punctuation">.</span>ThreadLocalDemo <span class="token operator">-</span> 从 ThreadLocal 中取出上下文，key1 对应的值为：value1</code></pre><p>从运行结果中可以看到，key1 对应的值已经从上下文中拿到了。</p><p>getFromComtext 方法是没有接受任何入参的，通过 context.get().get(“key1”) 这行代码就从上下文中拿到了 key1 的值，接下来我们一起来看下 ThreadLocal 底层是如何实现上下文的传递的。</p><h4 id="9-1-2-类结构"><a href="#9-1-2-类结构" class="headerlink" title="9.1.2-类结构"></a>9.1.2-类结构</h4><h5 id="1-类泛型"><a href="#1-类泛型" class="headerlink" title="1.类泛型"></a>1.类泛型</h5><p>ThreadLocal 定义类时带有泛型，说明 ThreadLocal 可以储存任意格式的数据，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="2-关键属性"><a href="#2-关键属性" class="headerlink" title="2.关键属性"></a>2.关键属性</h5><p>ThreadLocal 有几个关键属性，我们一一看下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// threadLocalHashCode 表示当前 ThreadLocal 的 hashCode，用于计算当前 ThreadLocal 在 ThreadLocalMap 中的索引位置</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadLocalHashCode <span class="token operator">=</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 计算 ThreadLocal 的 hashCode 值(就是递增)</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nextHashCode<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>HASH_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// static + AtomicInteger 保证了在一台机器中每个 ThreadLocal 的 threadLocalHashCode 是唯一的</span><span class="token comment" spellcheck="true">// 被 static 修饰非常关键，因为一个线程在处理业务的过程中，ThreadLocalMap 是会被 set 多个 ThreadLocal 的，多个 ThreadLocal 就依靠 threadLocalHashCode 进行区分</span><span class="token keyword">private</span> <span class="token keyword">static</span> AtomicInteger nextHashCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还有一个重要属性：ThreadLocalMap，当一个线程有多个 ThreadLocal 时，需要一个容器来管理多个 ThreadLocal，ThreadLocalMap 的作用就是这个，管理线程中多个 ThreadLocal。</p><ul><li><h6 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h6><p>ThreadLocalMap 本身就是一个简单的 Map 结构，key 是 ThreadLocal，value 是 ThreadLocal 保存的值，底层是数组的数据结构，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数组中的每个节点值，WeakReference 是弱引用，当没有引用指向时，会直接被回收</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前 ThreadLocal 关联的值</span>            Object value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// WeakReference 的引用 referent 就是 ThreadLocal</span>            <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 数组的初始化大小</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储 ThreadLocal 的数组</span>        <span class="token keyword">private</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 扩容的阈值，默认是数组大小的三分之二</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从源码中看到 ThreadLocalMap 其实就是一个简单的 Map 结构，底层是数组，有初始化大小，也有扩容阈值大小，数组的元素是 Entry，Entry 的 key 就是 ThreadLocal 的引用，value 是 ThreadLocal 的值</p></li></ul><h4 id="9-1-3-ThreadLocal-是如何做到线程之间数据隔离的"><a href="#9-1-3-ThreadLocal-是如何做到线程之间数据隔离的" class="headerlink" title="9.1.3-ThreadLocal 是如何做到线程之间数据隔离的"></a>9.1.3-ThreadLocal 是如何做到线程之间数据隔离的</h4><p>ThreadLocal 是线程安全的，我们可以放心使用，主要因为是 ThreadLocalMap 是线程的属性，我们看下线程 Thread 的源码，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ThreadLocalMap.jpeg" alt="ThreadLocalMap"></p><p>从上图中，我们可以看到 ThreadLocals.ThreadLocalMap 和 InheritableThreadLocals.ThreadLocalMap 分别是线程的属性，所以每个线程的 ThreadLocals 都是隔离独享的。</p><p>父线程在创建子线程的情况下，会拷贝 inheritableThreadLocals 的值，但不会拷贝 threadLocals 的值，源码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/inheritableThreadLocals.jpeg" alt="inheritableThreadLocals"></p><p>从上图中我们可以看到，在线程创建时，会把父线程的 inheritableThreadLocals 属性值进行拷贝。</p><h4 id="9-1-4-set-方法"><a href="#9-1-4-set-方法" class="headerlink" title="9.1.4-set 方法"></a>9.1.4-set 方法</h4><p>set 方法的主要作用是往当前 ThreadLocal 里面 set 值，假如当前 ThreadLocal 的泛型是 Map，那么就是往当前 ThreadLocal 里面 set map，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// set 操作每个线程都是串行的，不会有线程安全的问题</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前 thradLocal 之前有设置值，直接设置，否则初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化ThreadLocalMap</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码逻辑比较清晰，我们在一起来看下 ThreadLocalMap.set 的源码，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算 key 在数组中的下标，其实就是 ThreadLocal 的 hashCode 和数组大小-1取余</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 整体策略：查看 i 索引位置有没有值，有值的话，索引位置 + 1，直到找到没有值的位置</span>    <span class="token comment" spellcheck="true">// 这种解决 hash 冲突的策略，也导致了其在 get 时查找策略有所不同，体现在 getEntryAfterMiss 中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// nextIndex 就是让在不超过数组长度的基础上，把数组的索引位置 + 1</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到内存地址一样的 ThreadLocal，直接替换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前 key 是 null，说明 ThreadLocal 被清理了，直接替换掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前 i 位置是无值的，可以被当前 thradLocal 使用</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当数组大小大于等于扩容阈值(数组大小的三分之二)时，进行扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面源码我们注意几点：</p><ol><li>是通过递增的 AtomicInteger 作为 ThreadLocal 的 hashCode 的；</li><li>计算数组索引位置的公式是：hashCode 取模数组大小，由于 hashCode 不断自增，所以不同的 hashCode 大概率上会计算到同一个数组的索引位置（但这个不用担心，在实际项目中，ThreadLocal 都很少，基本上不会冲突）；</li><li>通过 hashCode 计算的索引位置 i 处如果已经有值了，会从 i 开始，通过 +1 不断的往后寻找，直到找到索引位置为空的地方，把当前 ThreadLocal 作为 key 放进去。</li></ol><p>好在日常工作中使用 ThreadLocal 时，常常只使用 1~2 个 ThreadLocal，通过 hash 计算出重复的数组的概率并不是很大。</p><p>set 时的解决数组元素位置冲突的策略，也对 get 方法产生了影响，接着我们一起来看一下 get 方法。</p><h4 id="9-1-5-get-方法"><a href="#9-1-5-get-方法" class="headerlink" title="9.1.5-get 方法"></a>9.1.5-get 方法</h4><p>get 方法主要是从 ThreadLocalMap 中拿到当前 ThreadLocal 储存的值，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为 threadLocal 属于线程的属性，所以需要先把当前线程拿出来</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从线程中拿到 ThreadLocalMap</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从 map 中拿到 entry，由于 ThreadLocalMap 在 set 时的 hash 冲突的策略不同，导致拿的时候逻辑也不太一样</span>        ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果不为空，读取当前 ThreadLocal 中保存的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 否则给当前线程的 ThreadLocal 初始化，并返回初始值 null</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着我们来看下 ThreadLocalMap 的 getEntry 方法，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 得到当前 thradLocal 对应的值，值的类型是由 thradLocal 的泛型决定的</span><span class="token comment" spellcheck="true">// 由于 thradLocalMap set 时解决数组索引位置冲突的逻辑，导致 thradLocalMap get 时的逻辑也是对应的</span><span class="token comment" spellcheck="true">// 首先尝试根据 hashcode 取模数组大小-1 = 索引位置 i 寻找，找不到的话，自旋把 i+1，直到找到索引位置不为空为止</span><span class="token keyword">private</span> Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算索引位置：ThreadLocal 的 hashCode 取模数组大小-1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// e 不为空，并且 e 的 ThreadLocal 的内存地址和 key 相同，直接返回，否则就是没有找到，继续通过 getEntryAfterMiss 方法找</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token comment" spellcheck="true">// 这个取数据的逻辑，是因为 set 时数组索引位置冲突造成的  </span>        <span class="token keyword">return</span> <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自旋 i+1，直到找到为止</span><span class="token keyword">private</span> Entry <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Entry e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在大量使用不同 key 的 ThreadLocal 时，其实还蛮耗性能的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内存地址一样，表示找到了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除没用的 key</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继续使索引位置 + 1</span>        <span class="token keyword">else</span>            i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>get 逻辑源码中注释已经写的很清楚了，我们就不重复说了。</p><h4 id="9-1-6-扩容"><a href="#9-1-6-扩容" class="headerlink" title="9.1.6-扩容"></a>9.1.6-扩容</h4><p>ThreadLocalMap 中的 ThreadLocal 的个数超过阈值时，ThreadLocalMap 就要开始扩容了，我们一起来看下扩容的逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//扩容</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿出旧的数组</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldLen <span class="token operator">=</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新数组的大小为老数组的两倍</span>    <span class="token keyword">int</span> newLen <span class="token operator">=</span> oldLen <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化新数组</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newLen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 老数组的值拷贝到新数组上</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldLen<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Help the GC</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 计算 ThreadLocal 在新数组中的位置</span>                <span class="token keyword">int</span> h <span class="token operator">=</span> k<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果索引 h 的位置值不为空，往后+1，直到找到值为空的索引位置</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>newTab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> newLen<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 给新数组赋值</span>                newTab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 给新数组初始化下次扩容阈值，为数组长度的三分之二</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> count<span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码注解也比较清晰，我们注意两点：</p><ol><li>扩容后数组大小是原来数组的两倍；</li><li>扩容时是绝对没有线程安全问题的，因为 ThreadLocalMap 是线程的一个属性，一个线程同一时刻只能对 ThreadLocalMap 进行操作，因为同一个线程执行业务逻辑必然是串行的，那么操作 ThreadLocalMap 必然也是串行的。</li></ol><h4 id="9-1-7-总结"><a href="#9-1-7-总结" class="headerlink" title="9.1.7-总结"></a>9.1.7-总结</h4><p>ThreadLocal 是非常重要的 API，我们在写一个中间件的时候经常会用到，比如说流程引擎中上下文的传递，调用链ID的传递等等，非常好用，但坑也很多。</p><h3 id="9-2-场景实战：ThreadLocal-在上下文传值场景下的实践"><a href="#9-2-场景实战：ThreadLocal-在上下文传值场景下的实践" class="headerlink" title="9.2-场景实战：ThreadLocal 在上下文传值场景下的实践"></a>9.2-场景实战：ThreadLocal 在上下文传值场景下的实践</h3><p>我们在 《打动面试官：线程池流程编排中的运用实战》一文中将流程引擎简单地完善了一下，本文在其基础上继续进行改造，建议同学可以先看看 GitHub 上的代码，或者看看之前的文章。</p><h4 id="9-2-1-回顾"><a href="#9-2-1-回顾" class="headerlink" title="9.2.1-回顾"></a>9.2.1-回顾</h4><p>流程引擎编排的对象，我们称为组件（就是 SpringBean），之前我们给组件定义了通用的接口，组件实现时就实现这个接口，代码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/SpringBean%E5%9B%9E%E9%A1%BE.jpeg" alt="SpringBean回顾"></p><p>我们定义了 DomainAbilityBean 接口，入参和出参都是 FlowContent，FlowContent 我们称为上下文。</p><h4 id="9-2-2-ThreadLocal-实现"><a href="#9-2-2-ThreadLocal-实现" class="headerlink" title="9.2.2-ThreadLocal 实现"></a>9.2.2-ThreadLocal 实现</h4><p>上下文传参除了 FlowContent 实现外，ThreadLocal 也是可以实现的，我们来演示一下：</p><h5 id="1-定义-ThreadLocal-上下文工具类"><a href="#1-定义-ThreadLocal-上下文工具类" class="headerlink" title="1.定义 ThreadLocal 上下文工具类"></a>1.定义 ThreadLocal 上下文工具类</h5><p>首先我们使用 ThreadLocal 定义了上下文工具类，并且定义了 put、get 方法，方便使用，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextCache</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2136539028591849277L<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 ThreadLocal 缓存上下文信息</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> CACHE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 放数据   * @param sourceKey   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">putAttribute</span><span class="token punctuation">(</span>String sourceKey<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> cacheMap <span class="token operator">=</span> CACHE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> cacheMap<span class="token punctuation">)</span><span class="token punctuation">{</span>      cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sourceKey<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    CACHE<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 拿数据   * @param sourceKey   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">getAttribute</span><span class="token punctuation">(</span>String sourceKey<span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> cacheMap <span class="token operator">=</span> CACHE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> cacheMap<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果你想往 ThreadLocal 放数据，调用 ContextCache.putAttribute 方法，如果想从 ThreadLocal 拿数据，调用 ContextCache.getAttribute 方法即可。</p><p>我们写了两个组件，一个组件放数据，一个组件拿数据，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ThreadLocal-Demo1.jpeg" alt="ThreadLocal-Demo1"></p><p>我们把两个 SpringBean 注册到流程注册中心中，让其按照先执行 BeanThree 再执行 BeanFive 的顺序进行执行，运行 DemoApplication 类的 main 方法进行执行，执行结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/ThreadLocal-Demo2.jpeg" alt="ThreadLocal-Demo2"></p><p>从打印的日志可以看到，在 Spring 容器管理的 SpringBean 中，ThreadLocal 也是可以储存中间缓存值的。</p><h4 id="9-2-3-开启子线程"><a href="#9-2-3-开启子线程" class="headerlink" title="9.2.3-开启子线程"></a>9.2.3-开启子线程</h4><p>我们做一个实验，我们在 BeanFive 中开启子线程，然后再从 ThreadLocal 中拿值，看看能否拿到值，BeanFive 的代码修改成如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E5%BC%80%E5%90%AF%E5%AD%90%E7%BA%BF%E7%A8%8B.jpeg" alt="开启子线程"></p><p>我们再来运行一下，打印的日志如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E5%BC%80%E5%90%AF%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%97%A5%E5%BF%97.jpeg" alt="开启子线程日志"></p><p>从打印的日志中，我们发现在子线程中从 ThreadLocal 取值时，并没有取得值，这个原因主要是我们之前说的，线程在创建的时候，并不会把父线程的 ThreadLocal 中的值拷贝给子线程的 ThreadLocal，解决方案就是把 ThreadLocal 修改成 InheritableThreadLocal，代码修改如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E5%BC%80%E5%90%AF%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9.jpeg" alt="开启子线程代码修改"></p><p>我们再次运行，结果如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E5%BC%80%E5%90%AF%E5%AD%90%E7%BA%BF%E7%A8%8B%E5%86%8D%E6%AC%A1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="开启子线程再次运行结果"></p><p>从运行结果看，我们成功的在子线程中拿到值。</p><h4 id="9-2-4-线程池-ThreadLocal"><a href="#9-2-4-线程池-ThreadLocal" class="headerlink" title="9.2.4-线程池 + ThreadLocal"></a>9.2.4-线程池 + ThreadLocal</h4><p>如果是拿数据的 springBean 是丢给线程池执行的，我们能够成功的从 ThreadLocal 中拿到数据么？</p><p>首先我们在放数据的 springBean 中，把放的值修改成随机的，接着拿数据的 SpringBean 修改成异步执行，代码修改如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/springBean%E4%BF%AE%E6%94%B9%E5%90%8E.jpeg" alt="springBean修改后"></p><p>为了能快速看到效果，我们把线程池的 coreSize 和 maxSize 全部修改成 3，并让任务沉睡一段时间，这样三个线程肯定消费不完任务，大量任务都会到队列中去排队，我们修改一下测试脚本，如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC.jpeg" alt="修改后的测试脚本"></p><p>我们期望的结果：</p><ol><li>线程池中执行的 BeanFive 可以成功从 ThreadLocal 中拿到数据；</li><li>能够从 ThreadLocal 拿到正确的数据，比如 BeanThree 刚放进 key1，value5，那么期望在 BeanFive 中根据 key1 能拿出 value5，而不是其它值。</li></ol><p>我们运行一下，结果如下：</p><p>![线程池 + ThreadLocal运行结果](线程池 + ThreadLocal运行结果.jpeg)</p><p>从结果中可以看到，并没有符合我们的预期，我们往 ThreadLocal 中 put 进很多值，但最后拿出来的值却很多都是 value379，都为最后 put 到 ThreadLocal 中的值。</p><p>这个原因主要是 ThreadLocal 存储的 HashMap 的引用都是同一个，main 主线程可以修改 HashMap 中的值，子线程从 ThreadLocal 中拿值时，也是从 HashMap 中拿值，从而导致不能把 put 的值通过 ThreadLocal 正确的传递给子线程。</p><p>为了证明是这个原因，我们在从 ThreadLocal 放、拿值的地方，把 HashMap 的内存地址都打印出来，改动代码如下：</p><p>![线程池 + ThreadLocal修改后代码](线程池 + ThreadLocal修改后代码.jpeg)</p><p>我们再次运行测试代码，运行的结果如下：</p><p>![线程池 + ThreadLocal修改后运行结果](线程池 + ThreadLocal修改后运行结果.jpeg)</p><p>从测试结果中可以看到，不管是主线程还是子线程和 ThreadLocal 进行交互时，HashMap 都是同一个，也就是说 ThreadLocal 中保存的 HashMap 是共享的，这就导致了线程安全的问题，子线程读取到的值就会混乱掉。</p><h4 id="9-2-5-解决方案"><a href="#9-2-5-解决方案" class="headerlink" title="9.2.5-解决方案"></a>9.2.5-解决方案</h4><p>针对这个问题，我们提出了一种解决方案，在把任务提交到线程池时，我们进行 HashMap 的拷贝，这样子线程的 HashMap 和 main 线程的 HashMap 就不同了，可以解决上面的问题。</p><p>我们提交任务时， 使用的是 Runnable，要实现 HashMap 的拷贝的话，我们需要把 Runnable 进行一层包装，包装的代码如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%BB%A3%E7%A0%81.jpeg" alt="解决方案代码"></p><p>运行结果如下:</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpeg" alt="解决方案运行结果"></p><p>从运行结果中可以看出，线程池拿出来的 value 已经是正确的了。</p><h4 id="9-2-6-总结"><a href="#9-2-6-总结" class="headerlink" title="9.2.6-总结"></a>9.2.6-总结</h4><p>本文通过 ThreadLocal 来改造流程引擎中的上下文传递，希望能够加深大家对 ThreadLocal 的认识和使用技巧，有兴趣的同学可以把我们的代码下载下来，跑跑看。</p><h3 id="9-3-Socket-源码及面试题"><a href="#9-3-Socket-源码及面试题" class="headerlink" title="9.3-Socket 源码及面试题"></a>9.3-Socket 源码及面试题</h3><p>Socket 中文翻译叫套接字，可能很多工作四五年的同学都没有用过这个 API，但只要用到这个 API 时，必然是在重要的工程的核心代码处。</p><p>大家平时基本都在用开源的各种 rpc 框架，比如说 Dubbo、gRPC、Spring Cloud 等等，很少需要手写网络调用，以下三小节可以帮助大家补充这块的内容，当你真正需要的时候，可以作为手册示例。</p><p>本文和《ServerSocket 源码及面试题》一文主要说 Socket 和 ServerSocket 的源码，《工作实战：Socket 结合线程池的使用》这章主要说两个 API 在实际工作中如何落地。</p><h4 id="9-3-1-Socket-整体结构"><a href="#9-3-1-Socket-整体结构" class="headerlink" title="9.3.1-Socket 整体结构"></a>9.3.1-Socket 整体结构</h4><p>Socket 的结构非常简单，Socket 就像一个壳一样，将套接字初始化、创建连接等各种操作包装了一下，其底层实现都是 SocketImpl 实现的，Socket 本身的业务逻辑非常简单。</p><p>Socket 的属性不多，有套接字的状态，SocketImpl，读写的状态等等，源码如下图：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Socket%E7%9A%84%E5%B1%9E%E6%80%A7.jpeg" alt="Socket的属性"></p><p>套接字的状态变更都是有对应操作方法的，比如套接字新建（createImpl 方法）后，状态就会更改成 created = true，连接（connect）之后，状态更改成 connected = true 等等。</p><h4 id="9-3-2-初始化"><a href="#9-3-2-初始化" class="headerlink" title="9.3.2-初始化"></a>9.3.2-初始化</h4><p>Socket 的构造器比较多，可以分成两大类：</p><ol><li>指定代理类型（Proxy）创建套节点，一共有三种类型为：DIRECT（直连）、HTTP（HTTP、FTP 高级协议的代理）、SOCKS（SOCKS 代理），三种不同的代码方式对应的 SocketImpl 不同，分别是：PlainSocketImpl、HttpConnectSocketImpl、SocksSocketImpl，除了类型之外 Proxy 还指定了地址和端口；</li><li>默认 SocksSocketImpl 创建，并且需要在构造器中传入地址和端口，源码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// address 代表IP地址，port 表示套接字的端口</span><span class="token comment" spellcheck="true">// address 我们一般使用 InetSocketAddress，InetSocketAddress 有 ip+port、域名+port、InetAddress 等初始化方式</span><span class="token keyword">public</span> <span class="token function">Socket</span><span class="token punctuation">(</span>InetAddress address<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>address <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">,</span>         <span class="token punctuation">(</span>SocketAddress<span class="token punctuation">)</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 address 可以是 ip 地址或者域名，比如说 127.0.0.1 或者 <a href="http://www.wenhe.com。" target="_blank" rel="noopener">www.wenhe.com。</a></p><p>我们一起看一下这个构造器调用的 this 底层构造器的源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// stream 为 true 时，表示为stream socket 流套接字，使用 TCP 协议，比较稳定可靠，但占用资源多</span><span class="token comment" spellcheck="true">// stream 为 false 时，表示为datagram socket 数据报套接字，使用 UDP 协议，不稳定，但占用资源少</span><span class="token keyword">private</span> <span class="token function">Socket</span><span class="token punctuation">(</span>SocketAddress address<span class="token punctuation">,</span> SocketAddress localAddr<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> stream<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token function">setImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// backward compatibility</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建 socket</span>        <span class="token function">createImpl</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 ip 地址不为空，绑定地址</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localAddr <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// create、bind、connect 也是 native 方法</span>            <span class="token function">bind</span><span class="token punctuation">(</span>localAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">connect</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> IllegalArgumentException <span class="token operator">|</span> SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>ce<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从源码中可以看出：</p><ol><li>在构造 Socket 的时候，你可以选择 TCP 或 UDP，默认是 TCP；</li><li>如果构造 Socket 时，传入地址和端口，那么在构造的时候，就会尝试在此地址和端口上创建套接字；</li><li>Socket 的无参构造器只会初始化 SocksSocketImpl，并不会和当前地址端口绑定，需要我们手动的调用 connect 方法，才能使用当前地址和端口；</li><li>Socket 我们可以理解成网络沟通的语言层次的抽象，底层网络创建、连接和关闭，仍然是 TCP 或 UDP 本身网络协议指定的标准，Socket 只是使用 Java 语言做了一层封装，从而让我们更方便地使用。</li></ol><h4 id="9-3-3-connect-连接服务端"><a href="#9-3-3-connect-连接服务端" class="headerlink" title="9.3.3-connect 连接服务端"></a>9.3.3-connect 连接服务端</h4><p>connect 方法主要用于 Socket 客户端连接上服务端，如果底层是 TCP 层协议的话，就是通过三次握手和服务端建立连接，为客户端和服务端之间的通信做好准备，底层源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span>SocketAddress endpoint<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>connect 方法要求有两个入参，第一个入参是 SocketAddress，表示服务端的地址，我们可以使用 InetSocketAddress 进行初始化，比如：new InetSocketAddress(“<a href="http://www.wenhe.com”" target="_blank" rel="noopener">www.wenhe.com”</a>, 2000)。</p><p>第二入参是超时时间的意思（单位毫秒），表示客户端连接服务端的最大等待时间，如果超过当前等待时间，仍然没有成功建立连接，抛 SocketTimeoutException 异常，如果是 0 的话，表示无限等待。</p><h4 id="9-3-4-Socket-常用设置参数"><a href="#9-3-4-Socket-常用设置参数" class="headerlink" title="9.3.4-Socket 常用设置参数"></a>9.3.4-Socket 常用设置参数</h4><p>Socket 的常用设置参数在 SocketOptions 类中都可以找到，接下来我们来一一分析下，以下理解大多来自类注释和网络。</p><h5 id="1-setTcpNoDelay"><a href="#1-setTcpNoDelay" class="headerlink" title="1.setTcpNoDelay"></a>1.setTcpNoDelay</h5><p>此方法是用来设置 TCP_NODELAY 属性的，属性的注释是这样的：此设置仅仅对 TCP 生效，主要为了禁止使用 Nagle 算法，true 表示禁止使用，false 表示使用，默认是 false。</p><p>对于 Nagle 算法，我们引用维基百科上的解释：</p><blockquote><p><strong>纳格算法</strong>是以减少数据包发送量来增进 [TCP/IP] 网络的性能，它由约翰·纳格任职于<a href="https://zh.wikipedia.org/w/index.php?title=Ford_Aerospace&action=edit&redlink=1" target="_blank" rel="noopener">Ford Aerospace</a>时命名。</p><p>纳格的文件<a href="https://zh.wikipedia.org/wiki/納格算法#cite_note-1" target="_blank" rel="noopener">[注 1]</a>描述了他所谓的“小数据包问题”－某个应用程序不断地提交小单位的数据，且某些常只占1<a href="https://zh.wikipedia.org/wiki/字节" target="_blank" rel="noopener">字节</a>大小。因为<a href="https://zh.wikipedia.org/wiki/傳輸控制協議" target="_blank" rel="noopener">TCP</a>数据包具有40<a href="https://zh.wikipedia.org/wiki/字节" target="_blank" rel="noopener">字节</a>的标头信息（TCP与IPv4各占20字节），这导致了41字节大小的数据包只有1字节的可用信息，造成庞大的浪费。这种状况常常发生于<a href="https://zh.wikipedia.org/wiki/Telnet" target="_blank" rel="noopener">Telnet</a>工作阶段－大部分的键盘操作会产生1字节的数据并马上提交。更糟的是，在慢速的网络连线下，这类的数据包会大量地在同一时点传输，造成<a href="https://zh.wikipedia.org/w/index.php?title=壅塞碰撞&action=edit&redlink=1" target="_blank" rel="noopener">壅塞碰撞</a>。</p><p>纳格算法的工作方式是合并（<a href="https://zh.wiktionary.org/wiki/en:Coalesce" target="_blank" rel="noopener">coalescing</a>）一定数量的输出数据后一次提交。特别的是，只要有已提交的数据包尚未确认，发送者会持续缓冲数据包，直到累积一定数量的数据才提交。</p></blockquote><p>总结算法开启关闭的场景：</p><ol><li>如果 Nagle 算法关闭，对于小数据包，比如一次鼠标移动，点击，客户端都会立马和服务端交互，实时响应度非常高，但频繁的通信却很占用不少网络资源；</li><li>如果 Nagle 算法开启，算法会自动合并小数据包，等到达到一定大小（MSS）后，才会和服务端交互，优点是减少了通信次数，缺点是实时响应度会低一些。</li></ol><p>Socket 创建时，默认是开启 Nagle 算法的，可以根据实时性要求来选择是否关闭 Nagle 算法。</p><h5 id="2-setSoLinger"><a href="#2-setSoLinger" class="headerlink" title="2.setSoLinger"></a>2.setSoLinger</h5><p>setSoLinger 方法主要用来设置 SO_LINGER 属性值的。</p><p>注释上大概是这个意思：在我们调用 close 方法时，默认是直接返回的，但如果给 SO_LINGER 赋值，就会阻塞 close 方法，在 SO_LINGER 时间内，等待通信双方发送数据，如果时间过了，还未结束，将发送 TCP RST 强制关闭 TCP 。</p><p>我们看一下 setSoLinger 源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// on 为 false，表示不启用延时关闭，true 的话表示启用延时关闭</span><span class="token comment" spellcheck="true">// linger 为延时的时间，单位秒</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSoLinger</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> on<span class="token punctuation">,</span> <span class="token keyword">int</span> linger<span class="token punctuation">)</span> <span class="token keyword">throws</span> SocketException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 检查是否已经关闭</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SocketException</span><span class="token punctuation">(</span><span class="token string">"Socket is closed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不启用延时关闭</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>on<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>SocketOptions<span class="token punctuation">.</span>SO_LINGER<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启用延时关闭，如果 linger 为 0，那么会立即关闭</span>    <span class="token comment" spellcheck="true">// linger 最大为 65535 秒，约 18 小时</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>linger <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid value for SO_LINGER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>linger <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span>            linger <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>        <span class="token function">getImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>SocketOptions<span class="token punctuation">.</span>SO_LINGER<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>linger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-setOOBInline"><a href="#3-setOOBInline" class="headerlink" title="3.setOOBInline"></a>3.setOOBInline</h5><p>setOOBInline 方法主要使用设置 SO_OOBINLINE 属性。</p><p>注释上说：如果希望接受 TCP urgent data（TCP 紧急数据）的话，可以开启该选项，默认该选项是关闭的，我们可以通过 Socket#sendUrgentData 方法来发送紧急数据。</p><p>查询了很多资料，都建议尽可能的去避免设置该值，禁止使用 TCP 紧急数据。</p><h5 id="4-setSoTimeout"><a href="#4-setSoTimeout" class="headerlink" title="4.setSoTimeout"></a>4.setSoTimeout</h5><p>setSoTimeout 方法主要是用来设置 SO_TIMEOUT 属性的。</p><p>注释上说：用来设置阻塞操作的超时时间，阻塞操作主要有：</p><ol><li>ServerSocket.accept() 服务器等待客户端的连接；</li><li>SocketInputStream.read() 客户端或服务端读取输入超时；</li><li>DatagramSocket.receive()。</li></ol><p>我们必须在必须在阻塞操作之前设置该选项， 如果时间到了，操作仍然在阻塞，会抛出 InterruptedIOException 异常（Socket 会抛出 SocketTimeoutException 异常，不同的套接字抛出的异常可能不同）。</p><p>对于 Socket 来说，超时时间如果设置成 0，表示没有超时时间，阻塞时会无限等待。</p><h5 id="5-setSendBufferSize"><a href="#5-setSendBufferSize" class="headerlink" title="5.setSendBufferSize"></a>5.setSendBufferSize</h5><p>setSendBufferSize 方法主要用于设置 SO_SNDBUF 属性的，入参是 int 类型，表示设置发送端（输出端）的缓冲区的大小，单位是字节。</p><p>入参 size 必须大于 0，否则会抛出 IllegalArgumentException 异常。</p><p>一般我们都是采取默认的，如果值设置太小，很有可能导致网络交互过于频繁，如果值设置太大，那么交互变少，实时性就会变低。</p><h5 id="6-setReceiveBufferSize"><a href="#6-setReceiveBufferSize" class="headerlink" title="6.setReceiveBufferSize"></a>6.setReceiveBufferSize</h5><p>setReceiveBufferSize 方法主要用来设置 SO_RCVBUF 属性的，入参是 int 类型，表示设置接收端的缓冲区的大小，单位是字节。</p><p>入参 size 必须大于 0，否则会抛出 IllegalArgumentException 异常。</p><p>一般来说，在套接字建立连接之后，我们可以随意修改窗口大小，但是当窗口大小大于 64k 时，需要注意：</p><ol><li>必须在 Socket 连接客户端之前设置缓冲值；</li><li>必须在 ServerSocket 绑定本地地址之前设置缓冲值。</li></ol><h5 id="7-setKeepAlive"><a href="#7-setKeepAlive" class="headerlink" title="7.setKeepAlive"></a>7.setKeepAlive</h5><p>setKeepAlive 方法主要用来设置 SO_KEEPALIVE 属性，主要是用来探测服务端的套接字是否还是存活状态，默认设置是 false，不会触发这个功能。</p><p>如果 SO_KEEPALIVE 开启的话，TCP 自动触发功能：如果两小时内，客户端和服务端的套接字之间没有任何通信，TCP 会自动发送 keepalive 探测给对方，对方必须响应这个探测（假设是客户端发送给服务端），预测有三种情况：</p><ol><li>服务端使用预期的 ACK 回复，说明一切正常；</li><li>服务端回复 RST，表示服务端处于死机或者重启状态，终止连接；</li><li>没有得到服务端的响应（会尝试多次），表示套接字已经关闭了。</li></ol><h5 id="8-setReuseAddress"><a href="#8-setReuseAddress" class="headerlink" title="8.setReuseAddress"></a>8.setReuseAddress</h5><p>setReuseAddress 方法主要用来设置 SO_REUSEADDR 属性，入参是布尔值，默认是 false。</p><p>套接字在关闭之后，会等待一段时间之后才会真正的关闭，如果此时有新的套接字前来绑定同样的地址和端口时，如果 setReuseAddress 为 true 的话，就可以绑定成功，否则绑定失败。</p><h4 id="9-3-5-总结"><a href="#9-3-5-总结" class="headerlink" title="9.3.5-总结"></a>9.3.5-总结</h4><p>如果平时一直在做业务代码，Socket 可能用到的很少，但面试问到网络协议时，或者以后有机会做做中间件的时候，就会有大概率会接触到 Socket，所以多学学，作为知识储备也蛮好的。</p><h3 id="9-4-ServerSocket-源码及面试题"><a href="#9-4-ServerSocket-源码及面试题" class="headerlink" title="9.4-ServerSocket 源码及面试题"></a>9.4-ServerSocket 源码及面试题</h3><p>上一小节我们学习了 Socket，本文我们来看看服务端套接字 API：ServerSocket，本文学习完毕之后，我们就可以把客服端 Socket 和服务端 ServerSocket 串联起来，做一个真实的网络通信的 demo 了。</p><h4 id="9-4-1-类属性"><a href="#9-4-1-类属性" class="headerlink" title="9.4.1-类属性"></a>9.4.1-类属性</h4><p>ServerSocket 的主要作用，是作为服务端的套接字，接受客户端套接字传递过来的信息，并把响应回传给客户端，其属性非常简单，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 已创建</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> bound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绑定</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> closed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 已关闭</span><span class="token comment" spellcheck="true">// 底层的功能都依靠 SocketImpl 来实现</span><span class="token keyword">private</span> SocketImpl impl<span class="token punctuation">;</span></code></pre><p>ServerSocket 和 Socket 一样，底层都是依靠 SocketImpl 的能力，而 SocketImpl 底层能力的实现基本上都是 native 方法实现的。</p><h4 id="9-4-2-初始化"><a href="#9-4-2-初始化" class="headerlink" title="9.4.2-初始化"></a>9.4.2-初始化</h4><p>初始化大概可以分成两类：无参构造器和有参构造器。</p><ol><li>无参构造器做的事情比较简单，只指定了 SocketImpl 为 SocksSocketImpl 类；</li><li>有参构造器有几种初始化的形式，我们一起来看一下参数最多的构造器的源码。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ServerSocket</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">,</span> InetAddress bindAddr<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认是 SocksSocketImpl 实现</span>    <span class="token function">setImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 端口必须大于 0，小于 65535</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> port <span class="token operator">></span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                   <span class="token string">"Port value out of range: "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大可连接数如果小于1，那么采取默认的 50</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>backlog <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>      backlog <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 底层 navtive 方法</span>        <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>bindAddr<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>入参 port 指的是 ServerSocket 需要绑定本地那个端口。</p><p>入参 backlog 指的是服务端接受客户端连接队列的最大长度，这里需要注意的是，这里并不是限制客户端连接的个数，我们在 JDK8 版本下做过实验，我们把服务端的 backlog 设置成 1，并且变慢服务端的处理速度，当服务端并发请求过来时，并不是第二个请求过来就拒绝连接，我们在实际工作中，最好也不要用 backlog 来限制客户端连接的个数。</p><p>还有点需要注意的是 backlog 小于 1 时，backlog 会被设置成默认的 50。</p><p>入参 InetAddress 表示 ip 地址。</p><h4 id="9-4-3-bind"><a href="#9-4-3-bind" class="headerlink" title="9.4.3-bind"></a>9.4.3-bind</h4><p>bind 方法主要作用是把 ServerSocket 绑定到本地的端口上，只有当我们使用无参构造器初始化 ServerSocket 时，才会用到这个方法，如果使用有参构造器的话，在初始化时就已经绑定到本地的端口上了。</p><p>配合无参构造器，一般我们这么用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 进行初始化</span>ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 进行绑定</span>serverSocket<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">7007</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="9-4-4-accept"><a href="#9-4-4-accept" class="headerlink" title="9.4.4-accept"></a>9.4.4-accept</h4><p>accept 方法主要是用来 ServerSocket 接受来自客户端的套接字的，如果此时没有来自客户端的请求时，该方法就会一直阻塞，如果有通过 setSoTimeout 方法设置超时时间，那么 accept 只会在超时间内阻塞，过了超时时间就会抛出异常。</p><p>bind 和 accept 方法底层都是 native 方法实现，我们就不看源码了。</p><h4 id="9-4-5-面试题"><a href="#9-4-5-面试题" class="headerlink" title="9.4.5-面试题"></a>9.4.5-面试题</h4><h5 id="1-说说你对-Socket-和-ServerSocket-的理解？"><a href="#1-说说你对-Socket-和-ServerSocket-的理解？" class="headerlink" title="1.说说你对 Socket 和 ServerSocket 的理解？"></a>1.说说你对 Socket 和 ServerSocket 的理解？</h5><p>答：两者我们都可以称为套接字，底层基于 TCP/UDP 协议，套接字对底层协议进行了封装，让我们使用时更加方便，Socket 常被使用在客户端，用于向服务端请求数据和接受响应，ServerSocket 常用于在服务端，用于接受客户端的请求并进行处理，两者其底层使用都是依靠 SocketImpl 的子类的 native 方法。</p><h5 id="2-说说对-SocketOptions-中的-SO-TIMEOUT-的理解？"><a href="#2-说说对-SocketOptions-中的-SO-TIMEOUT-的理解？" class="headerlink" title="2.说说对 SocketOptions 中的 SO_TIMEOUT 的理解？"></a>2.说说对 SocketOptions 中的 SO_TIMEOUT 的理解？</h5><p>答：SocketOptions 类有很多属性设置，比如 SO_TIMEOUT 、SO_LINGER 等等，这些问题说一下自己的理解即可，可以参考 《Socket 源码及面试题》 中对各种属性的解析。</p><h5 id="3-在构造-Socket-的时候，我可以选择-TCP-或-UDP-么？应该如何选择？"><a href="#3-在构造-Socket-的时候，我可以选择-TCP-或-UDP-么？应该如何选择？" class="headerlink" title="3.在构造 Socket 的时候，我可以选择 TCP 或 UDP 么？应该如何选择？"></a>3.在构造 Socket 的时候，我可以选择 TCP 或 UDP 么？应该如何选择？</h5><p>答：可以的，Socket 有三个参数的构造器，第三个参数表示你想使用 TCP 还是 UDP。</p><h5 id="4-TCP-有自动检测服务端是否存活的机制么？有没有更好的办法？"><a href="#4-TCP-有自动检测服务端是否存活的机制么？有没有更好的办法？" class="headerlink" title="4.TCP 有自动检测服务端是否存活的机制么？有没有更好的办法？"></a>4.TCP 有自动检测服务端是否存活的机制么？有没有更好的办法？</h5><p>答：有的，我们可以通过 setKeepAlive 方法来激活该功能，如果两小时内，客户端和服务端的套接字之间没有任何通信，TCP 会自动发送 keepalive 探测给服务端，预测服务端有三种情况：</p><ol><li>服务端使用预期的 ACK 回复，说明一切正常；</li><li>服务端回复 RST，表示服务端处于死机或者重启状态，终止连接；</li><li>没有得到服务端的响应（会尝试多次），表示套接字已经关闭了。</li></ol><p>但我们并不建议使用这种方式，我们可以自己起一个定时任务，定时的访问服务端的特殊接口，如果服务端返回的数据和预期一致，说明服务端是存活的。</p><h4 id="9-4-6-总结"><a href="#9-4-6-总结" class="headerlink" title="9.4.6-总结"></a>9.4.6-总结</h4><p>Socket 和 ServerSocket 在源码方面没啥特别可说的地方，基本都是一些设置，底层实现都是 native 的方法，但面试官会从此延伸到一些网络协议方面的知识，因为这已经超出本专栏的范畴了，感兴趣的同学可以自行百度。</p><h3 id="9-5-工作实战：Socket-结合线程池的使用"><a href="#9-5-工作实战：Socket-结合线程池的使用" class="headerlink" title="9.5-工作实战：Socket 结合线程池的使用"></a>9.5-工作实战：Socket 结合线程池的使用</h3><p>Socket 面试最终题一般都是让你写一个简单的客户端和服务端通信的例子，本文就带大家一起来写这个 demo。</p><h4 id="9-5-1-要求"><a href="#9-5-1-要求" class="headerlink" title="9.5.1-要求"></a>9.5.1-要求</h4><ol><li>可以使用 Socket 和 ServiceSocket 以及其它 API；</li><li>写一个客户端和服务端之间 TCP 通信的例子；</li><li>服务端处理任务需要异步处理；</li><li>因为服务端处理能力很弱，只能同时处理 5 个请求，当第六个请求到达服务器时，需要服务器返回明确的错误信息：服务器太忙了，请稍后重试~。</li></ol><p>需求比较简单，唯一复杂的地方在于第四点，我们需要对客户端的请求量进行控制，首先我们需要确认的是，我们是无法控制客户端发送的请求数的，所以我们只能从服务端进行改造，比如从服务端进行限流。</p><p>有的同学可能很快想到，我们应该使用 ServerSocket 的 backlog 的属性，把其设置成 5，但我们在上一章中说到 backlog 并不能准确代表限制的客户端连接数，而且我们还要求服务端返回具体的错误信息，即使 backlog 生效，也只会返回固定的错误信息，不是我们定制的错误信息。</p><p>我们好好想想，线程池似乎可以做这个事情，我们可以把线程池的 coreSize 和 maxSize 都设置成 4，把队列大小设置成 1，这样服务端每次收到请求后，会先判断一下线程池中的队列有没有数据，如果有的话，说明当前服务器已经马上就要处理第五个请求了，当前请求就是第六个请求，应该被拒绝。</p><p>正好线程池的加入也可以满足第三点，服务端的任务可以异步执行。</p><h4 id="9-5-2-客户端代码"><a href="#9-5-2-客户端代码" class="headerlink" title="9.5.2-客户端代码"></a>9.5.2-客户端代码</h4><p>客户端的代码比较简单，直接向服务器请求数据即可，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketClient</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadPoolExecutor socketPoll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span>                                                                               365L<span class="token punctuation">,</span>                                                                               TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span>                                                                               <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模拟客户端同时向服务端发送 6 条消息</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      socketPoll<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">7007</span><span class="token punctuation">,</span> <span class="token string">"nihao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 发送tcp   *   * @param domainName 域名   * @param port       端口   * @param content    发送内容   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">send</span><span class="token punctuation">(</span>String domainName<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"客户端开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    InputStreamReader isr <span class="token operator">=</span> null<span class="token punctuation">;</span>    BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>    InputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>    StringBuffer response <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>domainName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 无参构造器初始化 Socket，默认底层协议是 TCP</span>      socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      socket<span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 客户端准备连接服务端，设置超时时间 10 秒</span>      socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>domainName<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TCPClient 成功和服务端建立连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 准备发送消息给服务端</span>      outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 UTF 编码，防止乱码</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 输出字节码</span>      <span class="token function">segmentWrite</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 关闭输出</span>      socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TCPClient 发送内容为 {}"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 等待服务端的返回</span>      socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//50秒还没有得到数据，直接断开连接</span>      <span class="token comment" spellcheck="true">// 得到服务端的返回流</span>      is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>      br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 从流中读取返回值</span>      response <span class="token operator">=</span> <span class="token function">segmentRead</span><span class="token punctuation">(</span>br<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 关闭输入流</span>      socket<span class="token punctuation">.</span><span class="token function">shutdownInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭各种流和套接字</span>      <span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> outputStream<span class="token punctuation">,</span> isr<span class="token punctuation">,</span> br<span class="token punctuation">,</span> is<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TCPClient 接受到服务端返回的内容为 {}"</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"TCPClient-send socket连接失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"socket连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"TCPClient-send unkown errror"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"socket连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> outputStream<span class="token punctuation">,</span> isr<span class="token punctuation">,</span> br<span class="token punctuation">,</span> is<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do nothing</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 关闭各种流   *   * @param socket   * @param outputStream   * @param isr   * @param br   * @param is   * @throws IOException   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">,</span> OutputStream outputStream<span class="token punctuation">,</span> InputStreamReader isr<span class="token punctuation">,</span>                           BufferedReader br<span class="token punctuation">,</span> InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> socket <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>socket<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> outputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>      outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> br<span class="token punctuation">)</span> <span class="token punctuation">{</span>      br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> isr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> is<span class="token punctuation">)</span> <span class="token punctuation">{</span>      is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 分段读   *   * @param br   * @throws IOException   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> StringBuffer <span class="token function">segmentRead</span><span class="token punctuation">(</span>BufferedReader br<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sb<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 分段写   *   * @param bytes   * @param outputStream   * @throws IOException   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">segmentWrite</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> OutputStream outputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> end <span class="token operator">!=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      start <span class="token operator">=</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i <span class="token operator">*</span> SIZE<span class="token punctuation">;</span>      end <span class="token operator">=</span> length <span class="token operator">></span> SIZE <span class="token operator">?</span> start <span class="token operator">+</span> SIZE <span class="token operator">:</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      length <span class="token operator">-=</span> SIZE<span class="token punctuation">;</span>      outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>      outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端代码中我们也用到了线程池，主要是为了并发模拟客户端一次性发送 6 个请求，按照预期服务端在处理第六个请求的时候，会返回特定的错误信息给客户端。</p><p>以上代码主要方法是 send 方法，主要处理像服务端发送数据，并处理服务端的响应。</p><h4 id="9-5-3-服务端代码"><a href="#9-5-3-服务端代码" class="headerlink" title="9.5.3-服务端代码"></a>9.5.3-服务端代码</h4><p>服务端的逻辑分成两个部分，第一部分是控制客户端的请求个数，当超过服务端的能力时，拒绝新的请求，当服务端能力可响应时，放入新的请求，第二部分是服务端任务的执行逻辑。</p><h5 id="1-对客户端请求进行控制"><a href="#1-对客户端请求进行控制" class="headerlink" title="1.对客户端请求进行控制"></a>1.对客户端请求进行控制</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketServiceStart</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 服务端的线程池，两个作用   * 1：让服务端的任务可以异步执行   * 2：管理可同时处理的服务端的请求数   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadPoolExecutor collectPoll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>                                                                               365L<span class="token punctuation">,</span>                                                                               TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span>                                                                               <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                                                                                   <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 启动服务端   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SocketServiceStart 服务端开始启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// backlog  serviceSocket处理阻塞时，客户端最大的可创建连接数，超过客户端连接不上</span>      <span class="token comment" spellcheck="true">// 当线程池能力处理满了之后，我们希望尽量阻塞客户端的连接</span><span class="token comment" spellcheck="true">//      ServerSocket serverSocket = new ServerSocket(7007,1,null);</span>      <span class="token comment" spellcheck="true">// 初始化服务端</span>      ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      serverSocket<span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      serverSocket.bind(new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), 80));</span>      serverSocket<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">7007</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SocketServiceStart 服务端启动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 自旋，让客户端一直在取客户端的请求，如果客户端暂时没有请求，会一直阻塞</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接受客户端的请求</span>        Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果队列中有数据了，说明服务端已经到了并发处理的极限了，此时需要返回客户端有意义的信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>collectPoll<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SocketServiceStart 服务端处理能力到顶，需要控制客户端的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//返回处理结果给客户端</span>          <span class="token function">rejectRequest</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 异步处理客户端提交上来的任务</span>          collectPoll<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SocketService</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SocketServiceStart - start error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SocketServiceStart - start error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回特定的错误码给客户端</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rejectRequest</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"服务器太忙了，请稍后重试~"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SocketClient<span class="token punctuation">.</span><span class="token function">segmentWrite</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//关闭流</span>      SocketClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span>outputStream<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们使用 collectPoll.getQueue().size() &gt;= 1 来判断目前服务端是否已经到达处理的极限了，如果队列中有一个任务正在排队，说明当前服务端已经超负荷运行了，新的请求应该拒绝掉，如果队列中没有数据，说明服务端还可以接受新的请求。</p><p>以上代码注释详细，就不累赘说了。</p><h5 id="2-服务端任务的处理逻辑"><a href="#2-服务端任务的处理逻辑" class="headerlink" title="2.服务端任务的处理逻辑"></a>2.服务端任务的处理逻辑</h5><p>服务端的处理逻辑比较简单，主要步骤是：从客户端的 Socket 中读取输入，进行处理，把响应返回给客户端。</p><p>我们使用线程沉睡 2 秒来模拟服务端的处理逻辑，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketService</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">SocketService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">SocketService</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SocketService 服务端任务开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    InputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>    InputStreamReader isr <span class="token operator">=</span> null<span class="token punctuation">;</span>    BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//接受消息</span>      socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 10秒还没有得到数据，直接断开连接</span>      is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>      StringBuffer sb <span class="token operator">=</span> SocketClient<span class="token punctuation">.</span><span class="token function">segmentRead</span><span class="token punctuation">(</span>br<span class="token punctuation">)</span><span class="token punctuation">;</span>      socket<span class="token punctuation">.</span><span class="token function">shutdownInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SocketService accept info is {}"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//服务端处理 模拟服务端处理耗时</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String response  <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//返回处理结果给客户端</span>      outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SocketClient<span class="token punctuation">.</span><span class="token function">segmentWrite</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭流</span>      SocketClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span>outputStream<span class="token punctuation">,</span>isr<span class="token punctuation">,</span>br<span class="token punctuation">,</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SocketService 服务端任务执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SocketService IOException"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SocketService Exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        SocketClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span>outputStream<span class="token punctuation">,</span>isr<span class="token punctuation">,</span>br<span class="token punctuation">,</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SocketService IOException"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="9-5-4-测试"><a href="#9-5-4-测试" class="headerlink" title="9.5.4-测试"></a>9.5.4-测试</h4><p>测试的时候，我们必须先启动服务端，然后再启动客户端，首先我们启动服务端，打印日志如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Socket-Demo%E6%97%A5%E5%BF%97.jpeg" alt="Socket-Demo日志"></p><p>接着我们启动客户端，打印日志如下：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Socket-Demo%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A5%E5%BF%97.jpeg" alt="Socket-Demo客户端日志"></p><p>我们最后看一下服务端的运行日志：</p><p><img src="/2020/02/02/jdk-yuan-ma-xiang-jie/Socket-Demo%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%97%A5%E5%BF%97.jpeg" alt="Socket-Demo服务端日志"></p><p>从以上运行结果中，我们可以看出得出的结果是符合我们预期的，服务端在请求高峰时，能够并发处理5个请求，其余请求可以用正确的提示进行拒绝。</p><h4 id="9-5-5-总结"><a href="#9-5-5-总结" class="headerlink" title="9.5.5-总结"></a>9.5.5-总结</h4><p>所以代码集中在 SocketClient、SocketServiceStart、SocketService 中，启动的顺序为先启动 SocketServiceStart，后运行 SocketClient，感兴趣的同学可以自己 debug 下，加深印象。</p>]]></content>
      
      
      <categories>
          
          <category> Java源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="/2020/01/18/css-xue-xi-bi-ji/"/>
      <url>/2020/01/18/css-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-1什么是CSS？"><a href="#1-1什么是CSS？" class="headerlink" title="1.1什么是CSS？"></a>1.1什么是CSS？</h2><p>css是指层叠样式表，样式定义如何显示html元素</p><p>语法</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span>声明<span class="token number">1</span>；声明<span class="token number">2</span>；<span class="token punctuation">}</span></code></pre><p><strong>css</strong>主要用于设置HTML页面中的文本内容（）字体、大小、对齐方式等）、图形的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样。</p><h2 id="1-2引入css样式表"><a href="#1-2引入css样式表" class="headerlink" title="1.2引入css样式表"></a>1.2引入css样式表</h2><p>1.内部样式表（内嵌式）</p><p>内嵌式是将css代码集中写在HTML代码的头部head标签中，并用style标签定义。</p><pre><code>&lt;head&gt; &lt;title&gt;例子&lt;/title&gt;&lt;style  type=&quot;text/css&quot;&gt;选择器{属性1：属性值1；属性2：属性值2：}&lt;/style&gt;&lt;/head&gt;</code></pre><p>2.行内式（<strong>内联样式</strong>）</p><p>是通过标签的style属性来设置元素的样式</p><p>&lt;标签名  style=“属性1：属性值1；属性2：属性值2”&gt; 内容&lt;/标签名&gt;</p><p>3.外部样式表（外链式）</p><p>嵌入式是将所有的样式放在一个或多个以.css为扩展名的外部样式表文件中，通过<link>标签将外部样式表文件链接到HTML文档中。</p><pre><code>&lt;hesd&gt;    &lt;link  href=&quot;CSS文件的路径&quot;  rel=“style sheet”/&gt;    &lt;/head&gt;</code></pre><h2 id="1-3-CSS的选择器"><a href="#1-3-CSS的选择器" class="headerlink" title="1.3 CSS的选择器"></a>1.3 CSS的选择器</h2><ol><li><p>元素选择器（标签选择器）</p><p>指用HTML元素名（或标签名）作为选择器，按标签名分类，为页面中某一类标签指定统一的CSS样式</p><p>格式如下： 标签名（元素名）{属性1：属性值1；属性2：属性值2；}</p></li></ol><ol start="2"><li><p>类选择器</p><p>类选择器允许以一种独立于文档元素的方式来指定样式。</p><p>该选择器可以单独使用，也可以与其他元素结合使用。</p><p>格式：.类名{属性1：属性值1；属性2：属性值2}</p><p>调用时&lt;标签名  class=“类名&gt;即可</p></li></ol><ol start="3"><li><p>id选择器</p><p>id选择器使用”#“进行标识，格式如下：</p><p>#id名{属性1：属性值1；属性2：属性值2}</p><p>id名即为HTML元素的id属性值，元素的id是唯一的。</p><p>类选择器可以多次重复使用，而id选择器是唯一的。</p></li></ol><ol start="4"><li><p>通配符选择器</p><p>通配符选择器用”*“号表示，是所有选择器中范围最广的，能匹配页面中所有的元素。</p><p>  *{属性1:属性值1；属性2：属性值2；}</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2020/01/18/html-xue-xi-bi-ji/"/>
      <url>/2020/01/18/html-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a>HTML学习笔记</h1><h1 id="1-HTML初识"><a href="#1-HTML初识" class="headerlink" title="1-HTML初识"></a>1-HTML初识</h1><p>超文本标记语言，主要通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><h2 id="1-1-HTML-标签"><a href="#1-1-HTML-标签" class="headerlink" title="1.1-HTML 标签"></a><strong>1.1-HTML 标签</strong></h2><p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p><p>HTML 标签是由尖括号包围的关键词<br>HTML 标签通常是成对出现的<br>标签对中的第一个标签是开始标签，第二个标签是结束标签<br>开始和结束标签也被称为开放标签和闭合标签</p><h2 id="1-2-语法骨架"><a href="#1-2-语法骨架" class="headerlink" title="1.2-语法骨架"></a>1.2-语法骨架</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>      根标签   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   头标签      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   标题标签   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  主题标签   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>html标签：作用：所有html中标签的一个根节点<br>head标签：作用：用于存放：title,metal,base,style,script,link 注意在head标签中必须设置title标签<br>title标签 ：作用：让页面拥有一个属于自己的标题<br>body标签：作用：页面的主体部分，用于存放所有的html标签：p,h,a,b,u,i,s,em,dei,ins,strong,img</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> 声明为html文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> 是html页面的根元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 包含了文档的元（meta）数据，如<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>  <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 定义网页编码格式为utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span> 描述了文档的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> HTML 文档的主体（可见的页面内容）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> 定义一个大的段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>换行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XXX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接</code></pre><h2 id="1-3-HTML属性"><a href="#1-3-HTML属性" class="headerlink" title="1.3-HTML属性"></a>1.3-HTML属性</h2><p><code>class</code>—为html元素定义一个或多个类名（类名从样式文件引入）</p><p><code>id</code>—定义元素的唯一id</p><p><code>style</code>—规定元素的行内样式</p><p><code>title</code>—描述元素的额外信息（作为工具条使用）</p><p>HYML注释—<!--XXXX--></p><h1 id="2-HTML-基本标签"><a href="#2-HTML-基本标签" class="headerlink" title="2-HTML 基本标签"></a>2-HTML 基本标签</h1><pre><code>&lt;h1&gt;&lt;h2&gt;...&lt;h6&gt; 标题&lt;hr1&gt;——水平线&lt;font&gt;——字体&lt;font size=&quot;2&quot; color-&quot;red&quot; face=&quot;微软雅黑&quot;&gt;&lt;b&gt;&lt;i&gt;——格式化标签 &lt;b&gt;粗体 &lt;i&gt;斜体&lt;ul&gt;&lt;01&gt;——列表标签 &lt;li&gt;——列表标签内的每一列&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;——无序列表&lt;01&gt;&lt;li&gt;&lt;/li&gt;&lt;101&gt;——有序列表&lt;a&gt;——超链接标签 target——定义文档链接在何处显示&lt;a heaf=&quot;www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;XXX&quot;&gt;XXX&lt;/a&gt;</code></pre><h2 id="2-1-—图片标签"><a href="#2-1-—图片标签" class="headerlink" title="2.1-—图片标签"></a>2.1-<img>—图片标签</h2><p><strong>属性</strong></p><p><code>src</code>：图片的路径地址（必写属性）</p><p><code>width</code>：宽度      height：高度</p><p><code>title</code>：提示文本（鼠标悬停在图片上方会出现的提示信息）</p><p><code>alt</code>：替换文本（图片加载失败时会出现的文字信息）</p><p><code>border</code>：边框（只能定义边框的粗细）</p><h2 id="2-2-—表格标签"><a href="#2-2-—表格标签" class="headerlink" title="2.2-—表格标签"></a>2.2-<table><th></th><tr><td>—表格标签</td></tr></table></h2><p><code>&lt;table&gt;</code>父标签，相当于整个表格的容器</p><p><strong>属性</strong></p><p><code>border</code>：边框的宽度</p><p><code>cellpadding</code>：单元格边沿与其内容之间的空白</p><p><code>cellspaceling</code>：单元格之间的空白</p><p><code>bgcolor</code>：表格中的背景颜色</p><p><code>height</code>：表格的高度</p><p><code>width</code>：表格的宽度</p><p><code>&lt;th&gt;</code>表格表头，单元格内容默认居中加粗</p><p><code>&lt;tr&gt;</code>标签用于定义行</p><p><code>&lt;td&gt;</code>标签用于定义表格的单元格（列）</p><p><code>&lt;div&gt;</code>—块级元素，定义了文档的区域，用于组合其他html元素的容器</p><p><code>&lt;span&gt;</code>—内联元素，用来组合文档中的行内元素</p><h2 id="2-3-表单标签"><a href="#2-3-表单标签" class="headerlink" title="2.3-表单标签"></a>2.3-<from>表单标签</from></h2><p><strong>把表单中的数据提交给远端的服务器</strong></p><p>表单元素是允许用户在表单中输入内容： 如：文本域（texttarea） 下拉列表、单选框（radio-buttons）、复选框（checkboxes）。表格中使用的输入元素为 <code>&lt;input&gt;</code></p><p><code>&lt;form&gt;</code>表单标签在浏览器上没有任何显示，但所有需要提交到服务器的数据都需要存放在表单标签中</p><p><strong>action属性：</strong>请求路径，确认表单提交到服务器的地址。</p><p><strong>method 属性：</strong>请求方式 如：GET PODRT。</p><h2 id="2-4-输入域标签"><a href="#2-4-输入域标签" class="headerlink" title="2.4-输入域标签"></a>2.4-<input>输入域标签</h2><p><input>标签用于获得用户的输入信息，type属性值不同，输入类型不同。</p><ol><li><p><strong>type属性</strong></p><p>—text：文本框，单行的输入字段，默认宽度为20个字符</p><p>—password：密码框，密码字段</p><p>—radio：单选框，表示只能选择一组互斥选项按钮的一个</p><p>—submit：提交按钮，将表单数据发送到服务器</p><p>—checkbox：复选框</p><p>—file：文件上传组件</p><p>—hidden：隐藏字段</p><p>—reset：重置按钮</p><p>—image：图形提交按钮</p><p>—button：普通按钮，常用于与JavaScript结合使用</p></li><li><p><strong>name属性</strong>：如果需要将表单数据提交到服务器，必须提供name属性值。服务器通过name属性值获得提交的数据。</p></li><li><p><strong>value属性</strong>：设置input标签的默认值，注submit和reset为按钮显示</p></li><li><p><strong>size属性</strong>：input宽度大小</p></li><li><p><strong>checked属性</strong>：单选框或复选框被选中</p></li><li><p><strong>readonly</strong>：是否只读，数据不会被提交</p></li><li><p><strong>disabled</strong>：是否可用，数据不会被提交</p></li><li><p><strong>maxlength</strong>：允许输入的最大长度</p></li><li><pre><code>&lt;select&gt;x下拉列表—可用单选和多选，需要子标签&lt;option&gt;制定列表项——name属性:发送服务器的名称——multipe属性:不写默认单选，取值为“multiple”表示多选——size属性：多选时，课件选项的数目—&lt;option&gt;子标签：下拉列表中的一个选项注：一般option要给value属性值，如果不给默认把option文本内容发送到服务器selected：勾选当前列表项value：发送到服务器的选项值</code></pre></li></ol><h2 id="2-5文本域标签"><a href="#2-5文本域标签" class="headerlink" title="2.5文本域标签"></a>2.5<textared>文本域标签</textared></h2><p>—cols属性：文本域的列数</p><p>—rows属性：文本域的行数</p><pre><code>&lt;label&gt;—定义input元素的标注&lt;nav&gt;—定义导航链接</code></pre><h2 id="2-6常用事件属性"><a href="#2-6常用事件属性" class="headerlink" title="2.6常用事件属性"></a>2.6常用事件属性</h2><ol><li><p><strong>窗口事件</strong></p><p>onafterprint：在文档打印之后运行</p><p>onbeforeprint:在文档打印之前运行</p><p>onload：在文档加载时运行</p><p>onresize：在调整窗口大小时运行</p><p>onunload：当用户离开文档时运行</p></li></ol><ol start="2"><li><p><strong><em>表单事件</em></strong></p><p>onbur：当元素失去焦点时运行</p><p>onchange：当元素改变时运行</p><p>onfocus：当元素获得焦点时运行</p><p>onselect：当选取元素时运行</p><p>onsubmit：当提交表单时运行</p></li></ol><ol start="3"><li><p><strong>键盘事件</strong></p><p>onkeydown：当按下按键时运行</p><p>onkeypress：当按下并松开按键时运行</p><p>onkeyup：当松开案件时运行</p></li></ol><ol start="4"><li><p><strong>鼠标事件</strong></p><p>onclick：当单击鼠标时运行</p><p>ondbclick：当双击鼠标时运行</p><p>onmousedown：当按下鼠标按钮时</p><p>onmousemove：当鼠标指针移动时</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习笔记1</title>
      <link href="/2020/01/17/springcloud-xue-xi-bi-ji-yi/"/>
      <url>/2020/01/17/springcloud-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud学习笔记"><a href="#SpringCloud学习笔记" class="headerlink" title="SpringCloud学习笔记"></a>SpringCloud学习笔记</h1><h2 id="1-架构演进和分布式系统基础"><a href="#1-架构演进和分布式系统基础" class="headerlink" title="1-架构演进和分布式系统基础"></a>1-架构演进和分布式系统基础</h2><h3 id="1-1-单体应用"><a href="#1-1-单体应用" class="headerlink" title="1.1-单体应用"></a>1.1-单体应用</h3><ol><li>把所有的功能集中在同一系统中实现，应用程序的全部功能被一起打包作为单个单元或应用程序</li><li>这个单元可以是JAR、WAR、EAR,或其他一些归档格式，运行在同一个 tomcat 进程中</li><li>其全部集成在一个单一的单元.</li><li><strong>优点：</strong><ul><li>方便调试，代码都在一起</li><li>易于部署，所有服务都在本地容器内</li><li>中小型项目可以快速迭代，不需要太多资源</li></ul></li><li><strong>缺点：</strong><ul><li>可复用性差：服务被打包在应用中，功能不易复用</li><li>系统启动慢：一个进程包含了所有的业务逻辑，涉及到的启动模块过多，导致系统的启动、重启时间周期过长 </li><li>线上问题修复周期长：任何一个线上问题修复需要对整个应用系统进行全面升级。</li><li>系统扩展性比较差：增加新东西的时候不能针对单个点增加，全局性的增加.牵一发而动全身。</li><li>技术债务逐渐上升：随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务，并且越积越多。</li><li>阻碍技术创新：单体应用往往使用统一的技术平台或方案解决所有问题，团队的每个成员都必须使用相同的开发语言和架构，想要引入新的框架或技术平台非常困难。</li></ul></li></ol><h3 id="1-2-微服务应用"><a href="#1-2-微服务应用" class="headerlink" title="1.2-微服务应用"></a>1.2-微服务应用</h3><ol><li>微服务架构风格是一种将一个单一应用程序开发为一组小型服务的方法</li><li>每个小型服务都运行在自己的进程中，并经常采用HTTP资源API轻量的机制来相互通信</li><li>这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署</li><li>一个微服务只关注某个特定的功能</li><li><strong>优点：</strong><ul><li>易于开发和维护：一个微服务只会关注一个特定的业务功能，所以业务清晰、代码量较少。开发和维护单个微服务相对简单，每个服务为独立的业务开发，一个微服务只关注某个特定的功能，如订单管理、用户管理等</li><li>单个微服务启动较快，每个微服务可独立运行在自己的进程里</li><li>局部修改容易部署：单体应用只要有修改，就得重新部署整个应用。一般来说，对某个微服务进行修改，只需要重新部署这个服务即可</li><li>技术栈不受限制：在微服务架构中，可以结合项目业务及团队的特点，合理的选择技术栈</li><li>按需伸缩：可根据需求，实现细粒度的扩展</li></ul></li><li><strong>缺点：</strong><ul><li>运维要求高：更多的服务意味着要投入更多的运维</li><li>分布式固有的复杂性：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延迟、分布式事务等都会带来巨大的问题。</li><li>接口调整成本高：微服务之间通过接口进行通信。如果修改某一个微服务的API，可能所有用到这个接口的微服务都需要进行调整</li></ul></li></ol><h3 id="1-3-集群、分布式和微服务的区别"><a href="#1-3-集群、分布式和微服务的区别" class="headerlink" title="1.3-集群、分布式和微服务的区别"></a>1.3-集群、分布式和微服务的区别</h3><ol><li>分布式：<ul><li>一个业务分拆多个子业务，部署在不同的服务器上</li><li>分布式中的每一个节点，都可以做集群</li><li>分布式需要做好事务管理</li><li>区别分布式的方式是根据不同机器不同业务。</li></ul></li><li>微服务：<ul><li>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成</li><li>系统中的各个微服务可被独立部署，各个微服务之间是松耦合的</li><li>每个微服务仅关注于完成一件任务并很好地完成该任务</li></ul></li><li>集群：<ul><li>同一个业务，部署在多个服务器上        </li><li>区别集群的方式是根据部署多台服务器业务是否相同</li><li>集群模式需要做好session共享，确保在不同服务器切换的过程中不会因为没有获取到session而中止退出服务</li><li>一般配置Nginx的负载容器实现：静态资源缓存、Session共享可以附带实现，Nginx支持5000个并发量</li></ul></li><li>分布式是否属于微服务<ul><li>不一定，如果一个很大应用，拆分成三个应用，但还是很庞大，虽然分布式了，但不是微服务。微服务核心要素是微小</li><li>微服务的设计是为了不因为某个模块的升级和BUG影响现有的系统业务</li><li>微服务的应用不一定是分散在多个服务器上，也可以是同一个服务器     </li><li>微服务架构是分布式服务架构的子集</li><li>分布式：分散压力。微服务：分散能力</li></ul></li><li>单应用与集群<ul><li>整个项目所有的服务都由这台服务器提供。这就是单机结构</li><li>单机复制几份，这样就构成了一个“集群”</li><li>集群中每台服务器就叫做这个集群的一个“节点”，所有节点构成了一个集群</li><li>每个节点都提供相同的服务，那么这样系统的处理能力就相当于提升了好几倍</li></ul></li></ol><h2 id="2-微服务核心基础"><a href="#2-微服务核心基础" class="headerlink" title="2-微服务核心基础"></a>2-微服务核心基础</h2><h3 id="2-1-微服务架构"><a href="#2-1-微服务架构" class="headerlink" title="2.1-微服务架构"></a>2.1-微服务架构</h3><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务于服务间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><ul><li>分布式：不同的功能模块部署在不同的服务器上，减轻网站高并发带来的压力。</li><li>集群：多台服务器上部署相同应用构成一个集群，通过负载均衡共同向外提供服务。</li><li>微服务：微服务架构模式就是将web应用拆分为一系列小的服务模块，这些模块可以独立地编译、部署，并通过各自暴露的API接口通讯，共同组成一个web应用。</li><li>SpringCloud是基于SpringBoot的一整套微服务框架，提供了一系列可配置的组件，如<strong>配置管理</strong>、<strong>服务发现</strong>、<strong>负载均衡</strong>、<strong>熔断器</strong>、<strong>断路器</strong>、<strong>智能路由</strong>、<strong>微代理</strong>、<strong>控制总线</strong>、<strong>全局锁</strong>、<strong>决策竞选</strong>、<strong>分布式会话</strong>和<strong>集群状态管理</strong>等。</li></ul><h3 id="2-2-什么是SpringCloud？"><a href="#2-2-什么是SpringCloud？" class="headerlink" title="2.2-什么是SpringCloud？"></a>2.2-什么是SpringCloud？</h3><p>Spring Cloud是一个基于Spring Boot实现的服务工具治理包，专注于全局的服务治理框架。</p><p>Spring Cloud 是一系列框架的有序集合。<br> 它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。<br> Spring 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 Spring Boot 风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/SpringCloud%E7%BB%84%E4%BB%B6%E6%9E%B6%E6%9E%84.png" alt="SpringCloud组件架构"></p><ul><li>所有请求都通过API网关来访问内部服务；</li><li>网关接受请求后，从注册中心获取可用服务模块；</li><li>由Ribbon进行负载均衡后，分发到后台的具体实例；</li><li>各个服务模块之间通过Feign进行通信处理业务；</li><li>Hystrix负责处理服务超时熔断；</li><li>Turbine监控服务间的调用和熔断相关指标。</li></ul><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/SpringCloud%E6%B5%81%E7%A8%8B.png" alt="SpringCloud流程"></p><h2 id="2-3-微服务技术"><a href="#2-3-微服务技术" class="headerlink" title="2.3-微服务技术"></a>2.3-微服务技术</h2><ul><li><p>Spring Cloud Config ：服务配置中心，将所有的服务的配置文件放到本地仓库或者远程仓库，配置中心负责读取仓库的配置文件，其他服务向配置中心读取配置。SpringCloud Config 使得服务的配置统一管理 并可以在不人为重启服务的情况下进行配置文件的刷新。</p></li><li><p>Spring Cloud Netflix ：它是通过包装了 Netflix 公司的微服务组件实现的，也是SpringCloud 核心的核心组件，包括 Eureka Hystrix Zuul Archaius 等。</p></li><li><p>Eureka ：服务注册和发现组件，可以细分为eureka server（服务注册中心）和eureka client（服务注册客户端，所有其他需注册到服务注册中心的微服务组件都可以看做是服务注册客户端）</p><ul><li>Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</li><li>Eureka Client是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）Eureka Server之间将会通过复制的方式完成数据的同步。Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉了，客户端依然可以利用缓存中的信息消费其它服务的API。综上，Eureka通过心跳检测、健康检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。</li></ul></li><li><p>Hystrix ：熔断器组件 Hystrix 通过控制服务的 API 接口的熔断来转移故障，防止微服务系统发生雪崩效应。另外， Hystrix 能够起到服务限流和服务降级的作用。使用Hystrix Dashboard 组件监控单个服务的熔断器的状态，使用 Turbine 组件可以聚合多，现了断路器的模式。“断路器” 本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p></li><li><p>Zuul ：（路由转发+过滤器）能路由网关组 Netflix Zuul能够起到智能路由和请求过滤的作用，是服务接口统一暴露 关键模块，也是安全验证、权限控制的一道门；Zuul路由是微服务架构的不可或缺的一部分，提供动态路由、监控、弹性、安全等的边缘服务，Zuul 是 Netflix 出品的一个基于 JVM 路由和服务端的负载均衡器。</p></li><li><p>Feign 声明式远程调度组件，Feign 是一个声明式的 Web Service 客户端，它的目的就是让 Web Service 调用更加简单。它整合了 Ribbon 和 Hystrix，从而让我们不再需要显式地使用这两个组件。Feign 还提供了 HTTP 请求的模板，通过编写简单的接口和插入注解，我们就可以定义好 HTTP 请求的参数、格式、地址等信息。接下来，Feign 会完全代理 HTTP 的请求，我们只需要像调用方法一样调用它就可以完成服务请求。</p><p>Feign 具有如下特性：</p><ul><li>可插拔的注解支持，包括 Feign 注解和 JAX-RS 注解</li><li>支持可插拔的 HTTP 编码器和解码器</li><li>支持 Hystrix 和它的 Fallback</li><li>支持 Ribbon 的负载均衡</li><li>支持 HTTP 请求和响应的压缩</li></ul></li><li><p>Ribbon 负载均衡组件，为REST客户端实现负载均衡。</p></li><li><p>Archaius ：配置管理 API 的组件， 一个基于 Java 的配置管理库主要用于多配置的动态获取。Spring Cloud Bus 消息总线组件，常和 Spring Cloud Config 配合使用，用于动态新服务的配置。</p></li><li><p>Spring Cloud Sleuth ：服务链路追踪组件，封装了 Dapper Zipkin, Kibina 等组件，可以实时监控服务的链路调用情况。</p></li><li><p>Spring Cloud Data Flow ：大数据操作组件，Spring Cloud Data Flow SpringXD替代品，也是 个混合计算的模型，可以通过命令行的方式操作数据流</p></li><li><p>Spring Cloud Security 安全模块组件，是对 Spring Security 封装，通常配合 0Auth2使用来保护微服务系统的安全。</p></li><li><p>Spring Cloud Consule ：该组件是 Spring Cloud Consul 的封装，和 ureka 类似，它是一个服务注册和发现组件</p></li><li><p>Spring Cloud Zookeeper 该组件是 Spring Cloud Zookeeper 封装，和 Eureka Consul相似，用于服务的注册和发现</p></li><li><p>Spring Cloud Stream ：数据流操作组件，可以封装 Redis RabbitMQ Kafka 等组件实现发送和接收消息等。</p></li><li><p>Spring Cloud CLI ：该组件是 Spring Cloud Spring Boot CLI 的封装，可以让用户以命令行方式快速运行和搭建容器</p></li><li><p>Spring Cloud Task 该组件基于 Spring Task ，提供了任务调度和任务管理的功能。　</p></li><li><p>Spring Cloud Connectors 用于 Paas 云平台连接到后端。</p></li></ul><h2 id="3-Dubbo和SpringCloud"><a href="#3-Dubbo和SpringCloud" class="headerlink" title="3-Dubbo和SpringCloud"></a>3-Dubbo和SpringCloud</h2><ol><li><p><strong>dubbo:</strong> zookeeper + dubbo + springmvc/springboot<br>官方地址：<a href="http://dubbo.apache.org/#!/?lang=zh-cn" target="_blank" rel="noopener">http://dubbo.apache.org/#!/?lang=zh-cn</a><br>配套：</p><p>​    通信方式：rpc<br>​    注册中心：zookeper/redis<br>​    配置中心：diamond</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/Dubbo%E7%BB%84%E4%BB%B6.png" alt="Dubbo"></p></li><li><p>Dubbo核心组件</p><ul><li><strong>Provider：</strong>暴露服务的提供方，可以通过 jar 或者容器的方式启动服务。</li><li><strong>Consumer：</strong>调用远程服务的服务消费方。</li><li><strong>Registry：</strong>服务注册中心和发现中心。</li><li><strong>Monitor：</strong>统计服务和调用次数，调用时间监控中心。（Dubbo 的控制台页面中可以显示，目前只有一个简单版本。）</li><li><strong>Container：</strong>服务运行的容器。</li></ul></li><li><p>Spring Cloud</p><p>springcloud: 全家桶+轻松嵌入第三方组件<br>官网：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/</a><br>配套</p><p>​        通信方式：http restful<br>​        注册中心：eruka/consul<br>​        配置中心：config<br>​        断路器：hystrix<br>​        网关：zuul<br>​        分布式追踪系统：sleuth+zipkin</p></li><li><p>SpringCloud和Dubbo区别</p><table><thead><tr><th></th><th>Dubbo</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>Spring Cloud Netflix Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务监控</td><td>无</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table></li><li><p>Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式。严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC 更为灵活，服务提供方和调用方，不存在代码级别的强依赖，这在强调快速演化的微服务环境下显得更加合适。</p><p>很明显，Spring Cloud 的功能比 Dubbo 更加强大，涵盖面更广，而且作为 Spring 的拳头项目，它也能够与 Spring Framework、Spring Boot、Spring Data、Spring Batch 等其他 Spring 项目完美融合，这些对于微服务而言是至关重要的。</p></li><li><p>微服务下电商项目模块设计</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E7%94%B5%E5%95%86%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="电商微服务"></p><ul><li>用户服务<ul><li>用户信息接口</li><li>登录接口</li></ul></li><li>商品服务<ul><li>商品列表</li><li>商品详情</li></ul></li><li>订单服务 <ul><li>我的订单</li><li>下单接口</li></ul></li></ul></li></ol><h2 id="4-SpringCloud核心组件注册中心"><a href="#4-SpringCloud核心组件注册中心" class="headerlink" title="4-SpringCloud核心组件注册中心"></a>4-SpringCloud核心组件注册中心</h2><h3 id="4-1-什么是微服务的注册中心？"><a href="#4-1-什么是微服务的注册中心？" class="headerlink" title="4.1-什么是微服务的注册中心？"></a>4.1-什么是微服务的注册中心？</h3><p>在微服务架构下，主要有三种角色：<strong>服务提供者（RPC Server）</strong>、<strong>服务消费者（RPC Client）</strong>和<strong>服务注册中心（Registry）</strong>，三者的交互关系如下面这张图：</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt="微服务注册中心"></p><p>RPC Server 提供服务，在启动时，根据服务发布文件 server.xml 中的配置的信息，向 Registry 注册自身服务，并向 Registry 定期发送心跳汇报存活状态。</p><p>RPC Client 调用服务，在启动时，根据服务引用文件 client.xml 中配置的信息，向 Registry 订阅服务，把 Registry 返回的服务节点列表缓存在本地内存中，并与 RPC Sever 建立连接。</p><p>当 RPC Server 节点发生变更时，Registry 会同步变更，RPC Client 感知后会刷新本地内存中缓存的服务节点列表。</p><p>RPC Client 从本地缓存的服务节点列表中，基于负载均衡算法选择一台 RPC Sever 发起调用。</p><p>注册中心可以说是微服务架构中的”通讯录“，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址，进行调用。</p><ul><li><p><strong>数据模型</strong></p><p>注册中心的核心数据是服务的名字和它对应的网络地址，当服务注册了多个实例时，我们需要对不健康的实例进行过滤或者针对实例的一些特征进行流量的分配，那么就需要在实例上存储一些例如健康状态、权重等属性。随着服务规模的扩大，渐渐的又需要在整个服务级别设定一些权限规则、以及对所有实例都生效的一些开关，于是在服务级别又会设立一些属性。再往后，我们又发现单个服务的实例又会有划分为多个子集的需求，例如一个服务是多机房部署的，那么可能需要对每个机房的实例做不同的配置，这样又需要在服务和实例之间再设定一个数据级别。</p></li><li><p><strong>数据一致性</strong></p><p>数据一致性是分布式系统永恒的话题，Paxos协议的艰深更让数据一致性成为程序员大牛们吹水的常见话题。不过从协议层面上看，一致性的选型已经很长时间没有新的成员加入了。目前来看基本可以归为两家：一种是基于Leader的非对等部署的单点写一致性，一种是对等部署的多写一致性。当我们选用服务注册中心的时候，并没有一种协议能够覆盖所有场景，例如当注册的服务节点不会定时发送心跳到注册中心时，强一致协议看起来是唯一的选择，因为无法通过心跳来进行数据的补偿注册，第一次注册就必须保证数据不会丢失。而当客户端会定时发送心跳来汇报健康状态时，第一次的注册的成功率并不是非常关键（当然也很关键，只是相对来说我们容忍数据的少量写失败），因为后续还可以通过心跳再把数据补偿上来，此时Paxos协议的单点瓶颈就会不太划算了，这也是Eureka为什么不采用Paxos协议而采用自定义的Renew机制的原因。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7.png" alt="数据一致性"></p></li><li><p><strong>负载均衡</strong></p><p>负载均衡严格的来说，并不算是传统注册中心的功能。一般来说服务发现的完整流程应该是先从注册中心获取到服务的实例列表，然后再根据自身的需求，来选择其中的部分实例或者按照一定的流量分配机制来访问不同的服务提供者，因此注册中心本身一般不限定服务消费者的访问策略。<code>Eureka</code>、<code>Zookeeper</code>包括<code>Consul</code>，本身都没有去实现可配置及可扩展的负载均衡机制，Eureka的负载均衡是由ribbon来完成的，而Consul则是由Fabio做负载均衡。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="客户端负载均衡"></p><p>服务端的负载均衡，给服务提供者更强的流量控制权，但是无法满足不同的消费者希望使用不同负载均衡策略的需求。而不同负载均衡策略的场景，确实是存在的。而客户端的负载均衡则提供了这种灵活性，并对用户扩展提供更加友好的支持。但是客户端负载均衡策略如果配置不当，可能会导致服务提供者出现热点，或者压根就拿不到任何服务提供者。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="服务端负载均衡"></p></li><li><p><strong>健康检查</strong></p><p>Zookeeper和Eureka都实现了一种TTL的机制，就是如果客户端在一定时间内没有向注册中心发送心跳，则会将这个客户端摘除。Eureka做的更好的一点在于它允许在注册服务的时候，自定义检查自身状态的健康检查方法。这在服务实例能够保持心跳上报的场景下，是一种比较好的体验，在Dubbo和SpringCloud这两大体系内，也被培养成用户心智上的默认行为。Nacos也支持这种TTL机制，不过这与ConfigServer在阿里巴巴内部的机制又有一些区别。Nacos目前支持临时实例使用心跳上报方式维持活性，发送心跳的周期默认是5秒，Nacos服务端会在15秒没收到心跳后将实例设置为不健康，在30秒没收到心跳时将这个临时实例摘除。</p><p>客户端健康检查和服务端健康检查有一些不同的关注点。客户端健康检查主要关注客户端上报心跳的方式、服务端摘除不健康客户端的机制。而服务端健康检查，则关注探测客户端的方式、灵敏度及设置客户端健康状态的机制。从实现复杂性来说，服务端探测肯定是要更加复杂的，因为需要服务端根据注册服务配置的健康检查方式，去执行相应的接口，判断相应的返回结果，并做好重试机制和线程池的管理。这与客户端探测，只需要等待心跳，然后刷新TTL是不一样的。同时服务端健康检查无法摘除不健康实例，这意味着只要注册过的服务实例，如果不调用接口主动注销，这些服务实例都需要去维持健康检查的探测任务，而客户端则可以随时摘除不健康实例，减轻服务端的压力。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/Nacos%E7%9A%84%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5.png" alt="Nacos的健康检查"></p></li><li><p>性能与容量</p><p>虽然大部分用户用到的性能不高，但是他们仍然希望选用的产品的性能越高越好。影响读写性能的因素很多：一致性协议、机器的配置、集群的规模、存量数据的规模、数据结构及读写逻辑的设计等等。在服务发现的场景中，我们认为读写性能都是非常关键的，但是并非性能越高就越好，因为追求性能往往需要其他方面做出牺牲。Zookeeper在写性能上似乎能达到上万的TPS，这得益于Zookeeper精巧的设计，不过这显然是因为有一系列的前提存在。首先Zookeeper的写逻辑就是进行K-V的写入，内部没有聚合；其次Zookeeper舍弃了服务发现的基本功能如健康检查、友好的查询接口，它在支持这些功能的时候，显然需要增加一些逻辑，甚至弃用现有的数据结构；最后，Paxos协议本身就限制了Zookeeper集群的规模，3、5个节点是不能应对大规模的服务订阅和查询的。</p></li><li><p>易用性</p><p>易用性也是用户比较关注的一块内容。产品虽然可以在功能特性或者性能上做到非常先进，但是如果用户的使用成本极高，也会让用户望而却步。易用性包括多方面的工作，例如API和客户端的接入是否简单，文档是否齐全易懂，控制台界面是否完善等。对于开源产品来说，还有一块是社区是否活跃。在比较Nacos、Eureka和Zookeeper在易用性上的表现时，我们诚邀社区的用户进行全方位的反馈，因为毕竟在阿里巴巴集团内部，我们对Eureka、Zookeeper的使用场景是有限的。从我们使用的经验和调研来看，Zookeeper的易用性是比较差的，Zookeeper的客户端使用比较复杂，没有针对服务发现的模型设计以及相应的API封装，需要依赖方自己处理。对多语言的支持也不太好，同时没有比较好用的控制台进行运维管理。</p></li><li><p>集群扩展性</p><p>集群扩展性和集群容量以及读写性能关系紧密。当使用一个比较小的集群规模就可以支撑远高于现有数量的服务注册及访问时，集群的扩展能力暂时就不会那么重要。从协议的层面上来说，Zookeeper使用的ZAB协议，由于是单点写，在集群扩展性上不具备优势。Eureka在协议上来说理论上可以扩展到很大规模，因为都是点对点的数据同步，但是从我们对Eureka的运维经验来看，Eureka集群在扩容之后，性能上有很大问题。</p></li></ul><p><strong>几大服务注册中心的对比：</strong></p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AF%B9%E6%AF%94.png" alt="注册中心对比"></p><h3 id="4-2-SpringCloud微服务核心组件Eureka"><a href="#4-2-SpringCloud微服务核心组件Eureka" class="headerlink" title="4.2-SpringCloud微服务核心组件Eureka"></a>4.2-SpringCloud微服务核心组件Eureka</h3><p>Eureka是Netflix开源的服务发现组件，本身是一个基于REST的服务，包含Server和Client两部分，并且服务端与客户端均采用java编写，所以Eureka主要适用于通过java实现的分布式系统，或是JVM兼容语言构建的系统，Spring Cloud将它集成在子项目Spring Cloud Netflix中。在微服务系统中，我们需要单独创建一个Eureka Server作为注册中心，其他的微服务就相当于客户端，注册到我们的注册中心中。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/Eureka.png" alt="Eureka"></p><pre class=" language-properties"><code class="language-properties">Register(服务注册)：把自己的IP和端口注册给Eureka。Renew(服务续约)：发送心跳包，每30秒发送一次。告诉Eureka自己还活着。Cancel(服务下线)：当provider关闭时会向Eureka发送消息，把自己从服务列表中删除。防止consumer调用到不存在的服务。<span class="token attr-name">Get</span> <span class="token attr-value">Registry(获取服务注册列表)：获取其他服务列表。</span>Replicate(集群中数据同步)：eureka集群中的数据复制与同步。<span class="token attr-name">Make</span> <span class="token attr-value">Remote Call(远程调用)：完成服务的远程调用。</span></code></pre><p><strong>流程：</strong></p><p>各个微服务启动时，会通过 Eureka Client 向 Eureka Server 注册自己，Eureka Server 会存储该服务的信息</p><p>也就是说，每个微服务的客户端和服务端，都会注册到 Eureka Server，这就衍生出了微服务相互识别的话题</p><ul><li><p>同步：每个 Eureka Server 同时也是 Eureka Client（逻辑上的）<br>　　　多个 Eureka Server 之间通过复制的方式完成服务注册表的同步，形成 Eureka 的高可用</p></li><li><p>识别：Eureka Client 会缓存 Eureka Server 中的信息<br>　　　即使所有 Eureka Server 节点都宕掉，服务消费者仍可使用缓存中的信息找到服务提供者<strong>（笔者已亲测）</strong></p></li><li><p>续约：微服务会周期性（默认30s）地向 Eureka Server 发送心跳以Renew（续约）信息（类似于heartbeat）</p></li><li><p>续期：Eureka Server 会定期（默认60s）执行一次失效服务检测功能<br>　　　它会检查超过一定时间（默认90s）没有Renew的微服务，发现则会注销该微服务节点</p></li><li><p><strong>Eureka服务端</strong></p><p>提供服务注册和发现的能力（通常就是微服务中的注册中心），各个节点启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在前端界面中直观的看到。</p><p>即服务注册中心。它同其他服务注册中心一样，支持高可用配置。依托于强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。</p><p>Eureka服务端支持集群模式部署，当集群中有分片发生故障的时候，Eureka会自动转入自我保护模式。它允许在分片发生故障的时候继续提供服务的发现和注册，当故障分配恢复时，集群中的其他分片会把他们的状态再次同步回来。集群中的的不同服务注册中心通过异步模式互相复制各自的状态，这也意味着在给定的时间点每个实例关于所有服务的状态可能存在不一致的现象。</p></li><li><p><strong>Eureka客户端</strong></p><p>一个Java客户端，用于简化与 Eureka Server 的交互，<strong>客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后</strong>，将会向Eureka Server发送心跳,<strong>默认周期为30秒</strong>，如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个<strong>服务节点移除(默认90秒)</strong>。。</p><p>Eureka客户端，主要处理服务的注册和发现。客户端服务通过注册和参数配置的方式，嵌入在客户端应用程序的代码中。在应用程序启动时，Eureka客户端向服务注册中心注册自身提供的服务，并周期性的发送心跳来更新它的服务租约。同时，他也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期行的刷新服务状态。</p></li><li><p><strong>心跳检测</strong></p><p>在应用启动后，客户端将会向Eureka Server发送心跳（默认为30秒，我们项目配置的是30秒）。Eureka Serber如果在多个心跳周期内没有收到某个微服务节点的心跳，将会剔除该节点（默认90秒，我们项目配置的是90秒）。</p></li><li><p><strong>集群数据同步</strong></p><p>Eureka Server之间通过复制的方式来进行数据同步。</p></li><li><p><strong>客户端缓存功能</strong></p><p>Eureka Client具有缓存功能，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务的API。</p></li><li><p><strong>清理失效节点</strong></p></li><li><p><strong>自我保护模式</strong></p><p>自我保护模式是指在网络出现异常的情况下，由于Eureka Server无法收到客户端的心跳续约，Eureka Server会判断该节点不可用，但其实该节点可能是正常的，可用的。为了避免误删，Eureka Server引入了自我保护模式。一旦Eureka Server发现当前收到的心跳总次数小于心跳阈值的85%（默认值），就会进入自我保护模式，此时Eureka Server不会清理任何节点。直到Eureka Server收到的心跳总次数大于等于心跳阈值的85%。</p><p>自我保护模式的设计哲学是：在不确定节点是否可用的情况下，尽可能保留节点。</p></li></ul><p><strong>Eureka工作流程：</strong></p><ol><li>Eureka Server 启动成功，等待服务端注册。在启动过程中如果配置了集群，集群之间定时通过 Replicate 同步注册表，每个 Eureka Server 都存在独立完整的服务注册表信息</li><li>Eureka Client 启动时根据配置的 Eureka Server 地址去注册中心注册服务</li><li>Eureka Client 会每 30s 向 Eureka Server 发送一次心跳请求，证明客户端服务正常</li><li>当 Eureka Server 90s 内没有收到 Eureka Client 的心跳，注册中心则认为该节点失效，会注销该实例</li><li>单位时间内 Eureka Server 统计到有大量的 Eureka Client 没有上送心跳，则认为可能为网络异常，进入自我保护机制，不再剔除没有上送心跳的客户端</li><li>当 Eureka Client 心跳请求恢复正常之后，Eureka Server 自动退出自我保护模式</li><li>Eureka Client 定时全量或者增量从注册中心获取服务注册表，并且将获取到的信息缓存到本地</li><li>服务调用时，Eureka Client 会先从本地缓存找寻调取的服务。如果获取不到，先从注册中心刷新注册表，再同步到本地缓存</li><li>Eureka Client 获取到目标服务器信息，发起服务调用</li><li>Eureka Client 程序关闭时向 Eureka Server 发送取消请求，Eureka Server 将实例从注册表中删除</li></ol><h3 id="4-3-Eureka-Server搭建实战"><a href="#4-3-Eureka-Server搭建实战" class="headerlink" title="4.3-Eureka Server搭建实战"></a>4.3-Eureka Server搭建实战</h3><ol><li><p>创建eureka-server工程</p></li><li><p>添加依赖</p><p><strong>父工程添加：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Greenwich.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>Eureka Server工程添加：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/    <span class="token comment" spellcheck="true">#声明自己是个服务端</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre></li><li><p>启动类配置：<br>启动Eureka Server注册中心，和普通的SpringBoot应用的启动没有太大的区别。只需要在启动类上增加<code>@EnableEurekaServe</code>r注解，来开启Eureka Server服务即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringcloudEurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>访问注册中心</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E8%AE%BF%E9%97%AE%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt="访问注册中心"></p></li></ol><h3 id="4-4-Eureka-Client搭建商品服务实战"><a href="#4-4-Eureka-Client搭建商品服务实战" class="headerlink" title="4.4-Eureka Client搭建商品服务实战"></a>4.4-Eureka Client搭建商品服务实战</h3><ol><li><p>创建实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//商品名称</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//商品价格</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//库存</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> store<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>创建Service</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Product <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Product<span class="token operator">></span> daoMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Product p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"iphonex"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"冰箱"</span><span class="token punctuation">,</span><span class="token number">5342</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"洗衣机"</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"电话"</span><span class="token punctuation">,</span><span class="token number">64345</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"汽车"</span><span class="token punctuation">,</span><span class="token number">2345</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product p6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"椅子"</span><span class="token punctuation">,</span><span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product p7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"java编程思想"</span><span class="token punctuation">,</span><span class="token number">2341</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p4<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p5<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p6<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>        daoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p7<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>Product<span class="token operator">></span> collection <span class="token operator">=</span> daoMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Product<span class="token operator">></span> productList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> productList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Product <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> daoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/product"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProductService productService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取所有商品列表     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> productService<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据id查找商品详情     * @param id     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"find"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> productService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//By having spring-cloud-starter-netflix-eureka-client on the classpath, your application automatically registers with the Eureka Server. Configuration is required to locate the Eureka server, as shown in the following example:</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProductServiceApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> product<span class="token punctuation">-</span>service<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8761/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 当其它服务获取地址时提供ip而不是hostname</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment" spellcheck="true"># 指定自己的ip信息，不指定的话会自己寻找</span></code></pre></li><li><p>访问注册中心可以看到我们的商品服务</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E6%B3%A8%E5%86%8C%E5%95%86%E5%93%81%E6%9C%8D%E5%8A%A1.png" alt="注册商品服务"></p><p>eureka管理后台出现一串红色字体：是警告，说明有服务上线率低</p><pre><code>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</code></pre><p>关闭检查方法：eureka服务端配置文件加入</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>注意：自我保护模式禁止关闭，默认是开启状态true</p></li></ol><h2 id="5-服务消费者Ribbon和Feign"><a href="#5-服务消费者Ribbon和Feign" class="headerlink" title="5-服务消费者Ribbon和Feign"></a>5-服务消费者Ribbon和Feign</h2><h3 id="5-1-常用的服务间调用方式"><a href="#5-1-常用的服务间调用方式" class="headerlink" title="5.1-常用的服务间调用方式"></a>5.1-常用的服务间调用方式</h3><ul><li><p><strong>RPC</strong></p><p>RPC 即远程过程调用（Remote Procedure Call Protocol，简称RPC），像调用本地服务(方法)一样调用服务器的服务(方法)。通常的实现有 XML-RPC , JSON-RPC , 通信方式基本相同, 所不同的只是传输数据的格式.</p><p>客户端和服务器之间建立TCP连接（长连接），可以一次建立一个，也可以多个调用复用一次链接。</p><p>RPC是分布式架构的核心，按响应方式分如下两种：</p><p>同步调用：客户端调用服务方方法，等待直到服务方返回结果或者超时，再继续自己的操作</p><p>异步调用：客户端把消息发送给中间件，不再等待服务端返回，直接继续自己的操作。</p><p>同步调用的实现方式有WebService和RMI。Web Service提供的服务是基于web容器的，底层使用http协议，因而适合不同语言异构系统间的调用。RMI实际上是Java语言的RPC实现，允许方法返回 Java 对象以及基本数据类型，适合用于JAVA语言构建的不同系统间的调用。</p><p>异步调用的JAVA实现版就是JMS(Java Message Service)，目前开源的的JMS中间件有Apache社区的ActiveMQ、Kafka消息中间件，另外有阿里的RocketMQ。</p><p><strong>RPC架构里包含如下4个组件:</strong></p><ol><li>客户端(Client)：服务调用方</li><li>客户端存根(Client Stub)：存放服务端地址信息，将客户端的请求参数打包成网络消息，再通过网络发送给服务方</li><li>服务端存根(Server Stub)：接受客户端发送过来的消息并解包，再调用本地服务</li><li>服务端(Server)：真正的服务提供者。 </li></ol></li></ul><p>  RPC主要是用在大型企业里面，因为大型企业里面系统繁多，业务线复杂，而且效率优势非常重要的一块，这个时候RPC的优势就比较明显了。实际的开发当中是这么做的，项目一般使用maven来管理。比如我们有一个处理订单的系统服务，先声明它的所有的接口（这里就是具体指Java中的<code>interface</code>），然后将整个项目打包为一个<code>jar</code>包，服务端这边引入这个二方库，然后实现相应的功能，客户端这边也只需要引入这个二方库即可调用了。为什么这么做？主要是为了减少客户端这边的<code>jar</code>包大小，RPC数据包较小，因为每一次打包发布的时候，<code>jar</code>包太多总是会影响效率。另外也是将客户端和服务端解耦，提高代码的可移植性。</p><p>  <strong>同步调用与异步调用</strong>:</p><ol><li>同步调用就是客户端等待调用执行完成并返回结果。</li><li>异步调用就是客户端不等待调用执行完成返回结果，不过依然可以通过回调函数等接收到返回结果的通知。如果客户端并不关心结果，则可以变成一个单向的调用。这个过程有点类似于Java中的callable和runnable接口，我们进行异步执行的时候，如果需要知道执行的结果，就可以使用callable接口，并且可以通过Future类获取到异步执行的结果信息。如果不关心执行的结果，直接使用runnable接口就可以了，因为它不返回结果，当然callable也是可以的，我们不去获取Future就可以了。</li></ol><p>  <strong>流行的RPC框架</strong>：<br>  目前流行的开源RPC框架还是比较多的。下面重点介绍三种：</p><ul><li>gRPC是Google的开源软件，基于最新的HTTP2.0协议，并支持常见的众多编程语言。 我们知道HTTP2.0是基于二进制的HTTP协议升级版本，目前各大浏览器都在快马加鞭的加以支持。 这个RPC框架是基于HTTP协议实现的，底层使用到了Netty框架的支持。</li><li>Thrift是Facebook的一个开源项目，主要是一个跨语言的服务开发框架。它有一个代码生成器来对它所定义的IDL定义文件自动生成服务代码框架。用户只要在其之前进行二次开发就行，对于底层的RPC通讯等都是透明的。不过这个对于用户来说的话需要学习特定领域语言这个特性，还是有一定成本的。</li><li>Dubbo是阿里集团开源的一个极为出名的RPC框架，在很多互联网公司和企业应用中广泛使用。协议和序列化框架都可以插拔是及其鲜明的特色。同样 的远程接口是基于Java Interface，并且依托于spring框架方便开发。可以方便的打包成单一文件，独立进程运行，和现在的微服务概念一致。</li></ul><p>  <strong>RPC框架要做到的最基本的三件事：</strong></p><p>  1、服务端如何确定客户端要调用的函数；</p><p>  在远程调用中，客户端和服务端分别维护一个【ID-&gt;函数】的对应表， ID在所有进程中都是唯一确定的。客户端在做远程过程调用时，附上这个ID，服务端通过查表，来确定客户端需要调用的函数，然后执行相应函数的代码。</p><p>  2、如何进行序列化和反序列化；</p><p>  客户端和服务端交互时将参数或结果转化为字节流在网络中传输，那么数据转化为字节流的或者将字节流转换成能读取的固定格式时就需要进行序列化和反序列化，序列化和反序列化的速度也会影响远程调用的效率。</p><p>  3、如何进行网络传输（选择何种网络协议）；</p><p>  多数RPC框架选择TCP作为传输协议，也有部分选择HTTP。如gRPC使用HTTP2。不同的协议各有利弊。TCP更加高效，而HTTP在实际应用中更加的灵活。</p><ul><li><p><strong>REST</strong></p><p>REST即表述性状态传递（Representational State Transfer，简称REST），是一种软件架构风格。REST通过HTTP协议定义的通用动词方法(GET、PUT、DELETE、POST) ，以URI对网络资源进行唯一标识，响应端根据请求端的不同需求，通过无状态通信，对其请求的资源进行表述。</p><p><strong>Rest架构的主要原则：</strong></p><ol><li><p>网络上的所有事物都被抽象为资源</p></li><li><p>每个资源都有一个唯一的资源标识符</p></li><li><p>同一个资源具有多种表现形式(xml,json等)</p></li><li><p>对资源的各种操作不会改变资源标识符</p></li><li><p>所有的操作都是无状态的</p></li></ol><p>其中表述性状态，是指(在某个瞬间状态的)资源数据的快照，包括资源数据的内容、表述格式(XML、JSON)等信息。</p><p>其中无状态通信，是指服务端(响应端)不保存任何与特定HTTP请求相关的资源，应用状态必须由请求方在请求过程中提供。要求在网络通信过程中，任意一个Web请求必须与其他请求隔离，当请求端提出请求时，请求本身包含了响应端为响应这一请求所需的全部信息。</p><p>REST使用HTTP+URI+XML /JSON 的技术来实现其API要求的架构风格：HTTP协议和URI用于统一接口和定位资源，文本、二进制流、XML、JSON等格式用来作为资源的表述。</p><p><code>满足REST约束条件和原则的架构，就被称为是RESTful架构。就像URL都是URI(统一资源标识)的表现形式一样，RESTful是符合REST原则的表现形式。</code></p></li><li><p><strong>RPC和REST比较</strong></p><ol><li><p>RPC优缺点</p><ul><li><p>原理：socket+动态代理</p></li><li><p>优点：</p><ol><li><p>调用简单，清晰，透明，不用像 rest 一样复杂，就像调用本地方法一样简单</p></li><li><p>高效低延迟，性能高</p></li><li><p>自定义协议（让传输报文提及更小），数据包较小</p></li><li><p>性能消耗低，高效的序列化协议可以支持高效的二进制传输</p></li><li><p>自带负载均衡</p></li></ol></li><li><p>缺点：</p><ol><li><p>耦合性强</p><p>他人总结：</p><pre><code>我们为每个微服务定义了各自的 service 抽象接口，并通过持续集成发布到私有仓库中，调用方应用对微服务提供的抽象接口存在强依赖关系，因此不论开发、测试、集成环境都需要严格的管理版本依赖，才不会出现服务方与调用方的不一致导致应用无法编译成功等一系列问题，以及这也会直接影响本地开发的环境要求，往往一个依赖很多服务的上层应用，每天都要更新很多代码并 install 之后才能进行后续的开发。若没有严格的版本管理制度或开发一些自动化工具，这样的依赖关系会成为开发团队的一大噩梦。而 REST 接口相比 RPC 更为轻量化，服务提供方和调用方的依赖只是依靠一纸契约，不存在代码级别的强依赖，当然 REST 接口也有痛点，因为接口定义过轻，很容易导致定义文档与实际实现不一致导致服务集成时的问题，但是该问题很好解决，只需要通过每个服务整合swagger，让每个服务的代码与文档一体化，就能解决。所以在分布式环境下，REST 方式的服务依赖要比 RPC 方式的依赖更为灵活。</code></pre></li><li><p>无法跨语言，平台敏感</p><p>Java 写的 RPC 微服务无法给 Python 调用，需要再实现一层 REST 来对外提供服务。</p></li></ol></li></ul></li><li><p>REST</p><ul><li>原理：HTTP调用</li><li>优点：<ol><li>耦合性低，兼容性好，提高开发效率</li><li>不用关心接口实现细节，相对更规范，更标准，更通用，跨语言支持</li></ol></li><li>缺点：<ol><li>性能不如 RPC 高</li><li>HTTP数据包较大</li></ol></li></ul></li></ol></li><li><p><strong>应用场景选择</strong></p><p>RPC 适用于内网服务调用，对外提供服务请走 REST。</p><p>IO 密集的服务调用用 RPC，低频服务用 REST。</p><p>服务调用过于密集与复杂，RPC 就比较适用。</p><p><strong>REST和RPC都常用于微服务架构中。</strong></p><ol><li>HTTP相对更规范，更标准，更通用，无论哪种语言都支持http协议。如果你是对外开放API，例如开放平台，外部的编程语言多种多样，你无法拒绝对每种语言的支持，现在开源中间件，基本最先支持的几个协议都包含RESTful。</li><li>RPC 框架作为架构微服务化的基础组件，它能大大降低架构微服务化的成本，提高调用方与服务提供方的研发效率，屏蔽跨进程调用函数（服务）的各类复杂细节。让调用方感觉就像调用本地函数一样调用远端函数、让服务提供方感觉就像实现一个本地函数一样来实现服务。</li></ol></li></ul><h3 id="5-2-Ribbon"><a href="#5-2-Ribbon" class="headerlink" title="5.2-Ribbon"></a>5.2-Ribbon</h3><ol><li><p>什么是负载均衡？</p><p>负载均衡是微服务架构中必须使用的技术，通过负载均衡来实现系统的高可用、集群扩容等功能。负载均衡可通过硬件设备及软件来实现，硬件比如：F5、Array等，软件比如：LVS、Nginx等。</p><p><img src="/2020/01/17/springcloud-xue-xi-bi-ji-yi/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="微服务负载均衡"></p><p>用户请求先到达负载均衡器（也相当于一个服务），负载均衡器根据负载均衡算法将请求转发到微服务。负载均衡算法有：轮训、随机、加权轮训、加权随机、地址哈希等方法，负载均衡器维护一份服务列表，根据负载均衡算法将请求转发到相应的微服务上，所以负载均衡可以为微服务集群分担请求，降低系统的压力。</p></li><li><p>什么是客户端负载均衡？</p><p>上图是服务端负载均衡，客户端负载均衡与服务端负载均衡的区别在于客户端要维护一份服务列表，Ribbon从Eureka Server获取服务列表，Ribbon根据负载均衡算法直接请求到具体的微服务，然后进行访问，这是客户端负载均衡。</p><p>当我们将Ribbon和Eureka一起使用时，Ribbon会从Eureka注册中心去获取服务端列表，然后进行轮询访问以到达负载均衡的作用，客户端负载均衡中也需要心跳机制去维护服务端清单的有效性，当然这个过程需要配合服务注册中心一起完成。</p></li><li><p>什么是服务端负载均衡？</p><p>负载均衡是我们处理高并发、缓解网络压力和进行服务端扩容的重要手段之一，但是一般情况下我们所说的负载均衡通常都是指服务端负载均衡，服务端负载均衡又分为两种，一种是硬件负载均衡，还有一种是软件负载均衡。</p><ul><li><p>硬件负载均衡主要通过在服务器节点之间安装专门用于负载均衡的设备，常见的如F5。</p></li><li><p>软件负载均衡则主要是在服务器上安装一些具有负载均衡功能的软件来完成请求分发进而实现负载均衡，常见的就是Nginx。</p><p>无论是硬件负载均衡还是软件负载均衡都会维护一个可用的服务端清单，然后通过心跳机制来删除故障的服务端节点以保证清单中都是可以正常访问的服务端节点，此时当客户端的请求到达负载均衡服务器时，负载均衡服务器按照某种配置好的规则从可用服务端清单中选出一台服务器去处理客户端的请求。这就是服务端负载均衡。</p></li></ul></li><li><p>Ribbon是什么？</p><p>Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随即连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。</p><p>Load Balance负载均衡是用于解决一台机器(一个进程)无法解决所有请求而产生的一种算法。像nginx可以使用负载均衡分配流量，ribbon为客户端提供负载均衡，dubbo服务调用里的负载均衡等等，很多地方都使用到了负载均衡。</p><p><strong>使用负载均衡带来的好处很明显(系统高可用、网络压力缓解、处理能力扩容)：</strong></p><p>当集群里的1台或者多台服务器down的时候，剩余的没有down的服务器可以保证服务的继续使用<br>使用了更多的机器保证了机器的良性使用，不会由于某一高峰时刻导致系统cpu急剧上升<br><strong>负载均衡有好几种实现策略，常见的有：</strong></p><ul><li>随机 (Random)</li><li>轮询 (RoundRobin)</li><li>一致性哈希 (ConsistentHash)</li><li>哈希 (Hash)</li><li>加权（Weighted）(默认会启动一个每隔30秒的定时任务来为每个服务实例计算权重.)</li></ul><p>服务发现的任务由Eureka完成，而服务消费的任务由Ribbon完成,它是一个基于Http和TCP的客户端负载均衡器，可以通过在客户端中配置的ribbonServerList服务端列表去轮询访问以达到均衡负载的作用(对于服务提供方，同一服务的实例通常会有多个来保证服务的高可用性).</p></li><li><p>Ribbon实战</p><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在application.yml中添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true">#最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试</span>  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">3 </span><span class="token comment" spellcheck="true">#切换实例的重试次数</span>  <span class="token key atrule">OkToRetryOnAllOperations</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000  </span><span class="token comment" spellcheck="true">#请求连接的超时时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">6000 </span><span class="token comment" spellcheck="true">#请求处理的超时时间</span></code></pre></li><li><p>在订单服务启动类中添加如下代码：</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>修改调用方式，不再手动获取ip和端口，而是直接通过服务名称调用：</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ProductOrder <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://product-service/api/v1/product/find?id="</span><span class="token operator">+</span>productId<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        ProductOrder productOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productOrder<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        productOrder<span class="token punctuation">.</span><span class="token function">setTradeNo</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> productOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>控制台输出如下：</p><pre><code>2020-01-18 22:32:24.792  INFO 28215 --- [nio-8081-exec-1] c.n.l.DynamicServerListLoadBalancer      : DynamicServerListLoadBalancer for client product-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=product-service,current list of Servers=[127.0.0.1:8082],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;    Instance count:1;    Active connections count: 0;    Circuit breaker tripped count: 0;    Active connections per server: 0.0;]},Server stats: [[Server:127.0.0.1:8082;    Zone:defaultZone;    Total Requests:0;    Successive connection failure:0;    Total blackout seconds:0;    Last connection made:Thu Jan 01 08:00:00 CST 1970;    First connection made: Thu Jan 01 08:00:00 CST 1970;    Active Connections:0;    total failure count in last (1000) msecs:0;    average resp time:0.0;    90 percentile resp time:0.0;    95 percentile resp time:0.0;    min resp time:0.0;    max resp time:0.0;    stddev resp time:0.0]]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@56d1dd2a{id=6, name=椅子, price=253, store=20}</code></pre><p><code>将商品服务多节点启动，会看到订单服务会通过Ribbon的负载均衡来调用商品服务。</code></p></li></ol></li><li><p>Ribbon修改负载均衡策略</p><p>在application.yml配置文件中加入：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#自定义负载均衡策略</span>    <span class="token key atrule">product-service</span><span class="token punctuation">:</span>      <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>        <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule</code></pre><p><strong>策略选择：</strong></p><ol><li>如果每个机器配置一样，则建议不修改策略 (推荐)</li><li>如果部分机器配置强，则可以改为 WeightedResponseTimeRule</li></ol></li></ol><h3 id="5-3-微服务调用方式之Feign"><a href="#5-3-微服务调用方式之Feign" class="headerlink" title="5.3-微服务调用方式之Feign"></a>5.3-微服务调用方式之Feign</h3><ol><li><p>Feign是什么？</p><p><strong>Feign是Netflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</strong></p><p>Feign是一个声明式WebService客户端，使用Feign能让编写WebService客户端更加简单，它的使用方法是定义一个接口，然后在上面添加注解,同时也支持JAX-RS标准的注解。Feign也支持可拔插式的编码器和解码器，Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters.Feign可以与Eureka和Ribbon组合使用以支持负载均衡。</p><p><strong>只需要你创建一个接口，然后在上面添加注解即可。</strong></p><p>Feign 是一种声明式、模板化的 HTTP 客户端。在 Spring Cloud 中使用 Feign，可以做到使用 HTTP 请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问 HTTP 请求。接下来介绍一下 Feign 的特性，具体如下：</p><ul><li>可插拔的注解支持，包括 Feign 注解和AX-RS注解。</li><li>支持可插拔的 HTTP 编码器和解码器。</li><li>支持 Hystrix 和它的 Fallback。</li><li>支持 Ribbon 的负载均衡。</li><li>支持 HTTP 请求和响应的压缩。Feign 是一个声明式的 WebService 客户端，它的目的就是让 Web Service 调用更加简单。它整合了 Ribbon 和 Hystrix，从而不需要开发者针对 Feign 对其进行整合。Feign 还提供了 HTTP 请求的模板，通过编写简单的接口和注解，就可以定义好 HTTP 请求的参数、格式、地址等信息。Feign 会完全代理 HTTP 的请求，在使用过程中我们只需要依赖注入 Bean，然后调用对应的方法传递参数即可。</li></ul></li><li><p>Feign能干什么？</p><p>Feign旨在使编写Java Htpp客户端变得更容易。</p><p>使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理,形成了一套模板化的调用方法.但是在实际开发中,由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用,所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用.所以，Feign在此基础上做了进一步封装,由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它(以前是Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可),即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p></li><li><p>添加Feign依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span># 注意：新旧版本依赖名称不同</code></pre></li><li><p>添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#feign的配置，连接超时及读取超时配置</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> basic</code></pre></li><li><p>启动类增加注解<code>@EnableFeignClients</code>（开启 Feign 扫描支持）</p></li><li><p>Feign接口编写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"product-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"api/v1//product/find"</span><span class="token punctuation">)</span>    String <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>Controller</p><pre class=" language-java"><code class="language-java">RestController<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ProductFeignClient productFeignClient<span class="token punctuation">;</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>"api<span class="token operator">/</span>v1<span class="token comment" spellcheck="true">//product)</span>    String <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> productFeignClient<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Feign工作原理</p><ul><li>在开发微服务应用时，我们会在主程序入口添加 @EnableFeignClients 注解开启对 Feign Client 扫描加载处理。根据 Feign Client 的开发规范，定义接口并加 @FeignClients 注解。</li><li>当程序启动时，会进行包扫描，扫描所有 @FeignClients 的注解的类，并将这些信息注入 Spring IOC 容器中。当定义的 Feign 接口中的方法被调用时，通过JDK的代理的方式，来生成具体的 RequestTemplate。当生成代理时，Feign 会为每个接口方法创建一个 RequetTemplate 对象，该对象封装了 HTTP 请求需要的全部信息，如请求参数名、请求方法等信息都是在这个过程中确定的。</li><li>然后由 RequestTemplate 生成 Request，然后把 Request 交给 Client 去处理，这里指的 Client 可以是 JDK 原生的 URLConnection、Apache 的 Http Client 也可以是 Okhttp。最后 Client 被封装到 LoadBalanceclient 类，这个类结合 Ribbon 负载均衡发起服务之间的调用。</li></ul></li><li><p>@FeignClient 注解</p><ul><li>name：指定 Feign Client 的名称，如果项目使用了 Ribbon，name 属性会作为微服务的名称，用于服务发现。</li><li>url：url 一般用于调试，可以手动指定 @FeignClient 调用的地址。</li><li>decode404：当发生404错误时，如果该字段为 true，会调用 decoder 进行解码，否则抛出 FeignException。</li><li>configuration：Feign 配置类，可以自定义 Feign 的 Encoder、Decoder、LogLevel、Contract。</li><li>fallback：定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback 指定的类必须实现 @FeignClient 标记的接口。</li><li>fallbackFactory：工厂类，用于生成 fallback 类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码。</li><li>path：定义当前 FeignClient 的统一前缀。</li></ul></li><li><p>超时时间配置</p><p>如果在一个微服务当中对同一个接口同时配置了Hystrix与ribbon两个超时时间，则在接口调用的时候，两个计时器会同时读秒。</p><p>比如，访问一个接口需要2秒，你的ribbon配置的超时时间是3秒，Hystrix配置的超时时间是1秒。</p><p>在这种情况下，程序会回调进入到Hystrix的fallback方法，因为在访问接口的时候，Hystrix与ribbon的两个计时器同时计时，而在Hystrix计时器结束的时候自动停止了访问进行回调，进入fallback方法。</p><p><strong>如果没有配置Hystrix的话，访问一个接口需要2秒，你的ribbon配置的超时时间是3秒，Hystrix配置的超时时间是1秒，不会有异常。</strong></p><p>在这个地方建议配置Hystrix的超时时间要大于ribbon的超时时间，否则会在接口调用还未完成的时候直接进入回调方法。</p><p><strong>Hystrix与ribbon的默认请求超时时间都是1秒</strong></p><p>配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8200</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> testFeign<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8100/eureka/    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">###设置feign客户端超时时间</span><span class="token comment" spellcheck="true">###SpringCloud feign 默认开启支持ribbon</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">###指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间。</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment" spellcheck="true">###指的是建立连接后从服务器读取到可用资源所用的时间。</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment" spellcheck="true">###配置请求超时时间</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">7000</span><span class="token comment" spellcheck="true">###配置具体方法超时时间    </span>    <span class="token key atrule">serverMethod</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span><span class="token comment" spellcheck="true">###开启Hystrix断路器</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>一般情况下 都是 <code>ribbon 的超时时间（&lt;）hystrix的超时时间</code>（因为涉及到ribbon的重试机制） 因为ribbon的重试机制和Feign的重试机制有冲突，所以源码中默认关闭Feign的重试机制。</p></li><li><p><strong>Feign和Ribbon的区别：</strong></p><ul><li>启动类使用的注解不同，Ribbon用的是@RibbonClient，Feign用的是@EnableFeignClients。</li><li>服务的指定位置不同，Ribbon是在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明。</li><li>调用方式不同，<strong>Ribbon</strong>需要自己构建http请求，是一个基于 HTTP 和 TCP 客户端 的负载均衡的工具。它可以在客户端配置 <code>RibbonServerList</code>（服务端列表），使用 HttpClient 或 RestTemplate http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。<strong>Feign</strong>则是在Ribbon的基础上进行了一次改进，采用接口的方式，将需要调用的其他服务的方法定义成抽象方法即可，不需要自己构建http请求。然后就像是调用自身工程的方法调用，而感觉不到是调用远程方法，使得编写 客户端变得非常容易。要注意的是抽象方法的注解、方法签名要和提供服务的方法完全一致。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构基础</title>
      <link href="/2020/01/16/wei-fu-wu-jia-gou-ji-chu/"/>
      <url>/2020/01/16/wei-fu-wu-jia-gou-ji-chu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记3</title>
      <link href="/2020/01/16/springboot-xue-xi-bi-ji-san/"/>
      <url>/2020/01/16/springboot-xue-xi-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<h1 id="8-SpringBoot整合Redis"><a href="#8-SpringBoot整合Redis" class="headerlink" title="8-SpringBoot整合Redis"></a>8-SpringBoot整合Redis</h1><h2 id="8-1-分布式缓存Redis介绍"><a href="#8-1-分布式缓存Redis介绍" class="headerlink" title="8.1-分布式缓存Redis介绍"></a>8.1-分布式缓存Redis介绍</h2><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p><ol><li><p>redis官网 <a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p></li><li><p>新手入门redis在线测试工具：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></p></li></ol><h2 id="8-2-源码编译安装Redis4-x"><a href="#8-2-源码编译安装Redis4-x" class="headerlink" title="8.2-源码编译安装Redis4.x"></a>8.2-源码编译安装Redis4.x</h2><ol><li><p>快速安装  <a href="https://redis.io/download#installation" target="_blank" rel="noopener">https://redis.io/download#installation</a><br>wget <a href="http://download.redis.io/releases/redis-4.0.9.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.9.tar.gz</a></p><pre><code>       tar xzf redis-4.0.9.tar.gz       cd redis-4.0.9       make</code></pre><p>启动服务端：src/redis-server<br>启动客户端：src/redis-cli</p></li><li><p>默认是本地访问的，需要开放外网访问<br>1）打开redis.conf文件在NETWORK部分修改</p><pre><code>      注释掉bind 127.0.0.1可以使所有的ip访问redis      修改 protected-mode，值改为no</code></pre></li></ol><h2 id="8-3-SpringBoot整合redis实战"><a href="#8-3-SpringBoot整合redis实战" class="headerlink" title="8.3-SpringBoot整合redis实战"></a>8.3-SpringBoot整合redis实战</h2><ol><li><p>官网：<a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-redis" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-redis</a><br>集群文档：<a href="https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#cluster" target="_blank" rel="noopener">https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#cluster</a></p></li><li><p>springboot整合redis相关依赖引入</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>相关配置文件配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#=========redis基础配置=========</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true"># 连接超时时间 单位 ms（毫秒）</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">3000</span><span class="token comment" spellcheck="true">#=========redis线程池设置=========</span><span class="token comment" spellcheck="true"># 连接池中的最大空闲连接，默认值也是8。</span><span class="token attr-name">spring.redis.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span class="token comment" spellcheck="true">#连接池中的最小空闲连接，默认值也是0。</span><span class="token attr-name">spring.redis.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span class="token comment" spellcheck="true"># 如果赋值为-1，则表示不限制；pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。</span><span class="token attr-name">spring.redis.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment" spellcheck="true"># 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时</span><span class="token attr-name">spring.redis.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">1000</span></code></pre></li><li><p>常见redistemplate种类讲解和缓存实操(使用自动注入)</p><ul><li><p>注入模板</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> StirngRedisTemplate strTplRedis</code></pre></li><li><p>类型String,List,Hash,Set,ZSet<br>对应的方法分别是opsForValue()、opsForList()、opsForHash()、opsForSet()、opsForZSet()</p></li></ul></li></ol><h2 id="8-5-Redis配置类和工具类"><a href="#8-5-Redis配置类和工具类" class="headerlink" title="8.5-Redis配置类和工具类"></a>8.5-Redis配置类和工具类</h2><ol><li><p>RedisTemplate的自动配置（源代码如下）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>    proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RedisOperations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RedisProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>LettuceConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JedisConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RedisAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"redisTemplate"</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过源码可以看出，SpringBoot自动帮我们在容器中生成了一个<code>RedisTemplate</code>和一个<code>StringRedisTemplate</code>。但是，这个RedisTemplate的泛型是&lt;Object,Object&gt;，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为&lt;String,Object&gt;形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。</p><pre><code>    看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，配置RedisTemplate。</code></pre></li><li><p>重新写一个Redis配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Redis配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>封装Redis工具类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// =============================common============================</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * å     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="9-SpringBoot整合定时任务和异步任务"><a href="#9-SpringBoot整合定时任务和异步任务" class="headerlink" title="9-SpringBoot整合定时任务和异步任务"></a>9-SpringBoot整合定时任务和异步任务</h1><h2 id="9-1-SpringBoot定时任务schedule"><a href="#9-1-SpringBoot定时任务schedule" class="headerlink" title="9.1-SpringBoot定时任务schedule"></a>9.1-SpringBoot定时任务schedule</h2><ol><li><p>常见定时任务</p><ul><li><p>Java自带的java.util.Timer类</p><p>timer:配置比较麻烦，时间延后问题<br>timertask:不推荐</p></li><li><p>Quartz框架</p><p>配置更简单<br>xml或者注解</p></li><li><p>SpringBoot使用注解方式开启定时任务</p><ul><li>启动类里面 @EnableScheduling开启定时任务，自动扫描</li><li>定时任务业务类 加注解 @Component被容器扫描</li><li>定时执行的方法加上注解 @Scheduled(fixedRate=2000) 定期执行一次</li></ul></li></ul></li><li><p>定时任务schedule</p><p>SpringBoot内置了定时任务Scheduled，能够很好的实现定时任务。</p><ul><li>在SpringBoot应用添加<code>@EnableScheduling</code>注解启动定时任务</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootTestApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootTestApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>添加测试定时任务的代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"5 0 0 * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时任务1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span>  <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>fixedDelay <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2执行时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时任务2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2结束时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span>  <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3执行时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时任务3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3结束时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong></p><ul><li>corn表达式在linux使用广泛，具体可以参考<a href="https://www.cnblogs.com/javahr/p/8318728.html" target="_blank" rel="noopener">cron表达式详解</a>以及在线<a href="https://tool.lu/crontab/" target="_blank" rel="noopener">Cron表达式生成器</a></li><li>initialDelay：启动后多久开始执行，单位时毫秒</li><li>fixedRate：下次执行时间，任务开始运行的时候就计时</li><li>fixedDelay：下次执行时间，fixedDelay等任务进行完了才开始计时，上一次执行结束时间点后xx秒再次执行</li><li>fixedDelayString:  字符串形式，可以通过配置文件指定</li></ul></li></ol><h2 id="9-2-SpringBoot异步任务"><a href="#9-2-SpringBoot异步任务" class="headerlink" title="9.2-SpringBoot异步任务"></a>9.2-SpringBoot异步任务</h2><ol><li><p>启动类里面使用@EnableAsync注解开启功能，自动扫描</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>定义异步任务类并使用@Component标记组件被容器扫描,异步方法加上@Async<br>注意点：</p><pre><code>           1）要把异步任务封装到类里面，不能直接写到Controller           2）增加Future&lt;String&gt; 返回结果 AsyncResult&lt;String&gt;(&quot;task执行完成&quot;);             3）如果需要拿到结果 需要判断全部的 task.isDone()</code></pre><p><code>@EnableAsync</code> 表示支持异步任务，springboot对于异步，定时，缓存，切面等的配置都是通过在启动类上加 @EnableXXX来配置的。</p><p><code>@Async</code>表示该方法会异步执行，也就是说主线程会直接跳过该方法，而是使用线程池中的线程来执行该方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">execTaskA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskA开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskA结束，耗时毫秒数："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> star<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"TaskA结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">execTaskB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskB开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskB结束，耗时毫秒数："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> star<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"TaskB结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">execTaskC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskC开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskC结束，耗时毫秒数："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> star<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"TaskC结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>通过注入方式，注入到controller里面，如果测试前后区别则改为同步则把Async注释掉</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AsyncTask asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testTask"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务开始，当前时间"</span> <span class="token operator">+</span>star <span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> taskA <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">execTaskA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> taskB <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">execTaskB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> taskC <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">execTaskC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//间隔一秒轮询 直到 A B C 全部完成</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>taskA<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> taskB<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> taskC<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务结束，当前时间"</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总耗时："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="9-3-SpringBootz整合Quartz"><a href="#9-3-SpringBootz整合Quartz" class="headerlink" title="9.3-SpringBootz整合Quartz"></a>9.3-SpringBootz整合Quartz</h2><p>Quartz是一款功能强大的任务调度器，可以实现较为复杂的调度功能，如每月一号执行、每天凌晨执行、每周五执行等等，还支持分布式调度。本文使用Springboot+Mybatis+Quartz实现对定时任务的增、删、改、查、启用、停用等功能。并把定时任务持久化到数据库以及支持集群。</p><h3 id="Quartz的3个基本要素"><a href="#Quartz的3个基本要素" class="headerlink" title="Quartz的3个基本要素"></a>Quartz的3个基本要素</h3><ul><li>Scheduler：调度器。所有的调度都是由它控制。</li><li>Trigger： 触发器。决定什么时候来执行任务。</li><li>JobDetail &amp; Job： JobDetail定义的是任务数据，而真正的执行逻辑是在Job中。使用JobDetail + Job而不是Job，这是因为任务是有可能并发执行，如果Scheduler直接使用Job，就会存在对同一个Job实例并发访问的问题。而JobDetail &amp; Job 方式，sheduler每次执行，都会根据JobDetail创建一个新的Job实例，这样就可以规避并发访问的问题。</li></ul><ol><li><p>引入依赖jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--QuartZ--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol><ol start="2"><li><p>添加配置application-quartz.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#配置数据源</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/testquartz<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> password  <span class="token key atrule">quartz</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#持久化到数据库方式</span>    <span class="token key atrule">job-store-type</span><span class="token punctuation">:</span> jdbc    <span class="token key atrule">initialize-schema</span><span class="token punctuation">:</span> embedded    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">org</span><span class="token punctuation">:</span>        <span class="token key atrule">quartz</span><span class="token punctuation">:</span>          <span class="token key atrule">scheduler</span><span class="token punctuation">:</span>            <span class="token key atrule">instanceName</span><span class="token punctuation">:</span> MyScheduler            <span class="token key atrule">instanceId</span><span class="token punctuation">:</span> AUTO          <span class="token key atrule">jobStore</span><span class="token punctuation">:</span>            <span class="token key atrule">class</span><span class="token punctuation">:</span> org.quartz.impl.jdbcjobstore.JobStoreTX            <span class="token key atrule">driverDelegateClass</span><span class="token punctuation">:</span> org.quartz.impl.jdbcjobstore.StdJDBCDelegate            <span class="token key atrule">tablePrefix</span><span class="token punctuation">:</span> QRTZ_            <span class="token key atrule">isClustered</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">clusterCheckinInterval</span><span class="token punctuation">:</span> <span class="token number">10000</span>            <span class="token key atrule">useProperties</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">threadPool</span><span class="token punctuation">:</span>            <span class="token key atrule">class</span><span class="token punctuation">:</span> org.quartz.simpl.SimpleThreadPool            <span class="token key atrule">threadCount</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">threadPriority</span><span class="token punctuation">:</span> <span class="token number">5</span>            <span class="token key atrule">threadsInheritContextClassLoaderOfInitializingThread</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>实现<code>Job</code>接口并且在<code>execute</code>方法中实现自己的业务逻辑</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    HelloworldService helloworldService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>        helloworldService<span class="token punctuation">.</span><span class="token function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world! :"</span> <span class="token operator">+</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JobDetail <span class="token function">myJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        JobDetail jobDetail <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>HiJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myJob1"</span><span class="token punctuation">,</span><span class="token string">"myJobGroup1"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//JobDataMap可以给任务execute传递参数</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"job_param"</span><span class="token punctuation">,</span><span class="token string">"job_param1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jobDetail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Trigger <span class="token function">myTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Trigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">myJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myTrigger1"</span><span class="token punctuation">,</span><span class="token string">"myTriggerGroup1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"job_trigger_param"</span><span class="token punctuation">,</span><span class="token string">"job_trigger_param1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//.withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(5).repeatForever())</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ? 2018"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Quartz使用同一组数据库表作集群只需要配置相同的<code>instanceName</code>实例名称，以及设置<code>org.quartz.jobStore.isClustered = true</code><br>启动两个节点后关闭其中正在跑任务的节点，另一个节点会自动检测继续运行定时任务</p></li></ol><p>注：多任务的问题，多个<code>JobDetail</code>使用同一个<code>Trigger</code>报错：<code>Trigger does not reference given job!</code></p><p>​        一个Job可以对应多个Trigger，但多个Job绑定一个Trigger报错。</p><h1 id="10-Logback日志框架介绍和SpringBoot整合"><a href="#10-Logback日志框架介绍和SpringBoot整合" class="headerlink" title="10-Logback日志框架介绍和SpringBoot整合"></a>10-Logback日志框架介绍和SpringBoot整合</h1><h2 id="10-1-新日志框架LogBack介绍"><a href="#10-1-新日志框架LogBack介绍" class="headerlink" title="10.1-新日志框架LogBack介绍"></a>10.1-新日志框架LogBack介绍</h2><ol><li><p>常用处理java的日志组件 slf4j,log4j,logback,common-logging 等</p></li><li><p>logback介绍：</p><p>​    基于Log4j基础上大量改良，不能单独使用，推荐配合日志框架SLF4J来使用<br>​    logback当前分成三个模块：logback-core,logback-classic和logback-access;<br>​    logback-core是其它两个模块的基础模块</p></li><li><p>Logback的核心对象：</p><pre><code>Logger：日志记录器Appender：指定日志输出的目的地，目的地可以是控制台，文件Layout：日志布局 格式化日志信息的输出</code></pre></li><li><p>日志级别：DEBUG &lt; INFO &lt; WARN &lt; ERROR</p><pre class=" language-properties"><code class="language-properties"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>log4j示例<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>        <span class="token comment" spellcheck="true">### 设置###</span><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">debug,stdout,D,E</span><span class="token comment" spellcheck="true">### 输出信息到控制抬 ###</span><span class="token attr-name">log4j.appender.stdout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.stdout.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n</span><span class="token comment" spellcheck="true">### 输出DEBUG 级别以上的日志到=D://logs/error.log ###</span><span class="token attr-name">log4j.appender.D</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token attr-name">log4j.appender.D.File</span> <span class="token punctuation">=</span> <span class="token attr-value">D://logs/log.log</span><span class="token attr-name">log4j.appender.D.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">log4j.appender.D.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG </span><span class="token attr-name">log4j.appender.D.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.D.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n</span><span class="token comment" spellcheck="true">### 输出ERROR 级别以上的日志到=D://logs/error.log ###</span><span class="token attr-name">log4j.appender.E</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token attr-name">log4j.appender.E.File</span> <span class="token punctuation">=</span><span class="token attr-value">E://logs/error.log </span><span class="token attr-name">log4j.appender.E.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">log4j.appender.E.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">ERROR </span><span class="token attr-name">log4j.appender.E.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.E.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n </span></code></pre></li><li><p>Log4j日志转换为logback在线工具（支持log4j.properties转换为logback.xml,不支持 log4j.xml转换为logback.xml） <a href="https://logback.qos.ch/translator/" target="_blank" rel="noopener">https://logback.qos.ch/translator/</a></p></li></ol><h2 id="10-2-SpringBoot2-x日志讲解和Logback"><a href="#10-2-SpringBoot2-x日志讲解和Logback" class="headerlink" title="10.2-SpringBoot2.x日志讲解和Logback"></a>10.2-SpringBoot2.x日志讲解和Logback</h2><ol><li><p>官网介绍：<a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-logging</a></p><p>各个组件案例：<a href="https://logback.qos.ch/manual/index.html" target="_blank" rel="noopener">https://logback.qos.ch/manual/index.html</a></p></li><li><p>分析SpringBoot启动日志</p><ul><li>默认情况下，Spring Boot将日志输出到控制台</li></ul></li><li><p>整合Logback实战</p><ul><li>创建 日志文件logback-spring.xml，官方推荐 -spring.xml结尾<br>默认加载加载配置顺序 logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</li></ul></li><li><p>注释：</p><pre><code>&lt;configuration&gt; 子节点&lt;appender&gt;&lt;/appender&gt;                       &lt;logger&gt;&lt;/logger&gt;&lt;root&gt;&lt;/root&gt;(要加在最后)        </code></pre></li></ol><p><code>Logback.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义参数,后面可以通过${app.name}使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logback_test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--ConsoleAppender 用于在屏幕上输出日志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义了一个过滤器,在LEVEL之下的日志输出不会被打印出来--></span>        <span class="token comment" spellcheck="true">&lt;!--这里定义了DEBUG，也就是控制台不会输出比ERROR级别小的日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- encoder 默认配置为PatternLayoutEncoder --></span>        <span class="token comment" spellcheck="true">&lt;!--定义控制台输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d [%thread] %-5level %logger{36} [%file : %line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义日志输出的路径--></span>        <span class="token comment" spellcheck="true">&lt;!--这里的scheduler.manager.server.home 没有在上面的配置中设定，所以会使用java启动时配置的值--></span>        <span class="token comment" spellcheck="true">&lt;!--比如通过 java -Dscheduler.manager.server.home=/path/to XXXX 配置该属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${scheduler.manager.server.home}/logs/${app.name}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义日志滚动的策略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--定义文件滚动时的文件名的格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${scheduler.manager.server.home}/logs/${app.name}.%d{yyyy-MM-dd.HH}.log.gz            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--60天的时间周期，日志量最大20GB--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 该属性在 1.1.6版本后 才开始支持--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>20GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--每个日志文件最大100MB--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d [%thread] %-5level %logger{36} [%file : %line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--root是默认的logger 这里设定输出级别是debug--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义了两个appender，日志会通过往这两个appender里面写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--对于类路径以 com.example.logback 开头的Logger,输出级别设置为warn,并且只输出到控制台--></span>    <span class="token comment" spellcheck="true">&lt;!--这个logger没有指定appender，它会继承root节点中定义的那些appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.logback<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--通过 LoggerFactory.getLogger("mytest") 可以获取到这个logger--></span>    <span class="token comment" spellcheck="true">&lt;!--由于这个logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender--></span>    <span class="token comment" spellcheck="true">&lt;!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况--></span>    <span class="token comment" spellcheck="true">&lt;!--additivity表示要不要使用rootLogger配置的appender进行输出--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mytest<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--由于设置了 additivity="false" ，所以输出时不会使用rootLogger的appender--></span>    <span class="token comment" spellcheck="true">&lt;!--但是这个logger本身又没有配置appender，所以使用这个logger输出日志的话就不会输出到任何地方--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mytest2<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h1 id="11-搜索框架ElasticSearch介绍和整合SpringBoot"><a href="#11-搜索框架ElasticSearch介绍和整合SpringBoot" class="headerlink" title="11-搜索框架ElasticSearch介绍和整合SpringBoot"></a>11-搜索框架ElasticSearch介绍和整合SpringBoot</h1><h2 id="11-1-搜索知识"><a href="#11-1-搜索知识" class="headerlink" title="11.1-搜索知识"></a>11.1-搜索知识</h2><ul><li><p>mysql：like 模糊，性能问题</p></li><li><p>solr:针对企业，Lucene</p></li><li><p><code>elasticsearch：</code></p><p>针对数据量特别大，PB,TB<br>纯java开发，springboot使用，5.6版本<br>es升级4-&gt;5版本，改动大，但是5版本后，改动不大</p></li></ul><h2 id="11-2-ElasticSearch介绍"><a href="#11-2-ElasticSearch介绍" class="headerlink" title="11.2-ElasticSearch介绍"></a>11.2-ElasticSearch介绍</h2><p>Elasticsearch(ES)是一个基于Apache的开源索引库Lucene而构建的开源、分布式、具有RESTful接口的全文搜索引擎, 还是一个分布式文档数据库.</p><p>ES可以轻松扩展数以百计的服务器(水平扩展), 用于存储和处理数据. 它可以在很短的时间内存储、搜索和分析海量数据, 通常被作为复杂搜索场景下的核心引擎.</p><p><strong>由于Lucene提供的API操作起来非常繁琐, 需要编写大量的代码, Elasticsearch对Lucene进行了封装与优化, 并提供了REST风格的操作接口, 开箱即用, 很大程度上方便了开发人员的使用.</strong></p><ul><li>elasticSearch主要特点<ol><li>特点：全文检索，结构化检索，数据统计、分析，接近实时处理，分布式搜索(可部署数百台服务器)，处理PB级别的数据，搜索纠错，自动完成</li><li>使用场景：日志搜索，数据聚合，数据监控，报表统计分析</li><li>国内外使用者：维基百科，Stack Overflow，GitHub</li></ol></li></ul><h2 id="11-3-SpringBoot整合ElasticSearch"><a href="#11-3-SpringBoot整合ElasticSearch" class="headerlink" title="11.3-SpringBoot整合ElasticSearch"></a>11.3-SpringBoot整合ElasticSearch</h2><ol><li>添加依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--elasticsearch--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>配置文件</li></ol><pre class=" language-yml"><code class="language-yml">spring:  data:    elasticsearch:      cluster-name: esCluster      cluster-nodes: 127.0.0.1:9300       #配置es节点信息，逗号分隔，如果没有指定，则启动ClientNode（9200端口是http查询使用的。9300集群使用。这里使用9300.）</code></pre><ol start="3"><li>创建实体类bean</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"testgoods"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGoodsBo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Field(type = FieldType.Text)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> stock<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> Long version<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>@Document注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Persistent</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>    String <span class="token function">indexName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引库的名称，个人建议以项目的名称命名</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型，个人建议以实体的名称命名</span>    <span class="token keyword">short</span> <span class="token function">shards</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认分区数</span>    <span class="token keyword">short</span> <span class="token function">replicas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个分区默认的备份数</span>    String <span class="token function">refreshInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"1s"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新间隔</span>    String <span class="token function">indexStoreType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引文件存储类型</span><span class="token punctuation">}</span></code></pre><p><code>@Document</code>作用于类上，经测试代码初始化时若es中没有对应的索引，则会在es中创建一个。</p></li><li><p>@Field注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Field</span> <span class="token punctuation">{</span>    FieldType <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> FieldType<span class="token punctuation">.</span>Auto<span class="token punctuation">;</span>#自动检测属性的类型    FieldIndex <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> FieldIndex<span class="token punctuation">.</span>analyzed<span class="token punctuation">;</span>#默认情况下分词    DateFormat <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> DateFormat<span class="token punctuation">.</span>none<span class="token punctuation">;</span>    String <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>#默认情况下不存储原文    String <span class="token function">searchAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>#指定字段搜索时使用的分词器    String <span class="token function">indexAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>#指定字段建立索引时指定的分词器    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">ignoreFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#如果某个字段需要被忽略    <span class="token keyword">boolean</span> <span class="token function">includeInParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>@Field</code>作用于属性上，经测试该注解的属性有时会与现有的属性冲突，造成异常，错误信息如下，所以建议es中映射已建立的情况下，不要使用该注解。</p></li><li><p><code>@Id</code>和<code>@Version</code>分别用来绑定es中的<code>_id</code>和<code>_version</code>字段。</p></li></ul><ol start="4"><li>创建Repository(接口继承ElasticSearchRepository)</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsRepository</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token operator">&lt;</span>TestGoodsBo<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token punctuation">,</span> PagingAndSortingRepository<span class="token operator">&lt;</span>TestGoodsBo<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameAndPrice</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Long price<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameOrPrice</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Long price<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameNot</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByPriceBetween</span><span class="token punctuation">(</span><span class="token keyword">long</span> price<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameLike</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"{\"bool\" : {\"must\" : {\"term\" : {\"message\" : \"?0\"}}}}"</span><span class="token punctuation">)</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>es的操作主要通过自定义的Repository对象完成，该对象可以通过继承模板接口<code>ElasticsearchRepository</code>实现，该模板提供了<code>save</code>、<code>findById</code>、<code>findAll</code>和<code>search</code>等通用方法的实现，同时还支持通过规定的名称格式自定义操作方法.</p><ol start="5"><li>使用</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> GoodsRepository repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ElasticsearchTemplate elasticsearchTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TestGoodsBo <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> TestGoodsBo bo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>bo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TestGoodsBo <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> result <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/find"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        //通过ElasticsearchTemplate实现</span><span class="token comment" spellcheck="true">//        QueryBuilder queryBuilder = QueryBuilders.matchQuery("name", name);</span><span class="token comment" spellcheck="true">//        SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder).withHighlightFields().build();</span><span class="token comment" spellcheck="true">//        Page&lt;TestGoodsBo> sampleEntities = elasticsearchTemplate.queryForPage(searchQuery, TestGoodsBo.class);</span><span class="token comment" spellcheck="true">//        //Pageable对象的手动实现</span><span class="token comment" spellcheck="true">//        Sort sort = new Sort(Sort.Direction.ASC,"name");</span><span class="token comment" spellcheck="true">//        Pageable page = PageRequest.of(0,10,sort);</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> sampleEntities <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sampleEntities<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>Pageable对象</li></ol><p>该对象可以帮助我们完成分页和排序操作，有手动和自动两种方式实现：</p><ul><li><p>手动</p><pre class=" language-java"><code class="language-java"> Sort sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>ASC<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Pageable page <span class="token operator">=</span> PageRequest<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>自动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span>Pageable pageable<span class="token punctuation">)</span></code></pre><p>自动方式可以在request传参的同时就根据传入的参数来组装<code>Pageable</code>对象，同时还能使用<code>@PageableDefault</code>注解设定默认值，因此更推荐使用。</p><p>Spring支持的request参数如下：</p><ul><li><p>page，第几页，从0开始，默认为第0页</p></li><li><p>size，每一页的大小，默认为20</p></li><li><p>sort，排序相关的信息，例如sort=firstname&amp;sort=lastname,desc表示在按firstname正序排列基础上按lastname倒序排列</p></li></ul></li></ul><h1 id="12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ"><a href="#12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ" class="headerlink" title="12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ"></a>12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ</h1><h2 id="12-1-JMS介绍和使用场景及基础编程模型"><a href="#12-1-JMS介绍和使用场景及基础编程模型" class="headerlink" title="12.1-JMS介绍和使用场景及基础编程模型"></a>12.1-JMS介绍和使用场景及基础编程模型</h2><ol><li><p>什么是JMS？</p><p>Java消息服务（Java Message Service),Java平台中关于面向消息中间件的接口</p></li><li><p>JMS是一种与厂商无关的 API，用来访问消息收发系统消息，它类似于JDBC(Java Database Connectivity)。这里，JDBC 是可以用来访问许多不同关系数据库的 API</p></li><li><p>使用场景</p><ul><li>跨平台 </li><li>多语言 </li><li>多项目</li><li>解耦</li><li>分布式事务</li><li>流量控制</li><li>最终一致性</li><li>RPC调用</li></ul></li><li><p>概念</p><ul><li>JMS提供者：Apache ActiveMQ、RabbitMQ、Kafka、Notify、MetaQ、RocketMQ</li><li>JMS生产者(Message Producer)</li><li>JMS消费者(Message Consumer)</li><li>JMS消息</li><li>JMS队列</li><li>JMS主题</li></ul><p>JMS消息通常有两种类型：<code>点对点</code>、<code>发布/订阅</code></p></li><li><p>编程模型</p><p>MQ中需要用的一些类</p><pre><code>ConnectionFactory ：连接工厂，JMS 用它创建连接Connection ：JMS 客户端到JMS Provider 的连接Session： 一个发送或接收消息的线程Destination ：消息的目的地;消息发送给谁MessageConsumer / MessageProducer： 消息接收者，消费者</code></pre></li></ol><h2 id="12-2-ActiveMQ消息队列基础介绍"><a href="#12-2-ActiveMQ消息队列基础介绍" class="headerlink" title="12.2-ActiveMQ消息队列基础介绍"></a>12.2-ActiveMQ消息队列基础介绍</h2><p>ActiveMQ是一种开源的基于JMS规范的一种消息中间件的实现，ActiveMQ的设计目标是提供标准的，面向消息的，能够跨越多语言和多系统的应用集成消息通信中间件。</p><p><strong>特点：</strong></p><ul><li>支持来自Java，C，C ++，C＃，Ruby，Perl，Python，PHP的各种跨语言客户端和协议</li><li>支持许多高级功能，如消息组，虚拟目标，通配符和复合目标</li><li>完全支持JMS 1.1和J2EE 1.4，支持瞬态，持久，事务和XA消息</li><li>Spring支持，ActiveMQ可以轻松嵌入到Spring应用程序中，并使用Spring的XML配置机制进行配置</li><li>支持在流行的J2EE服务器（如TomEE，Geronimo，JBoss，GlassFish和WebLogic）中进行测试</li><li>使用JDBC和高性能日志支持非常快速的持久化</li></ul><h2 id="12-3-SpringBoot2整合ActiveMQ实战之点对点消息"><a href="#12-3-SpringBoot2整合ActiveMQ实战之点对点消息" class="headerlink" title="12.3-SpringBoot2整合ActiveMQ实战之点对点消息"></a>12.3-SpringBoot2整合ActiveMQ实战之点对点消息</h2><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 整合消息队列ActiveMQ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 如果配置线程池则加入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#整合jms测试，安装在别的机器，防火墙和端口号记得开放</span><span class="token attr-name">spring.activemq.broker-url</span><span class="token punctuation">=</span><span class="token attr-value">tcp://127.0.0.1:61616</span><span class="token comment" spellcheck="true">#集群配置</span><span class="token comment" spellcheck="true">#spring.activemq.broker-url=failover:(tcp://localhost:61616,tcp://localhost:61617)</span><span class="token attr-name">spring.activemq.user</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.activemq.password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token comment" spellcheck="true">#下列配置要增加依赖</span><span class="token attr-name">spring.activemq.pool.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.activemq.pool.max-connections</span><span class="token punctuation">=</span><span class="token attr-value">100</span></code></pre></li><li><p>启动类添加@EnableJms注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableJms</span> <span class="token comment" spellcheck="true">//启动消息队列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProductApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>QueueConfig定义消息队列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span>ActiveMQQueue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueConfig</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//定义存放消息的队列</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"ActiveMQQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ProviderController测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入存放消息的队列，用于下列方法一</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注入springboot封装的工具类</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法一：添加消息到消息队列</span>        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法二：这种方式不需要手动创建queue，系统会自行创建名为test的队列</span>        <span class="token comment" spellcheck="true">//jmsMessagingTemplate.convertAndSend("test", message);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者应用</p><p>application.properties 和 ConsumerApplication 同 provider类似，如下为不同的ActiveConsumer：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用JmsListener配置消费者监听的队列，其中message是接收到的消息</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">"ActiveMQQueue"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// SendTo 会将此方法返回的数据, 写入到 OutQueue 中去.</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"SQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">handleMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功接受message"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"成功接受message"</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="7"><li>模拟请求 <code>localhost:8080/send?msg=123</code></li></ol><h2 id="12-4-SpringBoot整合ActiveMQ实战之发布订阅模式"><a href="#12-4-SpringBoot整合ActiveMQ实战之发布订阅模式" class="headerlink" title="12.4-SpringBoot整合ActiveMQ实战之发布订阅模式"></a>12.4-SpringBoot整合ActiveMQ实战之发布订阅模式</h2><ol><li><p>需要加入配置文件，支持发布订阅模型，默认只支持点对点</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#default point to point</span><span class="token comment" spellcheck="true">#默认消费者并不会消费订阅发布类型的消息，这是由于springboot默认采用的是p2p模式进行消息的监听</span><span class="token attr-name">spring.jms.pub-sub-domain</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre></li><li><p>新建JMS配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmsConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String TOPIC <span class="token operator">=</span> <span class="token string">"springboot.topic.test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE <span class="token operator">=</span> <span class="token string">"springboot.queue.test"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Topic <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span>QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// topic模式的ListenerContainer</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsListenerContainerFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">jmsListenerContainerTopic</span><span class="token punctuation">(</span>ConnectionFactory activeMQConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultJmsListenerContainerFactory bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setPubSubDomain</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>activeMQConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// queue模式的ListenerContainer</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsListenerContainerFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">jmsListenerContainerQueue</span><span class="token punctuation">(</span>ConnectionFactory activeMQConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultJmsListenerContainerFactory bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>activeMQConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"producer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送消息，destination是发送到的队列，message是待发送的消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Destination destination<span class="token punctuation">,</span> <span class="token keyword">final</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JMSConsumer3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> JmsConfig<span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTopicMessage1</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到topic消息：{}"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> JmsConfig<span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTopicMessage2</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到topic消息：{}"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> JmsConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"jmsListenerContainerQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onQueueMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到queue消息：{}"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Topic topic<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            jmsProducer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"queue,world!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            jmsProducer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"topic,world!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h2 id="12-5-RocketMQ消息队列介绍"><a href="#12-5-RocketMQ消息队列介绍" class="headerlink" title="12.5-RocketMQ消息队列介绍"></a>12.5-RocketMQ消息队列介绍</h2><p>RocketMQ 是一款分布式、队列模型的消息中间件</p><p><strong>特点：</strong></p><ul><li>在高压下1毫秒内响应延迟超过99.6％。</li><li>适合金融类业务，高可用性跟踪和审计功能。</li><li>支持发布订阅模型，和点对点</li><li>支持拉pull和推push两种消息模式</li><li>单一队列百万消息</li><li>支持单master节点，多master节点，多master多slave节点</li></ul><p><strong>概念：</strong></p><ul><li>Producer:消息生产者</li><li>Producer Group:消息生产者组，发送同类消息的一个消息生产组</li><li>Consumer:消费者</li><li>Consumer Group:消费同个消息的多个实例</li><li>Tag:标签，子主题（二级分类）,用于区分同一个主题下的不同业务的消息</li><li>Topic:主题</li><li>Message：消息</li><li>Broker：MQ程序，接收生产的消息，提供给消费者消费的程序</li><li>Name Server：给生产和消费者提供路由信息，提供轻量级的服务发现和路由    </li></ul><p><strong>官网地址</strong>：<a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a></p><h2 id="12-6-Springboot2整合RocketMQ4-x实战"><a href="#12-6-Springboot2整合RocketMQ4-x实战" class="headerlink" title="12.6-Springboot2整合RocketMQ4.x实战"></a>12.6-Springboot2整合RocketMQ4.x实战</h2><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-yml"><code class="language-yml">rocketmq:  # 生产者配置  producer:    isOnOff: on    # 发送同一类消息的设置为同一个group，保证唯一    groupName: FeePlatGroup    # 服务地址    namesrvAddr: 10.1.1.207:9876    # 消息最大长度 默认1024*4(4M)    maxMessageSize: 4096    # 发送消息超时时间,默认3000    sendMsgTimeout: 3000    # 发送消息失败重试次数，默认2    retryTimesWhenSendFailed: 2  # 消费者配置  consumer:    isOnOff: on    # 官方建议：确保同一组中的每个消费者订阅相同的主题。    groupName: FeePlatGroup    # 服务地址    namesrvAddr: 10.1.1.207:9876    # 接收该 Topic 下所有 Tag    topics: FangPlatTopic~*;    consumeThreadMin: 20    consumeThreadMax: 64    # 设置一次消费消息的条数，默认为1条    consumeMessageBatchMaxSize: 1# 配置 Group  Topic  Tagfang-plat:  fang-plat-group: FangPlatGroup  fang-plat-topic: FangPlatTopic  fang-account-tag: FangAccountTag</code></pre></li><li><p>生产者配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//RocketMQ生产者配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.groupName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String groupName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.namesrvAddr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String namesrvAddr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.maxMessageSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer maxMessageSize <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.sendMsgTimeout}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer sendMsgTimeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.retryTimesWhenSendFailed}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer retryTimesWhenSendFailed<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultMQProducer <span class="token function">getRocketMQProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultMQProducer producer<span class="token punctuation">;</span>        producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果需要同一个jvm中不同的producer往不同的mq集群发送消息，需要设置不同的instanceName</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxMessageSize<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">setMaxMessageSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxMessageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendMsgTimeout<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">setSendMsgTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendMsgTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果发送消息失败，设置重试次数，默认为2次</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>retryTimesWhenSendFailed<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>retryTimesWhenSendFailed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> producer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//消费者配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.namesrvAddr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String namesrvAddr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.groupName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String groupName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.consumeThreadMin}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> consumeThreadMin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.consumeThreadMax}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> consumeThreadMax<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.topics}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String topics<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.consumeMessageBatchMaxSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> consumeMessageBatchMaxSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RocketMsgListener msgListener<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultMQPushConsumer <span class="token function">getRocketMQConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeThreadMin</span><span class="token punctuation">(</span>consumeThreadMin<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeThreadMax</span><span class="token punctuation">(</span>consumeThreadMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span>msgListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_LAST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeMessageBatchMaxSize</span><span class="token punctuation">(</span>consumeMessageBatchMaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> topicTagsArr <span class="token operator">=</span> topics<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String topicTags <span class="token operator">:</span> topicTagsArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> topicTag <span class="token operator">=</span> topicTags<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topicTag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>topicTag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> consumer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者监听配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//消费监听配置</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMsgListener</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListenerConcurrently</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RocketMsgListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ParamConfigService paramConfigService <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> list<span class="token punctuation">,</span> ConsumeConcurrentlyContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MessageExt messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受到的消息为："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> reConsume <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消息已经重试了3次，如果不需要再次消费，则返回成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>reConsume <span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>paramConfigService<span class="token punctuation">.</span>feePlatTopic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String tags <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"FeeAccountTag"</span><span class="token operator">:</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开户 tag == >>"</span><span class="token operator">+</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span> <span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"未匹配到Tag == >>"</span><span class="token operator">+</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 消息消费成功</span>        <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置参数绑定</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamConfigService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fang-plat.fang-plat-group}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String fangPlatGroup <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fang-plat.fang-plat-topic}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String fangPlatTopic <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fang-plat.fang-account-tag}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String fangAccountTag <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeePlatMqServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FeePlatMqService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DefaultMQProducer defaultMQProducer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ParamConfigService paramConfigService <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SendResult <span class="token function">openAccountMsg</span><span class="token punctuation">(</span>String msgInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可以不使用Config中的Group</span>        defaultMQProducer<span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span>paramConfigService<span class="token punctuation">.</span>fangPlatGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>        SendResult sendResult <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Message sendMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>paramConfigService<span class="token punctuation">.</span>fangPlatTopic<span class="token punctuation">,</span>                                          paramConfigService<span class="token punctuation">.</span>fangAccountTag<span class="token punctuation">,</span>                                         <span class="token string">"fang_open_account_key"</span><span class="token punctuation">,</span> msgInfo<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sendResult <span class="token operator">=</span> defaultMQProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sendResult <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="13-SpringBoot多环境配置"><a href="#13-SpringBoot多环境配置" class="headerlink" title="13-SpringBoot多环境配置"></a>13-SpringBoot多环境配置</h1><h2 id="13-1-SpringBoot多环境配置介绍"><a href="#13-1-SpringBoot多环境配置介绍" class="headerlink" title="13.1-SpringBoot多环境配置介绍"></a>13.1-SpringBoot多环境配置介绍</h2><ol><li>不同环境使用不同配置<br>例如数据库配置，在开发的时候，我们一般用开发数据库，而在生产环境的时候，我们是用正式的数据</li><li>配置文件存放路径<br><code>classpath</code>根目录的“/config”包下<br><code>classpath</code>的根目录下</li><li>spring boot允许通过命名约定按照一定的格式<code>(application-{profile}.properties)</code>来定义多个配置文件</li><li><code>spring.profiles.active=dev</code>来指定加载哪个环境的配置文件</li></ol><h1 id="14-SpringBoot2-0响应式编程（Webflux）"><a href="#14-SpringBoot2-0响应式编程（Webflux）" class="headerlink" title="14-SpringBoot2.0响应式编程（Webflux）"></a>14-SpringBoot2.0响应式编程（Webflux）</h1><h2 id="14-1-什么是reactive响应式编程（反应式编程）？"><a href="#14-1-什么是reactive响应式编程（反应式编程）？" class="headerlink" title="14.1-什么是reactive响应式编程（反应式编程）？"></a>14.1-什么是reactive响应式编程（反应式编程）？</h2><p>是一种异步编程范式，它关注数据流和变化的传播。这意味着可以通过使用编程语言轻松地表示静态（例如数组）和动态（例如事件发射器）数据流。</p><p>响应式编程是一种流行的编程方法，编写代码是基于对变化的反应。它的灵感来自于我们的日常生活，也即我们如何采取行动以及与他人沟通。</p><p>我们在执行日常生活活动时，我们会尽可能多任务，但大脑无法处理多任务，不管我们如何努力去做。我们人类实现多任务的唯一办法是在时间线上在任务之间切换。事实上，我们总是切换任务，即使我们没有意识到它。</p><p>例如，要执行一个任务：在星巴克喝一杯咖啡饮料，你需要发出一个命令，等待它准备好，然后接受你的饮料。当你在等待的时候，你很可能会找到别的事情做。这是最简单的执行任务的反应(响应)形式，你会在你等待来自咖啡师的“响应”时做别的事情，当你的咖啡已经准备好后，会叫你的名字时。</p><p>响应编程能够简化编程，它依赖于事件，代码运行的顺序不是代码行的顺序，而是和一个以上的事件有关，这些事件发生是以随着时间的推移的序列。我们把这一系列事件称为“流”。</p><p>何为事件？例如，你知道某个名人总是在发送有趣微博，每次他推发一条微博我们可以称之为一个“事件”。如果你看看这位名人微博系列，你会发现其实是一个随着时间的推移（一系列的事件）发生的一序列的“事件”，响应式编程就是因为我们得“响应”这些事件而得以命名。</p><ul><li>依赖于事件，事件驱动(Event-driven)</li><li>一系列事件称为“流”</li><li>异步</li><li>非阻塞</li><li>观察者模式</li></ul><p><strong>例子</strong></p><p><code>int A = B + C;</code></p><p>A被赋值为B和C的值。这时，如果我们改变B的值，A的值并不会随之改变。而如果我们运用一种机制，当B或者C的值发现变化的时候，A的值也随之改变，这样就实现了”响应式“。</p><h2 id="14-2-SpringBoot2-x响应式编程webflux介绍"><a href="#14-2-SpringBoot2-x响应式编程webflux介绍" class="headerlink" title="14.2-SpringBoot2.x响应式编程webflux介绍"></a>14.2-SpringBoot2.x响应式编程webflux介绍</h2><ol><li><p>Spring WebFlux是Spring Framework 5.0中引入的新的反应式Web框架，与Spring MVC不同，它不需要Servlet API，完全异步和非阻塞，并 通过Reactor项目实现Reactive Streams规范。</p><ul><li><p>传统的Servlet</p><p>servlet由servlet container进行生命周期管理。container启动时构造servlet对象并调用servlet init()进行初始化；container关闭时调用servlet destory()销毁servlet；container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</p><p><img src="/2020/01/16/springboot-xue-xi-bi-ji-san/servlet.png" alt="Servlet结构"></p></li></ul></li></ol><pre><code> **缺点：** servlet是一个简单的网络编程模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型就较为吃力。 **例如：** spring webmvc是基于servlet之上的一个路由模型，即spring实现了处理所有request请求的一个servlet（DispatcherServlet），并由该servlet进行路由。所以spring webmvc无法摆脱servlet模型的弊端。</code></pre><ul><li><p>Webflux</p><p>Webflux模式替换了旧的Servlet线程模型。用少量的线程处理request和response io操作，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。</p><p><img src="/2020/01/16/springboot-xue-xi-bi-ji-san/webflux.png" alt="webflux"></p><p>Spring WebFlux是Spring Framework 5.0中引入的新的反应式Web框架，与Spring MVC不同，它不需要Servlet API，完全异步和非阻塞，并 通过Reactor项目实现Reactive Streams规范。</p><p><img src="/Users/fangpeng/Blog/source/_posts/mvc%E5%92%8Cwebflux.png" alt="mvc和webflux"></p><p><strong>响应式与非响应式区别：</strong></p><p><img src="/Users/fangpeng/Blog/source/_posts/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%92%8C%E9%9D%9E%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8C%BA%E5%88%AB.png" alt="SpringBoot中响应式和非响应式"></p></li></ul><ol start="2"><li><p>Flux和Mono</p><ul><li><p>简单业务而言：和其他普通对象差别不大，复杂请求业务，就可以提升性能</p></li><li><p>通俗理解：</p><ul><li><p>Mono 表示的是包含 0 或者 1 个元素的异步序列</p><p><code>mono-&gt;单一对象 User  如： redis-&gt;用户ID-&gt;唯一的用户Mono&lt;User&gt;</code> </p></li><li><p>Flux 表示的是包含 0 到 N 个元素的异步序列</p><p><code>flux-&gt;数组列表对象 List&lt;User&gt;  如： redis-&gt;男性用户-&gt;Flux&lt;User&gt;</code></p></li><li><p>Flux 和 Mono 之间可以进行转换</p></li></ul></li></ul></li><li><p>Spring WebFlux有两种风格：基于功能和基于注解的。基于注解非常接近Spring MVC模型</p><ul><li><p>基于注解的方式</p><p><strong>业务层Service：</strong>调用了ReactiveRedisTemplate对数据进行操作</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ReactiveService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ReactiveRedisTemplate reactiveRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_KEY <span class="token operator">=</span> <span class="token string">"entity:user"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryByUUID</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">delete</span><span class="token punctuation">(</span>String uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Controller层：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ReactiveService reactiveService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询所有</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/find/all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询单个</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query/{uuid}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span> String uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">queryByUUID</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加用户</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新用户</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{uuid}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span> String uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>和使用mvc没有任何的区别，唯一的区别在于返回的对象是<code>Mono</code>和<code>Flux</code>，简单点理解，返回单个数据就是<code>Mono</code>，多个就使用<code>Flux</code>。</p><p>启动项目可以看到实际上使用的是<code>Netty</code>服务器</p></li><li><p>基于功能（函数式）</p><p>处理请求的类，实现具体的业务逻辑，接口 <code>ServerRequest</code> 表示的是一个 HTTP 请求体。通过ServerRequest 对象可获取到请求的相关信息，如请求路径、查询参数和请求内容等。方法 的返回值是一个 Mono<T extends serverresponse>对象。接口 <code>ServerResponse</code> 用来表示 HTTP 响应。ServerResponse 中包含了很多静态方法来创建不同 HTTP 状态码的响应对象。</T></p><p>涉及几个比较重要的类如：<code>RouterFunction、HandlerFunction和DispatcherHandler</code></p><p><code>RouterFunction</code>就是一个路由函数，可以理解为将请求和具体的<code>HandlerFunction</code>做一个映射；</p><ol><li><p>先创建<code>RouterFunction</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFunctionRouter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserHandler userHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"userRouter"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RouterFunction <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RouterFunction<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> routerFunction <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/find/all"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>findAll<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/query/{uuid}"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>queryByName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span>userHandler<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span>userHandler<span class="token operator">:</span><span class="token operator">:</span>update<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/user/delete/{uuid}"</span><span class="token punctuation">,</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>delete<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routerFunction<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将具体的请求路径和具体的handler做了映射，这样会根据用户具体的请求路径找具体的handler，其实就是具体的方法。和mvc的@RequestMapping功能上是一样的。但是这个需要注意的是返回的结果是ServerResponse，请求是ServerRequest，这个也可以和mvc的HttpServletRequest、HttpServletResponse对应起来，都是封装用户的请求信息，其实和mvc都还是能对应起来的，只是编程方式不太一样。</p></li><li><p>然后创建<code>HandlerFunction</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Mono <span class="token function">findAll</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> flux <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>flux<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询单个</span>    <span class="token keyword">public</span> Mono <span class="token function">queryByUUID</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">queryByUUID</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加用户</span>    <span class="token keyword">public</span> Mono <span class="token function">add</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将请求体转成指定Momo对象</span>        Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> mono <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String uuid <span class="token operator">=</span> <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法2</span>        Mono<span class="token operator">&lt;</span>Object<span class="token operator">></span> safeUser <span class="token operator">=</span> mono<span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> u<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        User user = createUser(serverRequest);</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>safeUser<span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//方法1</span><span class="token comment" spellcheck="true">//        Mono&lt;User> userMono = mono.doOnNext(u -> u.setUuid(uuid)).doOnSuccess(user -> userRepository.saveNoReturn(user));</span><span class="token comment" spellcheck="true">//        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON_UTF8).body(userMono,User.class);</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> User <span class="token function">createUser</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> userId <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> userName <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> age <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> sex <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> uuid <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span><span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新用户</span>    <span class="token keyword">public</span> Mono <span class="token function">update</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> mono <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token function">createUser</span><span class="token punctuation">(</span>serverRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token keyword">public</span> Mono <span class="token function">delete</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul></li><li><p>Spring WebFlux应用程序不严格依赖于Servlet API，因此它们不能作为war文件部署，也不能使用src/main/webapp目录</p></li><li><p>可以整合多个模板引擎</p><pre><code>除了REST Web服务外，您还可以使用Spring WebFlux提供动态HTML内容。Spring WebFlux支持各种模板技术，包括Thymeleaf，FreeMarker。</code></pre></li></ol><h2 id="14-3-SpringBoot2-x-webflux实战"><a href="#14-3-SpringBoot2-x-webflux实战" class="headerlink" title="14.3-SpringBoot2.x webflux实战"></a>14.3-SpringBoot2.x webflux实战</h2><ol><li><p>WebFlux中，请求和响应不再是WebMVC中的ServletRequest和ServletResponse，而是ServerRequest和ServerResponse</p></li><li><p>加入依赖，如果同时存在spring-boot-starter-web，则会优先用spring-boot-starter-web</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写测试类UserController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"hello webflux!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>启动方式默认是Netty,8080端口</p><p>测试:localhost:8080/api/v1/user/test</p><p><img src="/Users/fangpeng/Blog/source/_posts/webflux%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="webflux测试结果"></p></li></ol><h2 id="14-4-WebFlux客户端WebClient"><a href="#14-4-WebFlux客户端WebClient" class="headerlink" title="14.4-WebFlux客户端WebClient"></a>14.4-WebFlux客户端WebClient</h2><p>WebClient是一个响应式客户端，它提供了RestTemplate的替代方法。它公开了一个功能齐全、流畅的API，并依赖于非阻塞I / O，使其能够比RestTemplate更高效地支持高并发性。WebClient非常适合流式的传输方案，并且依赖于较低级别的HTTP客户端库来执行请求，是可插拔的。</p><p><strong>与RestTemplate相比，WebClient是：</strong></p><ul><li>非阻塞，Reactive的，并支持更高的并发性和更少的硬件资源。</li><li>提供利用Java 8 lambdas的函数API。</li><li>支持同步和异步方案。</li><li>支持从服务器向上或向下流式传输。</li></ul><p>RestTemplate不适合在非阻塞应用程序中使用，因此Spring WebFlux应用程序应始终使用WebClient。在大多数高并发场景中，WebClient也应该是Spring MVC中的首选，并且用于编写一系列远程，相互依赖的调用。</p><p>Reactive方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> WebClient client <span class="token operator">=</span> WebClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="15-SpringBoot2-0服务器端主动推送SSE技术"><a href="#15-SpringBoot2-0服务器端主动推送SSE技术" class="headerlink" title="15-SpringBoot2.0服务器端主动推送SSE技术"></a>15-SpringBoot2.0服务器端主动推送SSE技术</h1><h2 id="15-1-服务端推送常用技术介绍"><a href="#15-1-服务端推送常用技术介绍" class="headerlink" title="15.1-服务端推送常用技术介绍"></a>15.1-服务端推送常用技术介绍</h2><ol><li><p>客户端轮询:ajax定时拉取</p><p>ajax长时间和服务端保持通讯太占内存</p></li><li><p>服务端主动推送:WebSocket</p><pre><code>全双工的，本质上是一个额外的tcp连接，建立和关闭时握手使用http协议，其他数据传输不使用http协议更加复杂一些，适用于需要进行复杂双向数据通讯的场景</code></pre><p>​    websocket可以进行服务端和前端双向通讯,写法较为复杂</p></li><li><p>服务端主动推送:SSE (Server Send Event)</p><pre><code>html5新标准，用来从服务端实时推送数据到浏览器端，直接建立在当前http连接上，本质上是保持一个http长连接，轻量协议简单的服务器数据推送的场景，使用服务器推送事件    学习资料：http://www.w3school.com.cn/html5/html_5_serversentevents.asp</code></pre></li></ol><h2 id="15-2-SpringBoot2-x服务端主动推送SSE"><a href="#15-2-SpringBoot2-x服务端主动推送SSE" class="headerlink" title="15.2-SpringBoot2.x服务端主动推送SSE"></a>15.2-SpringBoot2.x服务端主动推送SSE</h2><ol><li><p>后端代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SSEController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//produces = "text/event-stream;charset=UTF-8"一定要带上</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get_data"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=UTF-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">double</span> moeny <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>moeny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          DecimalFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">".00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String price <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>moeny<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//！！！注意，EventSource返回的参数必须以data:开头，"\n\n"结尾，不然onmessage方法无法执行。</span>          <span class="token keyword">return</span> <span class="token string">"data:猪肉价格行情:"</span> <span class="token operator">+</span> price <span class="token operator">+</span><span class="token string">"元"</span><span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>前段代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//需要判断浏览器支不支持，可以去w3c进行查看</span><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">'/get_data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="16-SpringBoot2-x监控Actuator"><a href="#16-SpringBoot2-x监控Actuator" class="headerlink" title="16-SpringBoot2.x监控Actuator"></a>16-SpringBoot2.x监控Actuator</h1><p><code>Spring Boot Actuator</code>是<code>spring boot</code>项目一个监控模块，提供了很多原生的端点，包含了对应用系统的自省和监控的集成功能，可以查看应用配置的详细信息，比如<strong>应用程序上下文里全部的Bean</strong>、<strong>健康指标</strong>、<strong>环境变量</strong>及<strong>各类重要度量指标</strong>等等，这些都是使用可<code>HTTP</code>进行请求访问。通过这些监控信息，我们就能随时了解应用的运行情况了。</p><p>Actuator 是 Spring Boot 提供的对应用系统的自省和监控功能。通过 Actuator，可以使用数据化的指标去度量应用的运行情况，比如查看服务器的磁盘、内存、CPU等信息，系统的线程、gc、运行状态等等。</p><p>Actuator 通常通过使用 HTTP 和 JMX 来管理和监控应用，大多数情况使用 HTTP 的方式。</p><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /demo<span class="token comment" spellcheck="true"># actuator 监控配置</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#actuator端口 如果不配置做默认使用上面8080端口</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#默认值访问health,info端点  用*可以包含全部端点</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>      <span class="token comment" spellcheck="true">#修改访问路径 2.0之前默认是/; 2.0默认是/actuator可以通过这个属性值修改</span>      <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /actuator</code></pre><p>配置完成启动项目后就可以通过postman或者直接在预览器输入路径等方式来查看应用的运行状态了。<br> 当项目启动时，访问<code>[http://127.0.0.1:9090/actuator]</code>地址</p><h5 id="注意：如果没有配置-actuator端口-采用默认访问地址：http-127-0-0-1-8080-demo-actuator"><a href="#注意：如果没有配置-actuator端口-采用默认访问地址：http-127-0-0-1-8080-demo-actuator" class="headerlink" title="注意：如果没有配置 actuator端口,采用默认访问地址：http://127.0.0.1:8080/demo/actuator"></a><code>注意：如果没有配置 actuator端口,采用默认访问地址：http://127.0.0.1:8080/demo/actuator</code></h5><p>如果看到类似下面的内容，说明actuator已经生效了</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"_links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"self"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"auditevents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/auditevents"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"beans"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/beans"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"caches-cache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/caches/{cache}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"caches"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/caches"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"health"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/health"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"health-component"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/health/{component}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"health-component-instance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/health/{component}/{instance}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"conditions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/conditions"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"configprops"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/configprops"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/env"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"env-toMatch"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/env/{toMatch}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/info"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"loggers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/loggers"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"loggers-name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/loggers/{name}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"heapdump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/heapdump"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"threaddump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/threaddump"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"metrics-requiredMetricName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/metrics/{requiredMetricName}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"metrics"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/metrics"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"scheduledtasks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/scheduledtasks"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"httptrace"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/httptrace"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/mappings"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>建议</p><ul><li><p>只能访问几个url</p><ul><li><p>访问的url在SpringBoot2.0版本需要加上actuator</p></li><li><p>需要在配置文件中加入下列配置<br><code>management.endpoints.web.exposure.include=*</code></p></li><li><p>官网说明：<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security-actuator" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security-actuator</a></p></li></ul><p><strong>原因：</strong><br>出于安全考虑，除/ health和/ info之外的所有执行器默认都是禁用的。  <code>management.endpoints.web.exposure.include</code>属性可用于启用执行器</p></li><li><p>建议<br>在设置management.endpoints.web.exposure.include之前，请确保暴露的执行器不包含敏感信息和/<br>或通过将其放置在防火墙进行控制，不对外进行使用</p><p>禁用的端点将从应用程序上下文中完全删除。如果您只想更改端点所暴露的技术，请改用 include和exclude属性<br><strong>例子：</strong></p><pre><code>开启全部：`management.endpoints.web.exposure.include=*`开启某个：`management.endpoints.web.exposure.include=metrics`关闭某个：`management.endpoints.web.exposure.exclude=metrics`</code></pre><p>或者用springadmin进行管理</p><pre><code>相关资料：https://www.cnblogs.com/ityouknow/p/8440455.html</code></pre><p>或者用自己编写脚本监控</p><pre><code>CPU、内存、磁盘、nginx的http响应状态码200,404,5xx </code></pre></li><li><p>介绍常用的几个</p><pre><code>`/health`     查看应用健康指标`/actuator/metrics`    查看应用基本指标列表`/actuator/metrics/{name}`        通过上述列表，查看具体 查看具体指标`/actuator/env`        显示来自Spring的 ConfigurableEnvironment的属性    </code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构基础</title>
      <link href="/2020/01/16/fen-bu-shi-jia-gou-ji-chu/"/>
      <url>/2020/01/16/fen-bu-shi-jia-gou-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式架构基础"><a href="#分布式架构基础" class="headerlink" title="分布式架构基础"></a>分布式架构基础</h1><h2 id="1-分布式系统"><a href="#1-分布式系统" class="headerlink" title="1-分布式系统"></a>1-分布式系统</h2><p>分布式系统是其组件分布在连网的计算机上，组件之间通过传递消息进行通信和动作协调的系统。一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，一般有以下几个特征：</p><ul><li><strong>分布性</strong>：一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能处于不同的机柜上，不同的城市的机房中，或者是世界上任何一个角落。同时，机器的分布情况也会随时变动；</li><li><strong>并发性</strong>：在一个计算机网络中，程序运行过程中的并发性操作是非常常见的行为，例如同一个分布式系统的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等，如何准确并高效地协调分布式并发操作也成为了分布式系统架构与设计中最大的挑战之一；</li><li><strong>缺乏全局时钟</strong>：分布式系统中多个进程可能在空间上分布式在各处，进程之间通过交换消息来相互协作，密切的协作通常取决于对程序动作发生的时间的共识。但在分布式系统中，各进程与时钟同步所达到的准确性是有限的，即没有一个正确时间的全局概念；</li><li><strong>故障独立性</strong>：组成分布式系统的所有计算机，都有可能发生任何形式的故障。单个模块的故障相对容易预知并设计应对逻辑，但分布式系统可能以新的方式出现故障。网络故障导致互连的计算机的隔离，但它们并不一定会停止运行，而且程序很难判断是网络故障还是因为延迟。同样，当被网络隔离计算程序在异常终止时，也许不能马上通知与它通信的其他组件了解。系统的每个组件会单独地出现故障，而其他组件还在运行。</li></ul><p>分布式系统能够实现高可用、高吞吐、大容量存储、海量计算、并行计算等优异能力，天然的分布性和可伸缩等特性，也打破了物理上单机的瓶颈，使其能不断支撑着业务的发展而演进，并推进了云计算、大数据、人工智能等领域的发展。但是正如每个硬币都有两面，分布式系统的复杂性，也使其在设计、研发、运行、维护、安全性等方面都面临更多的挑战。</p><h2 id="2-分布式理论"><a href="#2-分布式理论" class="headerlink" title="2-分布式理论"></a>2-分布式理论</h2><h3 id="2-1-CAP理论"><a href="#2-1-CAP理论" class="headerlink" title="2.1-CAP理论"></a>2.1-CAP理论</h3><p>CAP理论又称CAP定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p><p><img src="/2020/01/16/fen-bu-shi-jia-gou-ji-chu/CAP.png" alt="CAP"></p><p><strong>归纳如下：</strong></p><ul><li>一致性（<strong>Consistency</strong>）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。等同于所有节点访问同一份最新的数据副本；集群中<strong>所有节点的数据</strong>，<strong>时刻</strong>保持一致。</li><li>可用性（<strong>Availability</strong>）：每一个请求，都一定能够收到一个响应，无论响应成功还是失败。在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求，对数据更新具备高可用性。</li><li>可扩展性/<strong>分区容忍性</strong>（<strong>Partition-tolerance</strong>）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</li></ul><p>CAP原理告诉我们，这三个因素最多只能满足两个，不可能三者兼顾。对于分布式系统来说，分区容错是基本要求，所以必然要放弃一致性。对于大型网站来说，分区容错和可用性的要求更高，所以一般都会选择适当放弃一致性。对应CAP理论，NoSQL追求的是AP，而传统数据库追求的是CA，这也可以解释为什么传统数据库的扩展能力有限的原因。</p><p>也就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡。</p><p>任何一个分布式系统，都不能够同时满足一致性，可用性，分区容错性。</p><p><strong>所以在分布式系统可供选择的方案有三种：</strong></p><ul><li>CP：选择了数据一致性和分区容错性，放弃了可用性。一旦发生网络分区，受影响的服务就需要等待数据一致，因此在等待期间无法对外继续提供服务。</li><li>AP：选择了可用性和分区容错性，放弃了数据（强）一致性。</li><li>CA：放弃分区容错性，加强一致性和可用性，其实就是传统的单机数据库的选择。</li></ul><p><strong>原因：</strong></p><ul><li>CA满足的情况下，P不能满足的原因：<pre><code>    数据同步(C)需要时间，也要正常的时间内响应(A)，那么机器数量就要少，所以P就不满足</code></pre></li><li>CP 满足的情况下，A不能满足的原因：<pre><code>    数据同步(C)需要时间, 机器数量也多(P)，但是同步数据需要时间，所以不能再正常时间内响应，所以A就不满足</code></pre></li><li>AP 满足的情况下，C不能满足的原因：<pre><code>    机器数量也多(P)，正常的时间内响应(A)，那么数据就不能及时同步到其他节点，所以C不满足</code></pre></li></ul><p><strong>微服务注册中心的选择：</strong></p><ul><li>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足。如金融行业</li><li>Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点可以使用，去中心化。如电商系统</li></ul><h3 id="2-2-BASE理论"><a href="#2-2-BASE理论" class="headerlink" title="2.2-BASE理论"></a>2.2-BASE理论</h3><p>BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。</p><p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p><p>基于CAP理论，CAP理论不适用于数据库事务（因为更新一些错误的数据而导致数据出现紊乱，无论什么样的数据库高可用方案都是徒劳） ，虽然XA事务可以保证数据库在分布式系统下的ACID特性，但是会带来性能方面的影响。</p><ul><li>基本可用（Basically available）：在分布式系统出现不可预知的故障时，损失系统部分可用性。<ul><li>响应时间上的损失。正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒。</li><li>系统功能上的损失：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。</li><li>数据库采用分片模式，把100万用户数据分布在5个实例上，其中一个实例故障了，仍然可以保证80%的可用用户数据。</li></ul></li><li>软状态（Soft-state）：什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种 “硬状态”。软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li><li>最终一致性（Eventually-consistent）：最终一致性强调的是所有的数据副本，在经过一段时间的同步之后，最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</li></ul><p><strong>ACID和BASE的区别与联系</strong>：</p><p>ACID是传统数据库常用的设计理念，追求强一致性模型。BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性，ACID和BASE代表了两种截然相反的设计哲学。</p><p>ACID 是传统数据库系统常用的设计理论，追求强一致性模型。BASE 常用于大型分布式系统，只需要保证最终一致性。在实际的分布式场景中，不同业务单元和组件对一致性的要求是不同的，因此 ACID 和 BASE 往往会结合在一起使用。</p><h2 id="3-分布式系统的主要组成"><a href="#3-分布式系统的主要组成" class="headerlink" title="3-分布式系统的主要组成"></a>3-分布式系统的主要组成</h2><h3 id="3-1-分布式服务"><a href="#3-1-分布式服务" class="headerlink" title="3.1-分布式服务"></a>3.1-分布式服务</h3><p>分布式系统下节点间服务通讯有两种途径，一种是通过 RPC(Remote Procedure Call) 实现两点间通讯，可以设计成同步通讯，也可以是异步的；一种是通过消息中间件实现通信，一般是异步通讯方式。</p><ul><li><p>RPC 调用</p><p>RPC 调用也是分布式环境下常见的通讯方式，有同步的模式，也有异步的模式。同步模式下，客户端发起调用并阻塞当前线程，直到服务端处理完毕返回响应才完成整个调用过程；异步模式下，客户端发起调用后立即返回，并记录当前请求，直到接收到服务端响应后才找到对应的请求进行结果的处理，并完成整个调用过程。</p><p>RPC 调用中一般只有两个角色：客户端和服务端，但在分布式环境下服务端可能有多台机器，他们共同组成一个集群，每台都提供一样的服务。这时就要有一种机制能让客户端将持续不断的请求均衡的分发到所有的服务端，一般将这种机制称为「负载均衡」。负载均衡可以在客户端实现，也可以通过专门的负载均衡设备实现。如果采用客户端负载均衡方案，需要让客户端感知所有服务端的机器地址和端口，需要引入一套「服务发现和集成的体系」，好处是通讯是点对点的，比较高效，且不存在单点。如果使用专门负载均衡设备，则客户端只需感知负载均衡设备的地址，由它来对接所有服务端，并均衡服务请求，这种模式比较简单，但存在性能单点，且延长了请求链路，稳定性也会受影响。无论是客户端还是专门设备做负载聚合，都可以根据不同的场景采用适合的负载均衡策略，常见的策略有随机（Random）、轮询（RoundRobin）、最快连接数（Fastest Connection）、最小连接数（Least Connection）等等。</p></li><li><p>消息中间件</p><p>消息中间件一般是独立部署的一组应用程序，负责消息的接收和投递。整个通讯过程是异步的，有消息发布者、消息中间件和消息订阅者三个角色，消息从发布端发出后，会被消息中间件接收并做持久化，消息的消费有两种常见的模式，一种是消息中心主动投递的模式（推模式），一种是订阅者主动拉取的模式（拉模式）。在推模式下，发布者发布消息，消息发到消息中心做持久化，然后被投递到订阅端集群，一般来说会选择在所有订阅者中随机选一台投递，在这种模式下，要求消息订阅者集群的消息消费速度要能跟上发布消息是速度；在拉模式下，消费者根据队列里消息总数来做均分，主动连上消息中间件进行消费，对消费速度没有速度限制，所以一般拉模式的消息中间件会提供更强的消息扛积压能力。</p><p>由于消息被持久化，所以可以做到消息的可靠投递，保证了分布式环境下通讯的可靠达到。在分布式环境下，一个系统可能会在一次事务操作中通过消息的方式去改变其它系统的状态（主要指存储的状态），为了能模拟类似事务的一致性，异步消息可以利用 DB 的持久化来支持事务型消息。事务型消息指的是发布消息的应用系统在本地数据库事务操作序列中发送的消息。此类消息的投递与数据库事务状态保持一致，当事务状态是提交时，消息会被投递到订阅者，当事务状态是回滚时，消息不会被投递到订阅者，这也是分布式环境下消息中间件需要支持的特殊场景。</p></li></ul><h3 id="3-2-分布式数据存储"><a href="#3-2-分布式数据存储" class="headerlink" title="3.2-分布式数据存储"></a>3.2-分布式数据存储</h3><ol><li><p>分布式缓存</p><p>当传统数据库面临大规模数据访问时，磁盘 I/O 能力往往成为性能瓶颈，从而导致过高的响应延迟，而比较常用的提升性能的手段，是在应用和数据库之间加入一层分布式缓存来提升数据访问性能，分布式缓存将高速内存作为数据对象的存储介质，理想情况下可以获得内存级的读写性能，常见的缓存实现会通过 LRU 算法来缓存访问最多的数据，进而提升缓存效率。</p><p>通过分布式缓存服务器集群，将缓存数据分布到集群多台服务器上可在一定程度上改善缓存的可用性，同时也能起到扩展缓存容量的作用，当一台缓存服务器宕机的时候，只有部分缓存数据丢失，重新从数据库加载这部分数据不会对数据库产生很大影响。</p><p>分布式缓存还具有支持弹性扩展的能力，通过动态增加或减少节点，应对变化的数据访问负载，提供可预测的性能与扩展性，同时也能最大限度地提高资源利用率</p><p>分布式缓存比较典型应用场景包括：</p><p><strong>应用对象缓存</strong>：缓存系统作为 ORM 框架的二级缓存对外提供服务，目的是减轻数据库的负载压力，加速应用访问;</p><p><strong>状态缓存</strong>：缓存包括 Session 会话状态及应用横向扩展时的状态数据等，这类数据一般是难以恢复的，对可用性要求较高，多应用于高用集群;</p><p><strong>并行处理</strong>：通常涉及大量中间计算结果需要共享;</p><p><strong>事件处理</strong>：分布式缓存提供了针对事件流的连续查询 (continuous query) 处理技术，满足实时性需求;</p><p><strong>极限事务处理</strong>：分布式缓存为事务型应用提供高吞吐率、低延时的解决方案，支持高并发事务请求处理，多应用于铁路、金融服务和电等领域。</p><p>通过配置合理容量的分布式缓存，能在提升应用数据访问性能的同时，降低总体拥有成本，因此架构设计上做到合理利用缓存，变得就越来越重要。</p></li><li><p>分布式文件系统</p><p>分布式文件系统，是指允许文件通过网络在多台计算机中分散存储的共享文件系统，它通过网络将分布在不同区域的多台计算机连接在一起从而组合成容量更大，处理能力更强的分布式文件存储系统。分布式文件系统很好的解决单台计算机存储和处理能力存在上限的问题，具备大的存储容量和处理能力的扩展能力。</p><p>在分布式文件系统中，客户端并非直接访问底层存储，而是通过网络以特定的通信协议和服务器沟通，进而完成文件存储操作，借由通信协议的设计，可以让客户端和服务器端都能根据访问控制清单或是授权，来限制对于文件系统的访问。由于分布式文件系统的网络接入特性，使得不同用户都能通过网络接入分布式文件系统，实现文件数据的共享，从用户角度看，分布式文件系统与单机文件系统看到的视图是一样的，使用方式也相同。</p><p>分布式文件系统除了能提供比单机文件系统更大的存储容量和处理能力外，通过数据复制与容错，也拥有了本地文件系统所无法具备的数据备份、数据安全等优点，也就是说，即使系统中有一小部分的节点脱机，整体来说系统仍然可以持续运作而不会有数据损失。</p></li><li><p>分布式数据库</p><p>随着数据量的高速增长，分布式数据库技术也得到了快速的发展，传统的关系型数据库开始从集中式模型向分布式架构发展。分布式数据库是指利用高速计算机网络将物理上分散的多个数据存储单元连接起来组成一个逻辑上统一的数据库。分布式数据库的基本思想是将原来集中式数据库中的数据分散存储到多个通过网络连接的数据存储节点上，以获取更大的存储容量和更高的并发访问量。</p><p>分布式数据库可以按需增加、减少数据库处理节点，很好地解决了单台数据库的存储和处理能力上限问题；除此之外，分布式数据库往往具备较强的容错能力，通过数据复制、副本冗余，当某个处理节点出现故障时，能够自动恢复，对使用者没有感知。最后，分布式数据库底层采用廉价服务器，相比传统单机数据库使用的高端服务器和高端存储，成本大幅度降低。</p><p>在分布式数据库中，客户端并非直接访问底层的存储系统，而是使用结构化查询语言（SQL语言）访问数据库节点，再由数据库节点的 SQL 引擎翻译成针对底层存储系统的操作。一套分布式数据库往往会服务多个业务，分布式数据库内部支持多个业务之间的隔离，当某个业务出现异常时，只会影响该业务，不会对其它业务造成影响。蚂蚁的 OceanBase 是一个典型的分布式数据库。使用分布式数据库，将大大降低单库故障的发生机率，并简化单库故障的恢复机制。再结合分布式数据中间件在业务维度数据分片和路由、数据源动态调整、应用层高可用容灾、异构数据源适配等能力，将能很好的实现分布式环境下 DB 的高性能访问和高可用。</p></li><li><p>分布式数据中间件</p><p>关系型数据库是经典的持久化解决方案，但在海量业务场景下也会遇到单表的容量瓶颈和单库的性能瓶颈。按照分布式的思想，数据也要拆分，让集中在单点的读写访问分布到多个 DB 服务器上，从而获得容量和性能上的弹性延伸能力。根据业务场景可分为垂直拆分（按业务）、水平拆分（按请求/用户做哈希，或者做区间拆分）、读写拆分等。</p><p>按照垂直拆分后的数据会造成本来单库事务变成跨库事务，很难通过传统数据库的机制来保证 ACID，需要引入一种应用层的，基于服务的事务协调机制。这个下文会有专门阐述。按照水平拆分的数据，需要按照某些业务维度将数据拆分到不同的库表，从而解决数据水平扩展的问题，也提升了整体的 QPS，使数据层具备 TB+/天 的吞吐能力。数据拆分后，每次数据访问需要按照分库分表的规则进行路由，本质上是通过规则对原始 SQL 进行重写，拆分成多条 SQL，并分发给链接多个库的数据源去执行，并汇总结果。由于整个过程都在应用层进行，为屏蔽复杂性，需要将上述逻辑封装一层中间件类库中，并通过标准 JDBC 接口对外暴露接口，让业务透明的完成整个数据库的访问过程。</p><p>通过一层统一的分布式数据中间件，让业务通过标准 SQL 和标准 JDBC 接口就能访问一组理论容量「无限大」的关系型数据库集群，并且具有很好的性能。同时，通过这层中间件，也能实现所有数据库参数的动态调整、路由规则动态调整、数据库分片权重的调整，从而在应用层实现数据库访问的高可用，且不依赖于数据库高可用机制，甚至提供更灵活强大的故障容忍能力。此外，标准 SQL 和 JDBC 屏蔽了底层数据库的实现，使应用具备透明对接异构数据源的能力，实现复杂场景的业务访问和一些双写双读的需求。</p></li></ol><h3 id="3-3-分布式事务"><a href="#3-3-分布式事务" class="headerlink" title="3.3-分布式事务"></a>3.3-分布式事务</h3><p>传统关系型数据库的事务模型必须遵守 ACID 原则。在单数据库模式下，ACID 模型能有效保障数据的完整性，但是在大规模分布式环境下，单库无法承载高并发和海量数据，所以数据会被通过垂直拆分或水平拆分到不同的 DB 中，一个业务往往会跨越多个数据库。在 JavaEE 规范中使用 2PC (2 Phase Commit, 两阶段提交) 来处理跨 DB 环境下的事务问题，但是 2PC 是反可伸缩模式，也就是说，在事务处理过程中，参与者需要一直持有资源直到整个分布式事务结束。这样，当业务规模达到千万级以上时，2PC 的局限性就越来越明显，系统可伸缩性会变得很差。基于 BASE 的思想可以仿照 2PC 的方式，在应用层来实现分布式环境下多个事务协调一致。 在充分保障分布式环境下高可用性、高可靠性的同时兼顾数据一致性的要求，其最大的特点是保证数据最终一致 (Eventually consistent)。</p><p>在分布式事务中，可以简单分成事务发起方和事务参与者两个角色。发起方负责启动分布式事务，触发创建主事务记录。发起方是分布式事务的总体协调者，负责调用参与者的服务，记录相应的事务日志，并感知整个分布式事务状态来决定整个事务是 COMMIT 还是 ROLLBACK。参与者是分布式事务中的一个原子单位，所有参与者都必须定义 prepare、commit、rollback 3个基本接口，并保证其业务数据的幂等性，也必须保证 prepare 中的数据操作能够被提交 (COMMIT) 或者回滚 (ROLLBACK)。</p><p>整个协调过程从发起方开启一个本地事务开始，过程中参与者会显式调用参与方的业务方法，这些显式调用的方法即为一阶段的 prepare 方法，一般参与方会在该方法内锁定资源。这些方法调用可以采用第一小节提到的「消息中间件」，也可以采用「RPC 通讯」。一旦这次本地事务成功，则本地事务提交，发起方会调用第二阶段的真正 commit 方法，来让所有参与方的事务完成第二阶段的提交。本地事务提交失败或者在这之前某个逻辑中失败（可能是本地逻辑异常，也可能参与方一阶段失败），则本地事务失败，发起方会负责完成一阶段的所有回滚操作，避免出现不一致情况。</p><p>在分布式环境下，单点故障是个常态，所以无论是发起方还是参与方都可能在任何一刻不可用，此时需要一个第三方的恢复系统来感知所有的事务状态，并通过定期轮询来发现异常状态的事务记录，并将其恢复至最终一致。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试之Junit</title>
      <link href="/2020/01/15/dan-yuan-ce-shi-zhi-junit/"/>
      <url>/2020/01/15/dan-yuan-ce-shi-zhi-junit/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit5单元测试"><a href="#Junit5单元测试" class="headerlink" title="Junit5单元测试"></a>Junit5单元测试</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1-前言"></a>1-前言</h2><p>单元测试是软件开发过程中必不可少的一环，但是在平常开发中往往因为项目周期紧，工作量大而被忽略，这样往往导致软件问题层出不穷。线上出现不少问题其实在右单元测试的情况下就可以及时发现和处理，因此培养自己在日常开发中写单元测试的能力是很有必要的，无论是对自己编码能力的提高，还是项目质量的提升，都大有帮助。</p><h2 id="2-认识Junit5"><a href="#2-认识Junit5" class="headerlink" title="2-认识Junit5"></a>2-认识Junit5</h2><p>在java单元测试领域中，<code>Junit</code>和<code>TestNG</code>占据着主要的市场，其中Junit有着就爱哦长的发展历史和不断演进的丰富功能，备受大多数Java开发者的青睐。</p><p>而<code>Junit5</code>版本是Junit单元测试框架的一次重大升级，要完全使用<code>Junit5</code>的功能，就必须使用<code>JDK8</code>以上的环境。</p><p>与以前版本不同的是Junit5是由三个不同子项目的几个不同模块组成：</p><p><code>Junit 5 = Junit Platform + Junit Jupiter + Junit Vintage</code></p><ul><li>Junit Platform：用于JVM上启动测试框架的基础服务，提供命令行，IDE和构建工具等方式执行测试的支持，并通过命令行定义TestEngine API；</li><li>Junit Jupiter：用于编写测试和扩展编程的扩展模型，然后通过插件在Junit、Gradle或Maven中来构建；</li><li>Junit Vintage：用于在Junit 5中兼容运行Junit3.x和Junit4.x的测试用例；</li></ul><h2 id="3-为什么需要Junit-5？"><a href="#3-为什么需要Junit-5？" class="headerlink" title="3-为什么需要Junit 5？"></a>3-为什么需要Junit 5？</h2><p>自从有了Junit之类的测试框架，Java单元测试领域逐渐成熟，开发人员对单元测试框架也有了更高的要求：</p><p>​    如：更多的测试方法、更少的其他库依赖；</p><p>因此大家都期待着一个更强大的测试框架诞生，Junit作为Java测试领域的领头羊，推出了Junit 5这个版本；</p><p>主要特性有：</p><ul><li>提供全新的断言和测试注解，支持测试类内嵌，允许在断言中使用Lambda表达式</li><li>更丰富的测试方法：支持动态测试，重复测试，参数化测试等</li><li>实现了模块化，让测试执行和测试发现等不同模块解耦，减少依赖</li><li>提供对Java8的支持，如Lambda表达式，Stream API等</li></ul><p><img src="/2020/01/15/dan-yuan-ce-shi-zhi-junit/junit.png" alt="Junit5"></p><h2 id="4-如何使用Junit-5"><a href="#4-如何使用Junit-5" class="headerlink" title="4-如何使用Junit 5"></a>4-如何使用Junit 5</h2><ol><li><p>首先需要添加Junit 5的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${junit.jupiter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>定义测试方法</p><table><thead><tr><th>import org.junit.jupiter.api.*（注解）</th><th>描述</th></tr></thead><tbody><tr><td>@Test</td><td>将方法标识为测试方法</td></tr><tr><td>@RepeatedTest（<Number>）</Number></td><td>重复测试<Number>次</Number></td></tr><tr><td>@TestFactory</td><td>方法是进行动态测试的工厂</td></tr><tr><td>@BeforeEach</td><td>在每次测试之前执行，它用于准备测试环境（如：读取输入数据，初始化类）</td></tr><tr><td>@AfterEach</td><td>在每次测试后执行，它用于清理测试环境（如：删除临时数据，恢复默认值），它还可以通过清理昂贵的内存结构来节省内存</td></tr><tr><td>@BeforeAll</td><td>在所有测试开始前执行一次，它用于执行耗时的活动，例如：连接到数据库；需要标记带有此批注的方法<code>static</code>才能与Junit一起使用</td></tr><tr><td>@AfterAll</td><td>在完成所有测试之后，执行一次，它用于执行清理活动，例如：与数据库断开连接；需要定义此注解的方法static以便与Junit一起使用</td></tr><tr><td>@Nested</td><td>使得可以嵌套内部测试类以强制执行一定的执行顺序，能够以静态内部类的形式对测试用例类进行逻辑分组</td></tr><tr><td>@Tag(“<TagName>“)</TagName></td><td>Junit 5中的测试可以通过标签过滤；例如：仅运行标签为“快速”的测试方法</td></tr><tr><td>@ExtendWith</td><td>可以让你注册一个或多个扩展点集成的扩展类</td></tr><tr><td>@Disabled（@Disabled（“WhyDisabled”））</td><td>指示应该禁用测试，当基础代码已更改且测试用例尚未适用时，这很有用；或者如果侧测试的执行时间太长而无法包括在内；最佳的做法是提供可选说明，说明为什么禁用测试</td></tr><tr><td>@DisplayName（”<Name>“）</Name></td><td>&lt;名称&gt;，将由测试运行器显示，与方法名称相反，DisplayName可以包含空格</td></tr></tbody></table></li><li><p>断言</p><p>在断言API设计上，Junit 5进行显著的改进，并且充分利用Java 8的新特性，特别是Lambda表达式，最终提供了新的断言类</p><p><code>org.junit.jupiter.api.Assertions</code>；许多断言方法接收Lambda表达式参数，在断言消息使用Lambda表达式的一个优点就是踏实延迟计算的，如果消息构造开销很大，这样做一定程度上可以节省时间和资源。</p><ul><li><code>assertAll</code>：断言所有提供的可执行文件都不会抛出异常。若提供的标题(heading),其将包含在MultipleFailuresError的消息字符串中。</li><li><code>assertArrayEquals</code>：断言期望的和实际的XX类型数组是相等的。若失败，将显示提供的失败消息。</li><li><code>assertDoesNotThrow</code>：虽然从测试方法抛出的任何异常都会导致测试失败，但在某些用例中，显式断言测试方法中的给定代码块不会抛出异常会很有用。若提供的标题(heading),其将包含在MultipleFailuresError的消息字符串中。</li><li><code>assertEquals</code>：断言预期和实际是相等的。如有必要，将从提供的messageSupplier中懒惰地检索失败消息。</li><li><code>assertFalse</code>：断言提供的条件不是真。失败并显示提供的失败消息。</li><li><code>assertIterableEquals</code>：断言预期和实际的迭代是完全相同的。类似于检查assertArrayEquals(Object []，Object []，String)中的完全相等，如果遇到两个迭代(包括期望和实际)，则它们的迭代器必须以相同的顺序返回相等的元素。注意：这意味着迭代器不需要是同一类型。</li><li><code>assertNotNull</code>：断言提供的条件不为null</li><li><code>assertNotSame</code>：断言预期和实际不会引用同一个对象</li><li><code>assertNull</code>：断言提供的实际为null</li><li><code>assertSame</code>：断言预期和实际引用同一个对象</li><li><code>assertThrows</code>：断言所提供的可执行代码块的执行会引发expectedType的异常并返回异常。如果没有抛出异常，或者抛出了不同类型的异常，则此方法将失败。如果不想对异常实例执行其他检查，只需忽略返回值。</li><li><code>assertTimeout</code>：断言在超出给定超时之前，所提供的可执行代码块的执行完成。注意：可执行代码块将在与调用代码相同的线程中执行。因此，如果超过超时，则不会抢先中止执行可执行代码块。</li><li><code>assertTimeoutPreemptively</code>：断言在超出给定超时之前，所提供的可执行代码块的执行完成。注意：可执行代码块将在与调用代码不同的线程中执行。此外，如果超过超时，则可抢占地执行可执行代码块。</li><li><code>assertTrue</code>：断言提供的条件为true</li><li><code>fail</code>：使用给定的失败消息以及根本原因进行测试失败。泛型返回类型V允许此方法直接用作单语句lambda表达式，从而避免需要实现具有显式返回值的代码块。 由于此方法在其return语句之前抛出AssertionFailedError，因此该方法实际上永远不会向其调用者返回值。</li></ul></li><li><p>测试方法案例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"我的第一个测试用例"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstTestCaseTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterAll</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清理数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@BeforeEach</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前测试方法开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterEach</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前测试方法结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"我的第一个测试"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testFirstTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的第一个测试开始测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"我的第二个测试"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSecondTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的第二个测试开始测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果如下：</p><p><img src="/2020/01/15/dan-yuan-ce-shi-zhi-junit/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95.jpg" alt="第一个测试"></p></li></ol><p>   <strong>禁用测试方法：</strong><code>@Disabled</code></p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"我的第三个测试"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Disabled</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">testThirdTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的第三个测试开始测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>   测试结果如下：</p><p>   <img src="/2020/01/15/dan-yuan-ce-shi-zhi-junit/%E7%A6%81%E7%94%A8%E6%B5%8B%E8%AF%95.png" alt="禁用测试"></p><p>   <code>@Disabled</code> 也可以使用在类上，用于标记类下所有的测试方法不被执行，一般使用对多个测试类组合测试的时候。</p><p>   <strong>内嵌测试类：</strong><code>@Nested</code></p><p>   当我们编写的类和代码逐渐增多，随之而来的需要测试的对应测试类也会越来越多。为了解决测试类数量爆炸的问题，JUnit 5提供了@Nested 注解，能够以静态内部成员类的形式对测试用例类进行逻辑分组。 并且每个静态内部类都可以有自己的生命周期方法， 这些方法将按从外到内层次顺序执行。 此外，嵌套的类也可以用<code>@DisplayName</code> 标记，这样我们就可以使用正确的测试名称。</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"内嵌测试类"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestUnitTest</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@BeforeEach</span>       <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法执行前准备"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Nested</span>       <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"第一个内嵌测试类"</span><span class="token punctuation">)</span>       <span class="token keyword">class</span> <span class="token class-name">FirstNestTest</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Test</span>           <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个内嵌测试类执行测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Nested</span>       <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"第二个内嵌测试类"</span><span class="token punctuation">)</span>       <span class="token keyword">class</span> <span class="token class-name">SecondNestTest</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Test</span>           <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个内嵌测试类执行测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>   测试结果如下：</p><p>   <img src="/2020/01/15/dan-yuan-ce-shi-zhi-junit/%E5%86%85%E5%B5%8C%E6%B5%8B%E8%AF%95%E7%B1%BB.png" alt="内嵌测试类"></p><p>   <strong>重复性测试：</strong><code>@RepeatedTest</code><br>   在 JUnit 5 里新增了对测试方法设置运行次数的支持，允许让测试方法进行重复运行。当要运行一个测试方法 N次时，可以使用 @RepeatedTest 标记它</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"重复测试"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@RepeatedTest</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">i_am_a_repeated_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>   测试结果如下：</p><p>   <img src="/2020/01/15/dan-yuan-ce-shi-zhi-junit/%E9%87%8D%E5%A4%8D%E6%B5%8B%E8%AF%95.png" alt="重复测试"></p><ol start="5"><li><p>断言案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AssertionsDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个person对象，Person类里面有两个参数lastName,firstName</span>    <span class="token keyword">static</span> Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用 @BeforeAll注解在所有测试方法执行前执行person对象的赋值     */</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        person<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertEquals比较两个值是否相同     * assertTrue 判断括号里面的参数是否为true     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">standardAssertions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当不相等时，会打印出第三个参数，下面的所有的此类型的参数都是这种作用</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"The optional assertion message is now the last parameter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&lt;</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"Assertion messages can be lazily evaluated -- "</span>                <span class="token operator">+</span> <span class="token string">"to avoid constructing complex messages unnecessarily."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertAll()方法用于将多个测试语句放在一个组中执行     * 组中若有一个测试语句不通过，则这个组将会一起报错.     * 方法中第一个参数：组名称     * 方法中第二个参数：组测试语句     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">groupedAssertions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Doe"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertAll()方法也可以嵌套多个assertAll()方法     * 其中嵌套的多个测试组，这些组只会打印出这个组和父组的错误，对其他的组没有影响     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">dependentAssertions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//第一个测试组</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    String firstName <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">"first name"</span><span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>firstName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>firstName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//第二个测试组</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    String lastName <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">"last name"</span><span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>lastName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>lastName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertThrows()可以用来判断lambda表达式中的代码抛出的异常     * 比如下面案例就是测试了抛出异常的信息是否相同     * 参数：     * 1：异常类声明     * 2：测试代码Lambda表达式     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">exceptionTesting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable exception <span class="token operator">=</span> <span class="token function">assertThrows</span><span class="token punctuation">(</span>IllegalArgumentException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里只是简单的做个测试，当然1/0不该抛IllegalArgumentException异常 ，只是简单的测试一下</span>              <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"a message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"a message"</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertTimeout()对方法执行时间进行测试     * 这里要借助java.time.Duration中的方法结合实现     * 实例中执行的代码部分必须在2分钟之内执行完毕，否则测试不通过     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">timeoutNotExceeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertTimeout</span><span class="token punctuation">(</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//执行的代码部分</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertTimeout()还可以接受一个返回值（泛型 T）     * 被测试代码如果通过测试并返回一个值，这个值被assertTimeout()方法返回     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">timeoutNotExceededWithResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String actualResult <span class="token operator">=</span> <span class="token function">assertTimeout</span><span class="token punctuation">(</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"a result"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"a result"</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * assertTimeout（）毫秒案例     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">timeoutExceeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertTimeout</span><span class="token punctuation">(</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="6-Junit参数化测试"><a href="#6-Junit参数化测试" class="headerlink" title="6-Junit参数化测试"></a>6-Junit参数化测试</h2><ul><li><p><code>@ValueSource</code>——最简单的数据参数源，通过注解可以直接指定携带的运行参数，支持 Java 的八大基本类型和字符串，Class，使用时赋值给注解上对应类型属性，以数组方式传递。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueSourcesExampleTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testNumberShouldBeEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Radar"</span><span class="token punctuation">,</span> <span class="token string">"Rotor"</span><span class="token punctuation">,</span> <span class="token string">"Tenet"</span><span class="token punctuation">,</span> <span class="token string">"Madam"</span><span class="token punctuation">,</span> <span class="token string">"Racecar"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testStringShouldBePalindrome</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>doubles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">.</span>D<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span>D<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">.</span>D<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testDoubleNumberBeEven</span><span class="token punctuation">(</span><span class="token keyword">double</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running qiucao.learning.ParaTest[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.155 s - in qiucao.learning.ParaTest[INFO][INFO] Results:[INFO][INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0</code></pre></li><li><p><code>@EnumSource</code>——枚举参数源，允许我们通过将参数值由给定Enum枚举类型传入。并可以通过制定约束条件或正则匹配来筛选传入参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSourcesExampleTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@ParameterizedTest</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"[{index}] TimeUnit: {arguments}"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@EnumSource</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testTimeUnitMinimumNanos</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>2000000L<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@EnumSource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"SECONDS"</span><span class="token punctuation">,</span> <span class="token string">"MINUTES"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testTimeUnitJustSecondsAndMinutes</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>EnumSet<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span>EnumSet        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">,</span>            TimeUnit<span class="token punctuation">.</span>MICROSECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@EnumSource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> Mode<span class="token punctuation">.</span>EXCLUDE<span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"SECONDS"</span><span class="token punctuation">,</span> <span class="token string">"MINUTES"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testTimeUnitExcludingSecondsAndMinutes</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span>EnumSet<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>EnumSet        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">,</span>            TimeUnit<span class="token punctuation">.</span>MICROSECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@EnumSource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> Mode<span class="token punctuation">.</span>MATCH_ALL<span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token string">".*SECONDS"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testTimeUnitIncludingAllTypesOfSecond</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span>EnumSet<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>EnumSet        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">,</span>            TimeUnit<span class="token punctuation">.</span>MICROSECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running qiucao.learning.ParaTest[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.206 s - in qiucao.learning.ParaTest[INFO][INFO] Results:[INFO][INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0</code></pre></li><li><p><code>@MethodSource</code>——通过其他的Java方法函数来作为参数源。引用的方法返回值必须是Stream, Iterator 或者Iterable，指定一个返回的 Stream / Array / 可迭代对象 的方法作为数据源。 需要注意的是该方法必须是静态的，并且不能接受任何参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodSourceExampleTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"stringGenerator"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">shouldNotBeNullString</span><span class="token punctuation">(</span>String arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"intGenerator"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">shouldBeNumberWithinRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">assertAll</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>arg <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span>arg <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"[{index}] user with id: {0} and name: {1}"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"userGenerator"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">shouldUserWithIdAndName</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">stringGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"let's"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> IntStream <span class="token function">intGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>Arguments<span class="token operator">></span> <span class="token function">userGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Arguments<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"Sally"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arguments<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"Terry"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arguments<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running qiucao.learning.ParaTest[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.191 s - in qiucao.learning.ParaTest[INFO][INFO] Results:[INFO][INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0</code></pre></li><li><p><code>@ArgumentsSource</code>——通过实现 ArgumentsProvider 接口的参数类来作为数据源，重写它的 <code>provideArguments</code> 方法可以返回自定义类型的 Stream<Arguments> ，作为测试方法所需要的数据使用。</Arguments></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgumentsSourceExampleTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span>CustomArgumentsGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testGeneratedArguments</span><span class="token punctuation">(</span><span class="token keyword">double</span> number<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">.</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomArgumentsGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">ArgumentsProvider</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Stream<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Arguments</span><span class="token operator">></span> <span class="token function">provideArguments</span><span class="token punctuation">(</span>ExtensionContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arguments<span class="token operator">:</span><span class="token operator">:</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>@CsvSource</code>——通过 @CsvSource 可以注入指定 CSV 格式 (comma-separated-values) 的一组数据，用每个逗号分隔的值来匹配一个测试方法对应的参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CsvSourceExampleTest</span> <span class="token punctuation">{</span>  Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> idToUsername <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    idToUsername<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"Selma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    idToUsername<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"Lisa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    idToUsername<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span> <span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@CsvSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"1,Selma"</span><span class="token punctuation">,</span> <span class="token string">"2,Lisa"</span><span class="token punctuation">,</span> <span class="token string">"3,Tim"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testUsersFromCsv</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>idToUsername<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>idToUsername<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running qiucao.learning.ParaTest[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.164 s - in qiucao.learning.ParaTest[INFO][INFO] Results:[INFO][INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0</code></pre></li><li><p><code>@CsvFileSource</code>——除了使用csv参数源，这里也支持使用csv文件作为参数源</p><p>假设users.csv 文件包含如下csv格式的数据：</p><pre class=" language-css"><code class="language-css"><span class="token number">1</span>,Selma<span class="token number">2</span>,Lisa<span class="token number">3</span>,Tim</code></pre><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CsvFileSourceExampleTest</span> <span class="token punctuation">{</span>  Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> idToUsername <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    idToUsername<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"Selma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    idToUsername<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"Lisa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    idToUsername<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span> <span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ParameterizedTest</span>  <span class="token annotation punctuation">@CsvFileSource</span><span class="token punctuation">(</span>resources <span class="token operator">=</span> <span class="token string">"/users.csv"</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">testUsersFromCsv</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>idToUsername<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>idToUsername<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running qiucao.learning.ParaTest[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.199 s - in qiucao.learning.ParaTest[INFO][INFO] Results:[INFO][INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Junit </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular学习笔记</title>
      <link href="/2020/01/15/angular-xue-xi-bi-ji/"/>
      <url>/2020/01/15/angular-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Angular学习笔记"><a href="#Angular学习笔记" class="headerlink" title="Angular学习笔记"></a>Angular学习笔记</h1><h1 id="1-Angular入门"><a href="#1-Angular入门" class="headerlink" title="1-Angular入门"></a>1-Angular入门</h1><h2 id="1-1-开发环境的搭建"><a href="#1-1-开发环境的搭建" class="headerlink" title="1.1-开发环境的搭建"></a>1.1-开发环境的搭建</h2><ol><li><p>安装最新版本的NodeJS</p><p>具体安装教程可参照 <a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhouyu2017/p/6485265.html</a></p></li><li><p>设置镜像</p><p>在命令窗口中进行操作：</p><p>或者设置淘宝镜像：<code>npm config set registry https://registry.npm.taobao.org/</code></p><p>查看镜像地址：<code>npm config get registry</code></p></li><li><p>安装Angular Cli</p><p>安装脚手架工具：<code>npm install -g @angular/cli</code></p><p>如果npm安装脚手架工具失败，可先安装cnpm淘宝镜像 <code>npm install –g cnpm –registry=https：//[registry.npm.taobao.org](http://registry.npm.taobao.org/)</code> </p><p>再使用cnpm安装脚手架工具 <code>cnpm install -g @angular/cli</code></p><p>验证是否安装成功：<code>ng version</code></p></li><li><p>安装Visual Studio Code</p><p>具体安装教程可参照 <a href="https://jingyan.baidu.com/article/59703552b622b78fc007401b.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/59703552b622b78fc007401b.html</a></p><p>安装完成后添加Angular v8 Snippets插件来支持Angular语法;安装Chinese(Simplified) Language Pack for Visual Studio Code插件来汉化Visual Studio Code;安装jslint插件来保持代码风格的一致性。</p><p>插件具体安装教程可参照 <a href="https://jingyan.baidu.com/article/90808022029213fd91c80f15.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/90808022029213fd91c80f15.html</a></p><p>如果网络环境受到限制无法直接安装，可采用离线安装，具体的操作教程可参考：<a href="https://blog.csdn.net/u012814856/article/details/80684376" target="_blank" rel="noopener">https://blog.csdn.net/u012814856/article/details/80684376</a></p></li></ol><h2 id="1-2-新建项目"><a href="#1-2-新建项目" class="headerlink" title="1.2-新建项目"></a>1.2-新建项目</h2><ol><li><p>新建项目</p><p>找到你要创建项目的目录，使用“<code>ng new 项目名称</code>”创建一个Angular项目（如果要创建带路由的项目，则使用“<code>ng new  项目名  --routing</code> ”来创建项目）</p><p>进入刚刚创建的项目的目录下，添加项目依赖：npm install 或 cnpm install</p><p>启动项目<code>ng serve</code> （如果使用代理proxy.conf.json，则使用“npm start”来启动项目,此时需要在package,json中做相关配置<code>：“start” : ”ng serve --proxy-config proxy.conf.json”</code>,）</p></li><li><p>新建组件</p><p>在app目录下新建<code>components</code>文件夹</p><p>新建组件，在命令框中使用命令 <code>“ng g component components/组件名”</code> 创建新组件。创建之后要在<code>app.module.ts</code>中引入该组件</p><p>新建文件夹、各种文件可直接在相应的目录下右击创建</p></li><li><p>使用<code>ng-zorro</code>的组件</p><p>需要安装ng-zorro-antd相关的依赖，具体教程参见 <a href="https://ng.ant.design/docs/getting-started/zh" target="_blank" rel="noopener">https://ng.ant.design/docs/getting-started/zh</a></p></li></ol><h2 id="1-3-常见命令"><a href="#1-3-常见命令" class="headerlink" title="1.3-常见命令"></a>1.3-常见命令</h2><ol><li><p>查看nodejs的版本  <code>node –v</code></p></li><li><p>查看npm的版本   <code>npm –v</code></p></li><li><p>查看Cli脚手架的版本信息 <code>ng version</code></p></li><li><p>设置npm前缀 <code>npm config set prefix &quot;D:\Develop\nodejs\node_global&quot;</code> （具体路径根据实际情况来定）</p></li><li><p>查看npm前缀 <code>npm config get prefix</code></p></li><li><p>设置npm缓存 <code>npm config set cache &quot;D:\Develop\nodejs\node_cache&quot;</code> （具体路径根据实际情况来定）</p></li><li><p>查看npm缓存 <code>npm config get cache</code></p></li><li><p>查看npm配置信息列表  <code>npm config list</code></p></li><li><p>创建一个Angular项目   <code>ng new 项目名称</code></p></li><li><p>创建一个带有路由的Angular项目  <code>ng new 项目名称 --routing</code></p></li><li><p>退出某个目录   cd ..</p></li><li><p>进入某个目录   cd Program Files\Microsoft VS Code\bin （具体路径根据实际情况来定）</p></li><li><p>转换盘符     d： （具体切换到那个盘根据实际情况来定） </p></li><li><p>初始化项目依赖  <code>npm install 或者 cnpm install</code>  </p></li><li><p>创建一个组件   <code>ng g  component components/组件名</code> （components是自己新建的文件夹，可根据实际情况改变）</p></li><li><p>启动项目     <code>ng serve  或   ng serve --open</code></p></li><li><p>使用代理时启动项目 <code>npm start</code></p></li><li><p>自动完成 ng-zorro-antd 的初始化配置  <code>ng  add  ng-zorro-antd</code> </p></li></ol><h2 id="1-4-参考网站"><a href="#1-4-参考网站" class="headerlink" title="1.4-参考网站"></a>1.4-参考网站</h2><p> <a href="https://segmentfault.com/a/1190000008754631" target="_blank" rel="noopener">Angular 4.x 修仙之路</a><a href="https://segmentfault.com/a/1190000008754631" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008754631</a>                                 </p><p>Angular中文官网:<a href="https://angular.cn/" target="_blank" rel="noopener">https://angular.cn/</a>                                                          </p><p>npm install Angular依赖包下载<a href="https://www.npmjs.com/package/package" target="_blank" rel="noopener">https://www.npmjs.com/package/package</a>                                       </p><p>ng zorro网址<a href="https://ng.ant.design/docs/introduce/zh" target="_blank" rel="noopener">https://ng.ant.design/docs/introduce/zh</a>        </p><h1 id="2-Angular基础"><a href="#2-Angular基础" class="headerlink" title="2-Angular基础"></a>2-Angular基础</h1><h2 id="2-1-架构概览"><a href="#2-1-架构概览" class="headerlink" title="2.1-架构概览"></a>2.1-架构概览</h2><p>Angular 是一个用 HTML 和 TypeScript 构建客户端应用的平台与框架。 Angular 本身就是用 TypeScript 写成的。它将核心功能和可选功能作为一组 TypeScript 库进行实现，你可以把它们导入你的应用中。</p><p>Angular 的基本构造块是 <em>NgModule</em>，它为<em>组件</em>提供了编译的上下文环境。 NgModule 会把相关的代码收集到一些功能集中。Angular 应用就是由一组 NgModule 定义出的。 应用至少会有一个用于引导应用的<em>根模块</em>，通常还会有很多<em>特性模块</em>。</p><ul><li>组件定义<em>视图</em>。视图是一组可见的屏幕元素，Angular 可以根据你的程序逻辑和数据来选择和修改它们。 每个应用都至少有一个根组件。</li><li>组件使用<em>服务</em>。服务会提供那些与视图不直接相关的功能。服务提供商可以作为<em>依赖</em>被<em>注入</em>到组件中， 这能让你的代码更加模块化、更加可复用、更加高效。</li></ul><p>组件和服务都是简单的类，这些类使用<em>装饰器</em>来标出它们的类型，并提供元数据以告知 Angular 该如何使用它们。</p><ul><li>组件类的元数据将组件类和一个用来定义视图的<em>模板</em>关联起来。 模板把普通的 HTML 和 Angular <em>指令</em>与<em>绑定标记（markup）</em>组合起来，这样 Angular 就可以在呈现 HTML 之前先修改这些 HTML。</li><li>服务类的元数据提供了一些信息，Angular 要用这些信息来让组件可以通过<em>依赖注入（DI）</em>使用该服务。</li></ul><p>应用的组件通常会定义很多视图，并进行分级组织。 Angular 提供了 <code>Router</code> 服务来帮助你定义视图之间的导航路径。 路由器提供了先进的浏览器内导航功能。</p><h2 id="2-2-基本概念"><a href="#2-2-基本概念" class="headerlink" title="2.2-基本概念"></a>2.2-基本概念</h2><h3 id="2-2-1-模块"><a href="#2-2-1-模块" class="headerlink" title="2.2.1-模块"></a>2.2.1-模块</h3><p>Angular 定义了 <code>NgModule</code>，它和 JavaScript（ES2015） 的模块不同而且有一定的互补性。 NgModule 为一个组件集声明了编译的上下文环境，它专注于某个应用领域、某个工作流或一组紧密相关的能力。 NgModule 可以将其组件和一组相关代码（如服务）关联起来，形成功能单元。</p><p>每个 Angular 应用都有一个<em>根模块</em>，通常命名为 <code>AppModule</code>。根模块提供了用来启动应用的引导机制。 一个应用通常会包含很多功能模块。</p><p>像 JavaScript 模块一样，NgModule 也可以从其它 NgModule 中导入功能，并允许导出它们自己的功能供其它 NgModule 使用。 比如，要在你的应用中使用路由器（Router）服务，就要导入 <code>Router</code> 这个 NgModule。</p><p>把你的代码组织成一些清晰的功能模块，可以帮助管理复杂应用的开发工作并实现可复用性设计。 另外，这项技术还能让你获得<em>惰性加载</em>（也就是按需加载模块）的优点，以尽可能减小启动时需要加载的代码体积。</p><h3 id="2-2-2-组件"><a href="#2-2-2-组件" class="headerlink" title="2.2.2-组件"></a>2.2.2-组件</h3><p>每个 Angular 应用都至少有一个组件，也就是<em>根组件</em>，它会把组件树和页面中的 DOM 连接起来。 每个组件都会定义一个类，其中包含应用的数据和逻辑，并与一个 HTML <em>模板</em>相关联，该模板定义了一个供目标环境下显示的视图。</p><p><code>@Component()</code> 装饰器表明紧随它的那个类是一个组件，并提供模板和该组件专属的元数据。</p><h3 id="2-2-3-模板、指令和数据绑定"><a href="#2-2-3-模板、指令和数据绑定" class="headerlink" title="2.2.3-模板、指令和数据绑定"></a>2.2.3-模板、指令和数据绑定</h3><p>模板会把 HTML 和 Angular 的标记（markup）组合起来，这些标记可以在 HTML 元素显示出来之前修改它们。 模板中的<em>指令</em>会提供程序逻辑，而<em>绑定标记</em>会把你应用中的数据和 DOM 连接在一起。 有两种类型的数据绑定：</p><ul><li><em>事件绑定</em>让你的应用可以通过更新应用的数据来响应目标环境下的用户输入。</li><li><em>属性绑定</em>让你将从应用数据中计算出来的值插入到 HTML 中。</li></ul><p>在视图显示出来之前，Angular 会先根据你的应用数据和逻辑来运行模板中的指令并解析绑定表达式，以修改 HTML 元素和 DOM。 Angular 支持<em>双向数据绑定</em>，这意味着 DOM 中发生的变化（比如用户的选择）同样可以反映回你的程序数据中。</p><p>你的模板也可以用<em>管道</em>转换要显示的值以增强用户体验。比如，可以使用管道来显示适合用户所在地区的日期和货币格式。 Angular 为一些通用的转换提供了预定义管道，你还可以定义自己的管道。</p><h3 id="2-2-4-服务与依赖注入"><a href="#2-2-4-服务与依赖注入" class="headerlink" title="2.2.4-服务与依赖注入"></a>2.2.4-服务与依赖注入</h3><p>对于与特定视图无关并希望跨组件共享的数据或逻辑，可以创建<em>服务</em>类。 服务类的定义通常紧跟在 “@Injectable()” 装饰器之后。该装饰器提供的元数据可以让你的服务作为依赖<em>被注入到</em>客户组件中。</p><p><em>依赖注入</em>（或 DI）让你可以保持组件类的精简和高效。有了 DI，组件就不用从服务器获取数据、验证用户输入或直接把日志写到控制台，而是会把这些任务委托给服务。</p><h3 id="2-2-5-路由"><a href="#2-2-5-路由" class="headerlink" title="2.2.5-路由"></a>2.2.5-路由</h3><p>Angular 的 <code>Router</code> 模块提供了一个服务，它可以让你定义在应用的各个不同状态和视图层次结构之间导航时要使用的路径。 它的工作模型基于人们熟知的浏览器导航约定：</p><ul><li>在地址栏输入 URL，浏览器就会导航到相应的页面。</li><li>在页面中点击链接，浏览器就会导航到一个新页面。</li><li>点击浏览器的前进和后退按钮，浏览器就会在你的浏览历史中向前或向后导航。</li></ul><p>不过路由器会把类似 URL 的路径映射到视图而不是页面。 当用户执行一个动作时（比如点击链接），本应该在浏览器中加载一个新页面，但是路由器拦截了浏览器的这个行为，并显示或隐藏一个视图层次结构。</p><p>如果路由器认为当前的应用状态需要某些特定的功能，而定义此功能的模块尚未加载，路由器就会按需<em>惰性加载</em>此模块。</p><p>路由器会根据你应用中的导航规则和数据状态来拦截 URL。 当用户点击按钮、选择下拉框或收到其它任何来源的输入时，你可以导航到一个新视图。 路由器会在浏览器的历史日志中记录这个动作，所以前进和后退按钮也能正常工作。</p><p>要定义导航规则，你就要把<em>导航路径</em>和你的组件关联起来。 路径（path）使用类似 URL 的语法来和程序数据整合在一起，就像模板语法会把你的视图和程序数据整合起来一样。 然后你就可以用程序逻辑来决定要显示或隐藏哪些视图，以根据你制定的访问规则对用户的输入做出响应。</p><p><strong>注：</strong>这些基础部门之间是如何关联的呢？</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/Angular.png" alt="Angular"></p><ul><li>组件和模板共同定义了 Angular 的视图。<ul><li>组件类上的装饰器为其添加了元数据，其中包括指向相关模板的指针。</li><li>组件模板中的指令和绑定标记会根据程序数据和程序逻辑修改这些视图。</li></ul></li><li>依赖注入器会为组件提供一些服务，比如路由器服务就能让你定义如何在视图之间导航。</li></ul><h2 id="2-3-模块NgModule"><a href="#2-3-模块NgModule" class="headerlink" title="2.3-模块NgModule"></a>2.3-模块NgModule</h2><ol><li><p>NgModule简介</p><p>Angular 应用是模块化的，它拥有自己的模块化系统，称作 <em>NgModule</em>。 一个 NgModule 就是一个容器，用于存放一些内聚的代码块，这些代码块专注于某个应用领域、某个工作流或一组紧密相关的功能。 它可以包含一些组件、服务提供商或其它代码文件，其作用域由包含它们的 NgModule 定义。 它还可以导入一些由其它模块中导出的功能，并导出一些指定的功能供其它 NgModule 使用。</p><p>每个 Angular 应用都至少有一个 NgModule 类，也就是<a href="http://angular-doc.paas.cmbchina.cn/guide/bootstrapping" target="_blank" rel="noopener">根模块</a>，它习惯上命名为 <code>AppModule</code>，并位于一个名叫 <code>app.module.ts</code> 的文件中。<em>引导</em>这个根模块就可以启动你的应用。</p><p>虽然小型的应用可能只有一个 NgModule，不过大多数应用都会有很多<em>特性模块</em>。应用的<em>根模块</em>之所以叫根模块，是因为它可以包含任意深度的层次化子模块。</p></li></ol><ol start="2"><li><p>@NgModule 元数据</p><p>NgModule 是一个带有 <code>@NgModule()</code> 装饰器的类。<code>@NgModule()</code> 装饰器是一个函数，它接受一个元数据对象，该对象的属性用来描述这个模块。其中最重要的属性如下。</p><ul><li><p><code>declarations</code>（可声明对象表） —— 那些属于本 NgModule 的<a href="http://angular-doc.paas.cmbchina.cn/guide/architecture-components" target="_blank" rel="noopener">组件</a>、<em>指令</em>、<em>管道</em>。</p></li><li><p><code>exports</code>（导出表） —— 那些能在其它模块的<em>组件模板</em>中使用的可声明对象的子集。</p></li><li><p><code>imports</code>（导入表） —— 那些导出了<em>本</em>模块中的组件模板所需的类的其它模块。</p></li><li><p><code>providers</code> —— 本模块向全局服务中贡献的那些<a href="http://angular-doc.paas.cmbchina.cn/guide/architecture-services" target="_blank" rel="noopener">服务</a>的创建器。 这些服务能被本应用中的任何部分使用。（你也可以在组件级别指定服务提供商，这通常是首选方式。）</p></li><li><p><code>bootstrap</code> —— 应用的主视图，称为<em>根组件</em>。它是应用中所有其它视图的宿主。只有<em>根模块</em>才应该设置这个 <code>bootstrap</code> 属性。</p></li><li><p>一个简单的根 NgModule 定义：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span>      <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span>      <span class="token punctuation">[</span> BrowserModule <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span>    <span class="token punctuation">[</span> Logger <span class="token punctuation">]</span><span class="token punctuation">,</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token punctuation">:</span>      <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span>    <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre></li></ul></li></ol><ol start="3"><li><p>NgModule 和组件</p><p>NgModule 为其中的组件提供了一个<em>编译上下文环境</em>。根模块总会有一个根组件，并在引导期间创建它。 但是，任何模块都能包含任意数量的其它组件，这些组件可以通过路由器加载，也可以通过模板创建。那些属于这个 NgModule 的组件会共享同一个编译上下文环境。</p><p>组件及其模板共同定义<em>视图</em>。组件还可以包含<em>视图层次结构</em>，它能让你定义任意复杂的屏幕区域，可以将其作为一个整体进行创建、修改和销毁。 一个视图层次结构中可以混合使用由不同 NgModule 中的组件定义的视图。</p></li><li><p>Angular 自带的库</p><p>Angular 会作为一组 JavaScript 模块进行加载，你可以把它们看成库模块。每个 Angular 库的名称都带有 <code>@angular</code> 前缀。 使用 <code>npm</code> 包管理器安装 Angular 的库，并使用 JavaScript 的 <code>import</code> 语句导入其中的各个部分。</p><p>例如，像下面这样，从 <code>@angular/core</code> 库中导入 Angular 的 <code>Component</code> 装饰器</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span></code></pre></li></ol><h2 id="2-4-组件"><a href="#2-4-组件" class="headerlink" title="2.4-组件"></a>2.4-组件</h2><p>组件<em>控制屏幕上被称为</em>视图*的一小片区域。比如，<a href="http://angular-doc.paas.cmbchina.cn/tutorial/index" target="_blank" rel="noopener">教程</a>中的下列视图都是由一个个组件所定义和控制的：</p><ul><li>带有导航链接的应用根组件。</li><li>英雄列表。</li><li>英雄编辑器。</li></ul><p>你在类中定义组件的应用逻辑，为视图提供支持。 组件通过一些由属性和方法组成的 API 与视图交互。</p><p>比如，<code>HeroListComponent</code> 中有一个 名为<code>heroes</code>的属性，它储存着一个数组的英雄数据。 <code>HeroListComponent</code> 还有一个 <code>selectHero()</code> 方法，当用户从列表中选择一个英雄时，它会设置 <code>selectedHero</code> 属性的值。 该组件会从服务获取英雄列表，它是一个 TypeScript 的构造器<a href="http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties" target="_blank" rel="noopener">参数型属性</a>。本服务通过依赖注入系统提供给该组件。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  heroes<span class="token punctuation">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  selectedHero<span class="token punctuation">:</span> Hero<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> service<span class="token punctuation">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">selectHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">:</span> Hero<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedHero <span class="token operator">=</span> hero<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当用户在应用中穿行时，Angular 就会创建、更新、销毁一些组件。 你的应用可以通过一些可选的<a href="http://angular-doc.paas.cmbchina.cn/guide/lifecycle-hooks" target="_blank" rel="noopener">生命周期钩子</a>（比如<code>ngOnInit()</code>）来在每个特定的时机采取行动。</p><ol><li><p>组件的元数据</p><p><code>@Component</code> 装饰器会指出紧随其后的那个类是个组件类，并为其指定元数据。 在下面的范例代码中，你可以看到 <code>HeroListComponent</code> 只是一个普通类，完全没有 Angular 特有的标记或语法。 直到给它加上了 <code>@Component</code> 装饰器，它才变成了组件。</p><p>组件的元数据告诉 Angular 到哪里获取它需要的主要构造块，以创建和展示这个组件及其视图。 具体来说，它把一个<em>模板</em>（无论是直接内联在代码中还是引用的外部文件）和该组件关联起来。 该组件及其模板，共同描述了一个<em>视图</em>。</p><p>除了包含或指向模板之外，<code>@Component</code> 的元数据还会配置要如何在 HTML 中引用该组件，以及该组件需要哪些服务等等。</p><p>下面的例子中就是 <code>HeroListComponent</code> 的基础元数据：</p><pre class=" language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span>    <span class="token string">'app-hero-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./hero-list.component.html'</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span>  <span class="token punctuation">[</span> HeroService <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* . . . */</span><span class="token punctuation">}</span></code></pre><p>这个例子展示了一些最常用的 <code>@Component</code> 配置选项：</p><ul><li><code>selector</code>：是一个 CSS 选择器，它会告诉 Angular，一旦在模板 HTML 中找到了这个选择器对应的标签，就创建并插入该组件的一个实例。 比如，如果应用的 HTML 中包含 ``，Angular 就会在这些标签中插入一个 <code>HeroListComponent</code> 实例的视图。</li><li><code>templateUrl</code>：该组件的 HTML 模板文件相对于这个组件文件的地址。 另外，你还可以用 <code>template</code> 属性的值来提供内联的 HTML 模板。 这个模板定义了该组件的<em>宿主视图</em>。</li><li><code>providers</code>：当前组件所需的服务<a href="http://angular-doc.paas.cmbchina.cn/guide/glossary#provider" target="_blank" rel="noopener">提供商</a>的一个数组。在这个例子中，它告诉 Angular 该如何提供一个 <code>HeroService</code> 实例，以获取要显示的英雄列表。</li></ul></li><li><p>模板与视图</p><p>你要通过组件的配套模板来定义其视图。模板就是一种 HTML，它会告诉 Angular 如何渲染该组件。</p><p>视图通常会分层次进行组织，让你能以 UI 分区或页面为单位进行修改、显示或隐藏。 与组件直接关联的模板会定义该组件的<em>宿主视图</em>。该组件还可以定义一个<em>带层次结构的视图</em>，它包含一些<em>内嵌的视图</em>作为其它组件的宿主。</p><p>带层次结构的视图可以包含同一模块（NgModule）中组件的视图，也可以（而且经常会）包含其它模块中定义的组件的视图。</p></li><li><p>模板语法</p><p>模板很像标准的 HTML，但是它还包含 Angular 的<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax" target="_blank" rel="noopener">模板语法</a>，这些模板语法可以根据你的应用逻辑、应用状态和 DOM 数据来修改这些 HTML。 你的模板可以使用<em>数据绑定</em>来协调应用和 DOM 中的数据，使用<em>管道</em>在显示出来之前对其进行转换，使用<em>指令</em>来把程序逻辑应用到要显示的内容上。</p><p>比如，下面是本教程中 <code>HeroListComponent</code> 的模板：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hero List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>Pick a hero from the list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{hero.name}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span></code></pre><p>这个模板使用了典型的 HTML 元素，比如 <code>和</code>，还包括一些 Angular 的模板语法元素，如 <code>*ngFor</code>，<code></code>，<code>click</code>、<code>[hero]</code> 和 ``。这些模板语法元素告诉 Angular 该如何根据程序逻辑和数据在屏幕上渲染 HTML。</p><ul><li><code>*ngFor</code> 指令告诉 Angular 在一个列表上进行迭代。</li><li><code></code>、<code>(click)</code> 和 <code>[hero]</code> 把程序数据绑定到及绑定回 DOM，以响应用户的输入。更多内容参见稍后的<a href="http://angular-doc.paas.cmbchina.cn/guide/architecture-components#data-binding" target="_blank" rel="noopener">数据绑定</a>部分。</li><li>模板中的 `` 标签是一个代表新组件 <code>HeroDetailComponent</code> 的元素。 <code>HeroDetailComponent</code>（代码略）定义了 <code>HeroListComponent</code> 的英雄详情子视图。 注意观察像这样的自定义组件是如何与原生 HTML 元素无缝的混合在一起的。</li></ul></li><li><p>数据绑定</p><p>如果没有框架，你就要自己负责把数据值推送到 HTML 控件中，并把来自用户的响应转换成动作和对值的更新。 手动写这种数据推拉逻辑会很枯燥、容易出错，难以阅读 —— 有前端 JavaScript 开发经验的程序员一定深有体会。</p><p>Angular 支持<em>双向数据绑定</em>，这是一种对模板中的各个部件与组件中的各个部件进行协调的机制。 往模板 HTML 中添加绑定标记可以告诉 Angular 该如何连接它们。</p><p>下图显示了数据绑定标记的四种形式。每种形式都有一个方向 —— 从组件到 DOM、从 DOM 到组件或双向。</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png" alt="数据绑定"></p><p> <code>HeroListComponent</code> 模板中的例子使用了其中的三种形式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{hero.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><ul><li><code></code><a href="http://angular-doc.paas.cmbchina.cn/guide/displaying-data#interpolation" target="_blank" rel="noopener"><em>插值表达式</em></a>在 `` 标签中显示组件的 <code>hero.name</code> 属性的值。</li><li><code>[hero]</code><a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#property-binding" target="_blank" rel="noopener"><em>属性绑定</em></a>把父组件 <code>HeroListComponent</code> 的 <code>selectedHero</code> 的值传到子组件 <code>HeroDetailComponent</code> 的 <code>hero</code> 属性中。</li><li>当用户点击某个英雄的名字时，<code>(click)</code> <a href="http://angular-doc.paas.cmbchina.cn/guide/user-input#binding-to-user-input-events" target="_blank" rel="noopener"><em>事件绑定</em></a>会调用组件的 <code>selectHero</code> 方法。</li></ul><p><strong>双向数据绑定</strong>（主要用于<a href="http://angular-doc.paas.cmbchina.cn/guide/forms" target="_blank" rel="noopener">模板驱动表单</a>中），它会把属性绑定和事件绑定组合成一种单独的写法。</p><p> <code>HeroDetailComponent</code> 模板中的例子通过 <code>ngModel</code> 指令使用了双向数据绑定：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在双向绑定中，数据属性值通过属性绑定从组件流到输入框。用户的修改通过事件绑定流回组件，把属性值设置为最新的值。</p><p>Angular 在每个 JavaScript 事件循环中处理<em>所有的</em>数据绑定，它会从组件树的根部开始，递归处理全部子组件。</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png" alt="双向数据绑定"></p><p>数据绑定在模板及其组件之间的通讯中扮演了非常重要的角色，它对于父组件和子组件之间的通讯也同样重要。</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.png" alt="父子组件通信"></p></li><li><p>管道</p><p>Angular 的管道可以让你在模板中声明显示值的转换逻辑。 带有 <code>@Pipe</code> 装饰器的类中会定义一个转换函数，用来把输入值转换成供视图显示用的输出值。</p><p>Angular 自带了很多管道，比如 <a href="https://angular.cn/api/common/DatePipe" target="_blank" rel="noopener">date</a> 管道和 <a href="https://angular.cn/api/common/CurrencyPipe" target="_blank" rel="noopener">currency</a> 管道，完整的列表参见 <a href="https://angular.cn/api?type=pipe" target="_blank" rel="noopener">Pipes API 列表</a>。你也可以自己定义一些新管道。</p><p>要在 HTML 模板中指定值的转换方式，请使用 <a href="https://angular.cn/guide/template-syntax#pipe" target="_blank" rel="noopener">管道操作符 (|)</a>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token punctuation">{</span><span class="token punctuation">{</span>interpolated_value <span class="token operator">|</span> pipe_name<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你可以把管道串联起来，把一个管道函数的输出送给另一个管道函数进行转换。 管道还能接收一些参数，来控制它该如何进行转换。</p><p>比如，你可以把要使用的日期格式传给 <code>date</code> 管道：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Default format: output 'Jun 15, 2015'--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Today is {{today | date}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- fullDate format: output 'Monday, June 15, 2015'--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The date is {{today | date:'fullDate'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- shortTime format: output '9:43 AM'--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The time is {{today | date:'shortTime'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li><li><p>指令</p><p>Angular 的模板是<em>动态的</em>。当 Angular 渲染它们的时候，会根据<em>指令</em>给出的指示对 DOM 进行转换。 指令就是一个带有 <code>@Directive()</code> 装饰器的类。</p><p>组件从技术角度上说就是一个指令，但是由于组件对 Angular 应用来说非常独特、非常重要，因此 Angular 专门定义了 <code>@Component()</code> 装饰器，它使用一些面向模板的特性扩展了 <code>@Directive()</code> 装饰器。</p><p>除组件外，还有两种指令：<em>结构型指令</em>和<em>属性型指令</em>。 Angular 本身定义了一系列这两种类型的指令，你也可以使用 <code>@Directive()</code> 装饰器来定义自己的指令。</p><p>像组件一样，指令的元数据把它所装饰的指令类和一个 <code>selector</code> 关联起来，<code>selector</code> 用来把该指令插入到 HTML 中。 在模板中，指令通常作为属性出现在元素标签上，可能仅仅作为名字出现，也可能作为赋值目标或绑定目标出现。</p><ul><li><p>结构型指令</p><p><em>结构型指令</em>通过添加、移除或替换 DOM 元素来修改布局。</p><p> 这个范例模板使用了两个内置的结构型指令来为要渲染的视图添加程序逻辑：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span></code></pre><ul><li><a href="http://angular-doc.paas.cmbchina.cn/guide/displaying-data#ngFor" target="_blank" rel="noopener"><code>*ngFor</code></a> 是一个迭代器，它要求 Angular 为 <code>heroes</code> 列表中的每个英雄渲染出一个 ``。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/displaying-data#ngIf" target="_blank" rel="noopener"><code>*ngIf</code></a> 是个条件语句，只有当选中的英雄存在时，它才会包含 <code>HeroDetail</code> 组件。</li></ul></li><li><p>属性型指令</p><p><em>属性型指令</em>会修改现有元素的外观或行为。 在模板中，它们看起来就像普通的 HTML 属性一样，因此得名“属性型指令”。</p><p><code>ngModel</code> 指令就是属性型指令的一个例子，它实现了双向数据绑定。 <code>ngModel</code> 修改现有元素（一般是 ``）的行为：设置其显示属性值，并响应 change 事件。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>Angular 还有很多预定义指令既不修改布局结构（比如 <a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#ngSwitch" target="_blank" rel="noopener">ngSwitch</a>），也不修改 DOM 元素和组件的样子（比如 <a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#ngStyle" target="_blank" rel="noopener">ngStyle</a> 和 <a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#ngClass" target="_blank" rel="noopener">ngClass</a>）。</p></li></ul></li></ol><h2 id="2-5-服务与依赖注入"><a href="#2-5-服务与依赖注入" class="headerlink" title="2.5-服务与依赖注入"></a>2.5-服务与依赖注入</h2><p><em>服务</em>是一个广义的概念，它包括应用所需的任何值、函数或特性。狭义的服务是一个明确定义了用途的类。它应该做一些具体的事，并做好。</p><p>Angular 把组件和服务区分开，以提高模块性和复用性。 通过把组件中和视图有关的功能与其他类型的处理分离开，你可以让组件类更加精简、高效。</p><p>理想情况下，组件的工作只管用户体验，而不用顾及其它。 它应该提供用于数据绑定的属性和方法，以便作为视图（由模板渲染）和应用逻辑（通常包含一些<em>模型</em>的概念）的中介者。</p><p>组件应该把诸如从服务器获取数据、验证用户输入或直接往控制台中写日志等工作委托给各种服务。通过把各种处理任务定义到可注入的服务类中，你可以让它被任何组件使用。 通过在不同的环境中注入同一种服务的不同提供商，你还可以让你的应用更具适应性。</p><p>Angular 不会<em>强迫</em>你遵循这些原则。Angular 只会通过<em>依赖注入</em>来帮你更容易地将应用逻辑分解为服务，并让这些服务可用于各个组件中。</p><ol><li><p>服务案例</p><p>下面是一个服务类的范例，用于把日志记录到浏览器的控制台：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>  <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>服务也可以依赖其它服务。比如，这里的 <code>HeroService</code> 就依赖于 <code>Logger</code> 服务，它还用 <code>BackendService</code> 来获取英雄数据。<code>BackendService</code> 还可能再转而依赖 <code>HttpClient</code> 服务来从服务器异步获取英雄列表。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> heroes<span class="token punctuation">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> backend<span class="token punctuation">:</span> BackendService<span class="token punctuation">,</span>    <span class="token keyword">private</span> logger<span class="token punctuation">:</span> Logger<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>heroes<span class="token punctuation">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Fetched </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>heroes<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> heroes.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fill cache</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>依赖注入</p><p>DI 被融入 Angular 框架中，用于在任何地方给新建的组件提供服务或所需的其它东西。 组件是服务的消费者，也就是说，你可以把一个服务<em>注入</em>到组件中，让组件类得以访问该服务类。</p><p>在 Angular 中，要把一个类定义为服务，就要用 <code>@Injectable()</code> 装饰器来提供元数据，以便让 Angular 可以把它作为<em>依赖</em>注入到组件中。 同样，也要使用 <code>@Injectable()</code> 装饰器来表明一个组件或其它类（比如另一个服务、管道或 NgModule）<em>拥有</em>一个依赖。</p><ul><li><em>注入器</em>是主要的机制。Angular 会在启动过程中为你创建全应用级注入器以及所需的其它注入器。你不用自己创建注入器。</li><li>该注入器会创建依赖、维护一个<em>容器</em>来管理这些依赖，并尽可能复用它们。</li><li><em>提供商</em>是一个对象，用来告诉注入器应该如何获取或创建依赖。</li></ul><p>你的应用中所需的任何依赖，都必须使用该应用的注入器来注册一个提供商，以便注入器可以使用这个提供商来创建新实例。 对于服务，该提供商通常就是服务类本身。</p></li></ol><p>   当 Angular 创建组件类的新实例时，它会通过查看该组件类的构造函数，来决定该组件依赖哪些服务或其它依赖项。 比如 <code>HeroListComponent</code> 的构造函数中需要 <code>HeroService</code>：</p><pre class=" language-typescript"><code class="language-typescript">   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> service<span class="token punctuation">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>   当 Angular 发现某个组件依赖某个服务时，它会首先检查是否该注入器中已经有了那个服务的任何现有实例。如果所请求的服务尚不存在，注入器就会使用以前注册的服务提供商来制作一个，并把它加入注入器中，然后把该服务返回给 Angular。</p><p>   当所有请求的服务已解析并返回时，Angular 可以用这些服务实例为参数，调用该组件的构造函数。</p><p>   <code>HeroService</code> 的注入过程如下所示：</p><p>   <img src="/2020/01/15/angular-xue-xi-bi-ji/HeroService%E6%B3%A8%E5%85%A5%E8%BF%87%E7%A8%8B.png" alt="HeroService注入过程"></p><ol start="3"><li><p>提供服务</p><p>对于要用到的任何服务，你必须至少注册一个<em>提供商</em>。服务可以在自己的元数据中把自己注册为提供商，这样可以让自己随处可用。或者，你也可以为特定的模块或组件注册提供商。要注册提供商，就要在服务的 <code>@Injectable()</code> 装饰器中提供它的元数据，或者在<code>@NgModule()</code> 或 <code>@Component()</code> 的元数据中。</p><ul><li>默认情况下，Angular CLI 的 <a href="http://angular-doc.paas.cmbchina.cn/cli/generate" target="_blank" rel="noopener"><code>ng generate service</code></a> 命令会在 <code>@Injectable()</code> 装饰器中提供元数据来把它注册到根注入器中。本教程就用这种方法注册了 HeroService 的提供商：</li></ul><pre><code>content_copy@Injectable({  providedIn: &#39;root&#39;, })</code></pre><p>当你在根一级提供服务时，Angular 会为 HeroService 创建一个单一的共享实例，并且把它注入到任何想要它的类中。这种在 <code>@Injectable</code> 元数据中注册提供商的方式还让 Angular 能够通过移除那些从未被用过的服务来优化大小。</p><ul><li>当你使用<a href="http://angular-doc.paas.cmbchina.cn/guide/architecture-modules" target="_blank" rel="noopener">特定的 NgModule</a> 注册提供商时，该服务的同一个实例将会对该 NgModule 中的所有组件可用。要想在这一层注册，请用 <code>@NgModule()</code> 装饰器中的 <code>providers</code> 属性：</li></ul><pre><code>content_copy@NgModule({  providers: [   BackendService,   Logger ], ... })</code></pre><ul><li><p>当你在组件级注册提供商时，你会为该组件的每一个新实例提供该服务的一个新实例。 要在组件级注册，就要在 <code>@Component()</code> 元数据的 <code>providers</code> 属性中注册服务提供商。</p><pre class=" language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span>    <span class="token string">'app-hero-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./hero-list.component.html'</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span>  <span class="token punctuation">[</span> HeroService <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li></ol><h2 id="2-6-工具与技巧"><a href="#2-6-工具与技巧" class="headerlink" title="2.6-工具与技巧"></a>2.6-工具与技巧</h2><h3 id="响应式编程工具"><a href="#响应式编程工具" class="headerlink" title="响应式编程工具"></a>响应式编程工具</h3><ul><li><a href="http://angular-doc.paas.cmbchina.cn/guide/lifecycle-hooks" target="_blank" rel="noopener">生命周期钩子</a>：通过实现生命周期钩子接口，可以窃听组件生命周期中的一些关键时刻 —— 从创建到销毁。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/observables" target="_blank" rel="noopener">可观察对象（Observable）和事件处理</a>：如何在组件和服务中使用可观察对象来发布和订阅任意类型的消息，比如用户交互事件和异步操作结果。</li></ul><h3 id="客户端与服务器的交互工具"><a href="#客户端与服务器的交互工具" class="headerlink" title="客户端与服务器的交互工具"></a>客户端与服务器的交互工具</h3><ul><li><a href="http://angular-doc.paas.cmbchina.cn/guide/http" target="_blank" rel="noopener">HTTP</a>：用 HTTP 客户端与服务器通讯，以获取数据、保存数据或执行服务端动作。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/universal" target="_blank" rel="noopener">服务端渲染</a>：Angular Universal 会通过服务端渲染（SSR）技术在服务器上生成静态的应用页面。 这让你可以在服务器上运行 Angular 应用，以提升性能并在手机或低功耗设备上快速显示首屏，并为 Web 爬虫提供帮助（SEO）。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/service-worker-intro" target="_blank" rel="noopener">Service Worker</a>：借助 Service Worker 来减轻对网络的依赖，你可以显著提升用户体验。</li></ul><h3 id="特定领域的库"><a href="#特定领域的库" class="headerlink" title="特定领域的库"></a>特定领域的库</h3><ul><li><a href="http://angular-doc.paas.cmbchina.cn/guide/animations" target="_blank" rel="noopener">动画</a>：使用 Angular 的动画库，你可以让组件支持动画行为，而不用深入了解动画技术或 CSS。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/forms" target="_blank" rel="noopener">Forms</a>：通过基于 HTML 的验证和脏数据检查，来支持复杂的数据输入场景。</li></ul><h3 id="为开发周期提供支持"><a href="#为开发周期提供支持" class="headerlink" title="为开发周期提供支持"></a>为开发周期提供支持</h3><ul><li><p><a href="http://angular-doc.paas.cmbchina.cn/guide/aot-compiler" target="_blank" rel="noopener">编译</a>：Angular 为开发环境提供了 JIT（即时）编译方式，为生产环境提供了 AOT（预先）编译方式。</p></li><li><p><a href="http://angular-doc.paas.cmbchina.cn/guide/testing" target="_blank" rel="noopener">测试平台</a>：对应用的各个部件运行单元测试，让它们好像在和 Angular 框架交互一样。</p></li><li><p><a href="http://angular-doc.paas.cmbchina.cn/guide/i18n" target="_blank" rel="noopener">国际化</a>：Angular 的国际化工具可以帮助你让应用可用于多种语言中。</p></li><li><p><a href="http://angular-doc.paas.cmbchina.cn/guide/security" target="_blank" rel="noopener">安全指南</a>：学习 Angular 对常见 Web 应用的弱点和工具（比如跨站脚本攻击）提供的内置防护措施。</p></li></ul><h3 id="环境搭建、构建与开发配置"><a href="#环境搭建、构建与开发配置" class="headerlink" title="环境搭建、构建与开发配置"></a>环境搭建、构建与开发配置</h3><ul><li><a href="http://angular-doc.paas.cmbchina.cn/cli" target="_blank" rel="noopener">CLI 命令参考手册</a>：Angular CLI 是一个命令行工具，你可以使用它来创建项目、生成应用及库代码，还能执行很多开发任务，比如测试、打包和发布。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/file-structure" target="_blank" rel="noopener">工作区与文件结构</a>：理解 Angular 工作区与项目文件夹的结构。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/npm-packages" target="_blank" rel="noopener">npm 包</a>：Angular 框架、Angular CLI 和 Angular 应用中用到的组件都是用 <a href="https://docs.npmjs.com/" target="_blank" rel="noopener">npm</a> 打包的，并通过 npm 注册服务器进行发布。Angular CLI 会创建一个默认的 <code>package.json</code> 文件，它会指定一组初始的包，它们可以一起使用，共同支持很多常见的应用场景。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/typescript-configuration" target="_blank" rel="noopener">TypeScript 配置</a>：TypeScript 是 Angular 应用开发的主要语言。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/browser-support" target="_blank" rel="noopener">浏览器支持</a>：学习如何让你的应用能和各种浏览器兼容。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/build" target="_blank" rel="noopener">构建与运行</a>：学习为项目定义不同的构建和代理服务器设置的配置方式，比如开发、预生产和生产。</li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/deployment" target="_blank" rel="noopener">部署</a>：学习把你的 Angular 应用发布到远端服务器的技巧。</li></ul><h1 id="3-组件与模板"><a href="#3-组件与模板" class="headerlink" title="3-组件与模板"></a>3-组件与模板</h1><h2 id="3-1-显示数据"><a href="#3-1-显示数据" class="headerlink" title="3.1-显示数据"></a>3.1-显示数据</h2><ol><li><p>使用插件表达式显示组件属性</p><p>要显示组件的属性，最简单的方式就是通过插值表达式 (interpolation) 来绑定属性名。 要使用插值表达式，就把属性名包裹在双花括号里放进视图模板，如 <code></code>。</p><p>使用 CLI 命令 <a href="http://angular-doc.paas.cmbchina.cn/cli/new" target="_blank" rel="noopener"><code>ng new displaying-data</code></a> 创建一个工作空间和一个名叫 <code>displaying-data</code> 的应用。</p><p>删除 <code>app.component.html</code> 文件，这个范例中不再需要它了。</p><p>然后，到 <code>app.component.ts</code> 文件中修改组件的模板和代码。</p><p>修改完之后，它应该是这样的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h1>{{title}}&lt;/h1>    &lt;h2>My favorite hero is: {{myHero}}&lt;/h2>    `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>  title <span class="token operator">=</span> <span class="token string">'Tour of Heroes'</span><span class="token punctuation">;</span>  myHero <span class="token operator">=</span> <span class="token string">'Windstorm'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再把两个属性 <code>title</code> 和 <code>myHero</code> 添加到之前空白的组件中。</p><p>修改完的模板会使用双花括号形式的插值表达式来显示这两个模板属性：</p><pre class=" language-typescript"><code class="language-typescript">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;h1>{{title}}&lt;/h1>  &lt;h2>My favorite hero is: {{myHero}}&lt;/h2>  `</span></span></code></pre><p>Angular 自动从组件中提取 <code>title</code> 和 <code>myHero</code> 属性的值，并且把这些值插入浏览器中。当这些属性发生变化时，Angular 就会自动刷新显示。</p><p><strong>注意</strong>：你没有调用 <strong>new</strong> 来创建 <code>AppComponent</code> 类的实例，是 Angular 替你创建了它。那么它是如何创建的呢？</p><p><strong>注意</strong> ：<code>@Component</code> 装饰器中指定的 CSS 选择器 <code>selector</code>，它指定了一个叫 `` 的元素。 该元素是 <code>index.html</code> 文件里的一个占位符。</p><p>src/index.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>当你通过 <code>main.ts</code> 中的 <code>AppComponent</code> 类启动时，Angular 在 <code>index.html</code> 中查找一个 <code>元素， 然后实例化一个 `AppComponent`，并将其渲染到</code> 标签中。</p><p>运行应用。它应该显示出标题和英雄名：</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/title-and-hero.png" alt="title-and-hero"></p></li><li><p>内联模板还是模板文件？</p><p>你可以在两种地方存放组件模板。 你可以使用 <code>template</code> 属性把它定义为<em>内联</em>的，或者把模板定义在一个独立的 HTML 文件中， 再通过 <code>@Component</code> 装饰器中的 <code>templateUrl</code> 属性， 在组件元数据中把它链接到组件。</p><p>到底选择内联 HTML 还是独立 HTML 取决于个人喜好、具体状况和组织级策略。 上面的应用选择内联 HTML ，是因为模板很小，而且没有额外的 HTML 文件显得这个演示简单些。</p><p>无论用哪种风格，模板数据绑定在访问组件属性方面都是完全一样的。</p><p>默认情况下，Angular CLI 命令 <a href="http://angular-doc.paas.cmbchina.cn/cli/generate" target="_blank" rel="noopener"><code>ng generate component</code></a> 在生成组件时会带有模板文件，你可以通过参数来覆盖它</p></li><li><p>使用构造函数还是变量初始化？</p><p>虽然这个例子使用了变量赋值的方式初始化组件，你还可以使用构造函数来声明和初始化属性。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  myHero<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Tour of Heroes'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>myHero <span class="token operator">=</span> <span class="token string">'Windstorm'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>使用ngFor显示数组属性</p><p>要显示一个英雄列表，先向组件中添加一个英雄名字数组，然后把 <code>myHero</code> 重定义为数组中的第一个名字。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>  title <span class="token operator">=</span> <span class="token string">'Tour of Heroes'</span><span class="token punctuation">;</span>  heroes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Windstorm'</span><span class="token punctuation">,</span> <span class="token string">'Bombasto'</span><span class="token punctuation">,</span> <span class="token string">'Magneta'</span><span class="token punctuation">,</span> <span class="token string">'Tornado'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  myHero <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着，在模板中使用 Angular 的 <code>ngFor</code> 指令来显示 <code>heroes</code> 列表中的每一项</p><pre class=" language-typescript"><code class="language-typescript">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;h1>{{title}}&lt;/h1>  &lt;h2>My favorite hero is: {{myHero}}&lt;/h2>  &lt;p>Heroes:&lt;/p>  &lt;ul>    &lt;li *ngFor="let hero of heroes">      {{ hero }}    &lt;/li>  &lt;/ul>`</span></span></code></pre><p>这个界面使用了由 <code>和</code> 标签组成的无序列表。<code>元素里的 `*ngFor` 是 Angular 的“迭代”指令。 它将</code> 元素及其子级标记为“迭代模板”：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ hero }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/01/15/angular-xue-xi-bi-ji/hero-names-list.png" alt="hero-names-list"></p></li><li><p>为数据创建一个类</p><p>应用代码直接在组件内部直接定义了数据。 作为演示还可以，但它显然不是最佳实践。</p><p>现在使用的是到了一个字符串数组的绑定。在真实的应用中，大多是到一个对象数组的绑定。</p><p>要将此绑定转换成使用对象，需要把这个英雄名字数组变成 <code>Hero</code> 对象数组。但首先得有一个 <code>Hero</code> 类。</p><p><code>ng generate class hero</code></p><p>代码如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">public</span> id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你定义了一个类，具有一个构造函数和两个属性：<code>id</code> 和 <code>name</code>。</p><p>它可能看上去不像是有属性的类，但它确实有，利用的是 TypeScript 提供的简写形式 —— 用构造函数的参数直接定义属性。</p><p>来看第一个参数：</p><p><code>public id: number,</code>这个简写语法做了很多：</p><ul><li>声明了一个构造函数参数及其类型。</li><li>声明了一个同名的公共属性。</li><li>当创建该类的一个实例时，把该属性初始化为相应的参数值。</li></ul><p><strong>使用Hero类：</strong></p><p>导入了 <code>Hero</code> 类之后，组件的 <code>heroes</code> 属性就可以返回一个<em>类型化的</em><code>Hero</code> 对象数组了</p><pre class=" language-typescript"><code class="language-typescript">heroes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Windstorm'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'Bombasto'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'Magneta'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'Tornado'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myHero <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>接着，修改模板。 现在它显示的是英雄的 <code>id</code> 和 <code>name</code>。 要修复它，只显示英雄的 <code>name</code> 属性就行了。</p><pre class=" language-typescript"><code class="language-typescript">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;h1>{{title}}&lt;/h1>  &lt;h2>My favorite hero is: {{myHero.name}}&lt;/h2>  &lt;p>Heroes:&lt;/p>  &lt;ul>    &lt;li *ngFor="let hero of heroes">      {{ hero.name }}    &lt;/li>  &lt;/ul>`</span></span></code></pre></li><li><p>通过ngIf进行条件显示</p><p>有时，应用需要只在特定情况下显示视图或视图的一部分。</p><p>来改一下这个例子，如果多于三位英雄，显示一条消息。</p><p>Angular 的 <code>ngIf</code> 指令会根据一个布尔条件来显示或移除一个元素。 来看看实际效果，把下列语句加到模板的底部：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heroes.length <span class="token punctuation">></span> 3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>There are many heroes!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>双引号中的模板表达式 <code>*ngIf=&quot;heros.length &gt; 3&quot;</code>，外观和行为很象 TypeScript 。 当组件中的英雄列表有三个以上的条目时，Angular 就会把这个段落添加到 DOM 中，于是消息显示了出来。 如果有三个或更少的条目，则 Angular 会省略这些段落，所以不显示消息。</p><p>Angular 并不是在显示和隐藏这条消息，它是在从 DOM 中添加和移除这个段落元素。 这会提高性能，特别是在一些大的项目中有条件地包含或排除一大堆带着很多数据绑定的 HTML 时。</p></li></ol><h2 id="3-2-模板语法"><a href="#3-2-模板语法" class="headerlink" title="3.2-模板语法"></a>3.2-模板语法</h2><p>Angular 应用管理着用户之所见和所为，并通过 Component 类的实例（<em>组件</em>）和面向用户的模板交互来实现这一点。</p><p>从使用模型-视图-控制器 (MVC) 或模型-视图-视图模型 (MVVM) 的经验中，很多开发人员都熟悉了组件和模板这两个概念。 在 Angular 中，组件扮演着控制器或视图模型的角色，模板则扮演视图的角色。</p><ol><li><p>模板中的HTML</p><p>HTML 是 Angular 模板的语言。几乎所有的 HTML 语法都是有效的模板语法。 但值得注意的例外是 <code>元素，它被禁用了，以阻止脚本注入攻击的风险。（实际上，</code> 只是被忽略了。）</p><p>有些合法的 HTML 被用在模板中是没有意义的。<code>、</code> 和 `` 元素这个舞台上中并没有扮演有用的角色。剩下的所有元素基本上就都一样用了。</p><p>可以通过组件和指令来扩展模板中的 HTML 词汇。它们看上去就是新元素和属性。接下来将学习如何通过数据绑定来动态获取/设置 DOM（文档对象模型）的值。</p><p>首先看看数据绑定的第一种形式 —— 插值表达式，它展示了模板的 HTML 可以有多丰富。</p></li><li><p>插值与模板表达式</p><p>插值能让你把计算后的字符串合并到 HTML 元素标签之间和属性赋值语句内的文本中。模板表达式则是用来供你求出这些字符串的。</p><ul><li><p>插值表达式</p><p>所谓 “插值” 是指将表达式嵌入到标记文本中。 默认情况下，插值表达式会用双花括号 <code>{{`和 `}}</code> 作为分隔符。</p><p>在下面的代码片段中，<code>{{ currentCustomer }}</code> 就是插值表达式的例子。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Current customer: {{ currentCustomer }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre><p>插值表达式可以把计算后的字符串插入到 HTML 元素标签内的文本或对标签的属性进行赋值</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{itemImageUrl}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>在括号之间的“素材”，通常是组件属性的名字。Angular 会用组件中相应属性的字符串值，替换这个名字。 上例中，Angular 计算 <code>title</code> 和 <code>itemImageUrl</code> 属性的值，并把它们填在空白处。 首先显示粗体的应用标题，然后显示英雄的图片。</p><p>一般来说，括号间的素材是一个<strong>模板表达式</strong>，Angular 先<strong>对它求值</strong>，再把它<strong>转换成字符串</strong>。 下列插值表达式通过把括号中的两个数字相加说明了这一点：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- "The sum of 1 + 1 is 2" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The sum of 1 + 1 is {{1 + 1}}.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>这个表达式可以调用宿主组件的方法，就像下面用的 <code>getVal()</code>：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- "The sum of 1 + 1 is not 4" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The sum of 1 + 1 is not {{1 + 1 + getVal()}}.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>Angular 对所有双花括号中的表达式求值，把求值的结果转换成字符串，并把它们跟相邻的字符串字面量连接起来。最后，把这个组合出来的插值结果赋给<strong>元素或指令的属性</strong>。</p><p>从表面上看，你就像是在元素标签之间插入了结果并对标签的属性进行了赋值。</p></li></ul></li><li><p>表达式上下文</p><p>典型的<em>表达式上下文</em>就是这个<strong>组件实例</strong>，它是各种绑定值的来源。 在下面的代码片段中，双花括号中的 <code>recommended</code> 和引号中的 <code>itemImageUrl2</code> 所引用的都是 <code>AppComponent</code> 中的属性。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>{{recommended}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">[src]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemImageUrl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>表达式的上下文可以包括组件之外的对象。 比如<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#template-input-variable" target="_blank" rel="noopener">模板输入变量</a> (<code>let customer</code>)和<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#ref-vars" target="_blank" rel="noopener">模板引用变量</a>(<code>#customerInput</code>)就是备选的上下文对象之一。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let customer of customers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{customer.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Type something:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#customerInput</span><span class="token punctuation">></span></span>{{customerInput.value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>表达式中的上下文变量是由<em>模板变量</em>、指令的<em>上下文变量</em>（如果有）和组件的<em>成员</em>叠加而成的。 如果你要引用的变量名存在于一个以上的命名空间中，那么，模板变量是最优先的，其次是指令的上下文变量，最后是组件的成员。</p></li><li><p>模板语句</p><p>模板<strong>语句</strong>用来响应由绑定目标（如 HTML 元素、组件或指令）触发的<strong>事件</strong>。 模板语句将在<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#event-binding" target="_blank" rel="noopener">事件绑定</a>一节看到，它出现在 <code>=</code> 号右侧的引号中，就像这样：<code>(event)=&quot;statement&quot;</code>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteHero()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Delete hero<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>模板语句<em>有副作用</em>。 这是事件处理的关键。因为你要根据用户的输入更新应用状态。</p><p>响应事件是 Angular 中“单向数据流”的另一面。 在一次事件循环中，可以随意改变任何地方的任何东西。</p><p>和模板表达式一样，模板<em>语句</em>使用的语言也像 JavaScript。 模板语句解析器和模板表达式解析器有所不同，特别之处在于它支持基本赋值 (<code>=</code>) 和表达式链 (<code>;</code> 和 <code>,</code>)。</p><p>然而，某些 JavaScript 语法仍然是不允许的：</p><ul><li><code>new</code> 运算符</li><li>自增和自减运算符：<code>++</code> 和 <code>--</code></li><li>操作并赋值，例如 <code>+=</code> 和 <code>-=</code></li><li>位操作符 <code>|</code> 和 <code>&amp;</code></li><li><a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#expression-operators" target="_blank" rel="noopener">模板表达式运算符</a></li></ul></li><li><p>语句上下文</p><p>和表达式中一样，语句只能引用语句上下文中 —— 通常是正在绑定事件的那个<strong>组件实例</strong>。</p><p>典型的<em>语句上下文*就是当前组件的实例。 <code>(click)=&quot;deleteHero()&quot;</code> 中的 *deleteHero</em> 就是这个数据绑定组件上的一个方法。</p><p><code>&lt;button (click)=&quot;deleteHero()&quot;&gt;Delete hero&lt;/button&gt;</code></p><p>语句上下文可以引用模板自身上下文中的属性。 在下面的例子中，就把模板的 <code>$event</code> 对象、<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#template-input-variable" target="_blank" rel="noopener">模板输入变量</a> (<code>let hero</code>)和<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#ref-vars" target="_blank" rel="noopener">模板引用变量</a> (<code>#heroForm</code>)传给了组件中的一个事件处理器方法。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSave($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteHero(hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{hero.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#heroForm</span> <span class="token attr-name">(ngSubmit)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit(heroForm)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>模板上下文中的变量名的优先级高于组件上下文中的变量名。在上面的 <code>deleteHero(hero)</code> 中，<code>hero</code> 是一个模板输入变量，而不是组件中的 <code>hero</code> 属性。</p><p>模板语句不能引用全局命名空间的任何东西。比如不能引用 <code>window</code> 或 <code>document</code>，也不能调用 <code>console.log</code> 或 <code>Math.max</code>。</p></li><li><p>绑定语法</p><p>数据绑定是一种机制，用来协调用户所见和应用数据。 虽然你能往 HTML 推送值或者从 HTML 拉取值， 但如果把这些琐事交给数据绑定框架处理， 应用会更容易编写、阅读和维护。 只要简单地在绑定源和目标 HTML 元素之间声明绑定，框架就会完成这项工作。</p><p>绑定的类型可以根据数据流的方向分成三类： <em>从数据源到视图</em>、<em>从视图到数据源</em>以及双向的<em>从视图到数据源再到视图</em>。</p><table><thead><tr><th>数据方向</th><th>语法</th><th>绑定类型</th></tr></thead><tbody><tr><td>单向<br>从数据源到视图</td><td> [<a href="http://angular-doc.paas.cmbchina.cn/api/router/RouterLinkWithHref#target" target="_blank" rel="noopener">target</a>]=”expression” bind-target=”expression”</td><td>插值<br>属性<br>Attribute<br>CSS 类<br>样式</td></tr><tr><td>从视图到数据源的单向绑定</td><td>(<a href="http://angular-doc.paas.cmbchina.cn/api/router/RouterLinkWithHref#target" target="_blank" rel="noopener">target</a>)=”statement” on-target=”statement”事件</td><td>事件</td></tr><tr><td>双向</td><td>[(<a href="http://angular-doc.paas.cmbchina.cn/api/router/RouterLinkWithHref#target" target="_blank" rel="noopener">target</a>)]=”expression” bindon-target=”expression”</td><td>双向</td></tr></tbody></table></li><li><p>绑定目标</p><table><thead><tr><th>绑定类型</th><th>目标</th><th>范例</th></tr></thead><tbody><tr><td>属性</td><td>元素的 property<br>组件的 property<br>指令的 property</td><td>&lt;img [src]=”heroImageUrl”&gt; <br>&lt;app-hero-detail [hero]=”currentHero”&gt; <br>&lt;div [ngClass]=”{‘special’: isSpecial}”&gt;</td></tr><tr><td>事件</td><td>元素的事件<br>组件的事件<br>指令的事件</td><td>&lt;button (click)=”onSave()”&gt;Save<br> &lt;app-hero-detail (deleteRequest)=”deleteHero()”&gt;<br> &lt;div (myClick)=”clicked=$event” clickable&gt;click me</td></tr><tr><td>双向</td><td>事件与 property</td><td>&lt;input [(<a href="http://angular-doc.paas.cmbchina.cn/api/forms/NgModel" target="_blank" rel="noopener">ngModel</a>)]=”name”&gt;</td></tr><tr><td>Attribute</td><td>attribute（例外情况）</td><td>&lt;button [attr.aria-label]=”help”&gt;help</td></tr><tr><td>CSS 类</td><td><code>class</code> property</td><td>&lt;div [class.special]=”isSpecial”&gt;Special</td></tr><tr><td>样式</td><td><code>style</code> property</td><td>&lt;button [style.color]=”isSpecial ? ‘red’ : ‘green’”&gt;</td></tr></tbody></table></li><li><p>内置指令</p><ul><li><p>内置属性型指令</p><p>属性型指令会监听和修改其它 HTML 元素或组件的行为、元素属性（Attribute）、DOM 属性（Property）。 它们通常会作为 HTML 属性的名称而应用在元素上。</p><ul><li><p>NgClass</p><p>你经常用动态添加或删除 CSS 类的方式来控制元素如何显示。 通过绑定到 <code>NgClass</code>，可以同时添加或移除多个类。</p><p><a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#class-binding" target="_blank" rel="noopener">CSS 类绑定</a> 是添加或删除<em>单个</em>类的最佳途径。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- toggle the "special" class on/off with a property --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[class.special]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isSpecial<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>The class binding is special<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>当想要同时添加或移除<em>多个</em> CSS 类时，<code>NgClass</code> 指令可能是更好的选择。</p><p>试试把 <code>ngClass</code> 绑定到一个 key:value 形式的控制对象。这个对象中的每个 key 都是一个 CSS 类名，如果它的 value 是 <code>true</code>，这个类就会被加上，否则就会被移除。</p><p>组件方法 <code>setCurrentClasses</code> 可以把组件的属性 <code>currentClasses</code> 设置为一个对象，它将会根据三个其它组件的状态为 <code>true</code> 或 <code>false</code> 而添加或移除三个类。</p><pre class=" language-typescript"><code class="language-typescript">currentClasses<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">setCurrentClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CSS classes: added/removed per current state of component properties</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentClasses <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token string">'saveable'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>canSave<span class="token punctuation">,</span>    <span class="token string">'modified'</span><span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isUnchanged<span class="token punctuation">,</span>    <span class="token string">'special'</span><span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isSpecial  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把 <code>NgClass</code> 属性绑定到 <code>currentClasses</code>，根据它来设置此元素的 CSS 类：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentClasses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This div is initially saveable, unchanged, and special<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>NgStyle</p><p>你可以根据组件的状态动态设置内联样式。 <code>NgStyle</code> 绑定可以同时设置多个内联样式。</p><p><a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#style-binding" target="_blank" rel="noopener">样式绑定</a>是设置<em>单一</em>样式值的简单方式。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[style.font-size]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isSpecial ? <span class="token punctuation">'</span>x-large<span class="token punctuation">'</span> : <span class="token punctuation">'</span>smaller<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  This div is x-large or smaller.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>如果要同时设置<em>多个</em>内联样式，<code>NgStyle</code> 指令可能是更好的选择。</p><p><code>NgStyle</code> 需要绑定到一个 key:value 控制对象。 对象的每个 key 是样式名，它的 value 是能用于这个样式的任何值。</p><p>来看看组件的 <code>setCurrentStyles</code> 方法，它会根据另外三个属性的状态把组件的 <code>currentStyles</code> 属性设置为一个定义了三个样式的对象：</p><pre class=" language-typescript"><code class="language-typescript">currentStyles<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">setCurrentStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// CSS styles: set per current state of component properties</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentStyles <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'font-style'</span><span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>canSave      <span class="token operator">?</span> <span class="token string">'italic'</span> <span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>    <span class="token string">'font-weight'</span><span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isUnchanged <span class="token operator">?</span> <span class="token string">'bold'</span>   <span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>    <span class="token string">'font-size'</span><span class="token punctuation">:</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>isSpecial    <span class="token operator">?</span> <span class="token string">'24px'</span>   <span class="token punctuation">:</span> <span class="token string">'12px'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把 <code>ngStyle</code> 属性绑定到 <code>currentStyles</code>，来根据它设置此元素的样式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngStyle]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentStyles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  This div is initially italic, normal weight, and extra large (24px).<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>NgModel- 使用[(ngModel)]双向绑定到表单元素</p><p>当开发数据输入表单时，你通常都要既显示数据属性又根据用户的更改去修改那个属性。</p><p>使用 <code>NgModel</code> 指令进行双向数据绑定可以简化这种工作。例子如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p><strong>使用 ngModel 时需要 FormsModule</strong><br>在使用 ngModel 指令进行双向数据绑定之前，你必须导入 FormsModule 并把它添加到 NgModule 的 imports 列表中。 要了解 FormsModule 和 ngModel 的更多知识，参见表单一章。</p><p>导入 FormsModule 并让 [(ngModel)] 可用的代码如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> FormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;--- JavaScript import from Angular</span><span class="token comment" spellcheck="true">/* Other imports */</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule<span class="token punctuation">,</span>    FormsModule  <span class="token comment" spellcheck="true">// &lt;--- import into the NgModule</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* Other module metadata */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>内置结构型属性</p><p>结构型指令的职责是 HTML 布局。 它们塑造或重塑 DOM 的<em>结构</em>，这通常是通过添加、移除和操纵它们所附加到的宿主元素来实现的。</p><ul><li><p>NgIf</p><p>通过把 <code>NgIf</code> 指令应用到元素上（称为<em>宿主元素</em>），你可以往 DOM 中添加或从 DOM 中移除这个元素。 在下面的例子中，该指令绑定到了类似于 <code>isActive</code> 这样的条件表达式。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-hero-detail</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-hero-detail</span><span class="token punctuation">></span></span></code></pre><p>当 <code>isActive</code> 表达式返回真值时，<code>NgIf</code> 把 <code>HeroDetailComponent</code> 添加到 DOM 中；为假时，<code>NgIf</code> 会从 DOM 中移除 <code>HeroDetailComponent</code>，并销毁该组件及其所有子组件。</p><p><code>ngIf</code> 指令通常会用来防范空指针错误。 而显示/隐藏的方式是无法防范的，当一个表达式尝试访问空值的属性时，Angular 就会抛出一个异常。</p><p>这里我们用 <code>NgIf</code> 来保护了两个 `` 防范空指针错误。 <code>currentHero</code> 的名字只有当存在 <code>currentHero</code> 时才会显示出来。 而 <code>nullHero</code> 永远不会显示。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello, {{currentHero.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nullHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello, {{nullHero.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>NgFor</p><p><code>NgFor</code> 是一个<em>重复器</em>指令 —— 自定义数据显示的一种方式。 你的目标是展示一个由多个条目组成的列表。首先定义了一个 HTML 块，它规定了单个条目应该如何显示。 再告诉 Angular 把这个块当做模板，渲染列表中的每个条目。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{hero.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>NgSwitch</p><p><code>NgSwitch</code> 指令类似于 JavaScript 的 <code>switch</code> 语句。 它可以从多个可能的元素中根据<em>switch 条件</em>来显示某一个。 Angular 只会把<em>选中的</em>元素放进 DOM 中。</p><p><code>NgSwitch</code> 实际上包括三个相互协作的指令：<code>NgSwitch</code>、<code>NgSwitchCase</code> 和 <code>NgSwitchDefault</code>，例子如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngSwitch]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero.emotion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-happy-hero</span>    <span class="token attr-name">*ngSwitchCase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>happy<span class="token punctuation">'</span><span class="token punctuation">"</span></span>    <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-happy-hero</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-sad-hero</span>      <span class="token attr-name">*ngSwitchCase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>sad<span class="token punctuation">'</span><span class="token punctuation">"</span></span>      <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-sad-hero</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-confused-hero</span> <span class="token attr-name">*ngSwitchCase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>confused<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-confused-hero</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-unknown-hero</span>  <span class="token attr-name">*ngSwitchDefault</span>           <span class="token attr-name">[hero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentHero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-unknown-hero</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>NgSwitch</code> 是主控指令，要把它绑定到一个返回<em>候选值</em>的表达式。 本例子中的 <code>emotion</code> 是个字符串，但实际上这个候选值可以是任意类型。</p><p><strong>绑定到 <code>[ngSwitch]</code></strong>。如果试图用 <code>*ngSwitch</code> 的形式使用它就会报错，这是因为 <code>NgSwitch</code> 是一个<em>属性型</em>指令，而不是<em>结构型指令</em>。 它要修改的是所在元素的行为，而不会直接接触 DOM 结构。</p><p><strong>绑定到 <code>\*ngSwitchCase</code> 和 <code>\*ngSwitchDefault</code></strong> <code>NgSwitchCase</code> 和 <code>NgSwitchDefault</code> 指令都是<em>结构型指令</em>，因为它们会从 DOM 中添加或移除元素。</p><ul><li><code>NgSwitchCase</code> 会在它绑定到的值等于候选值时，把它所在的元素加入到 DOM 中。</li><li><code>NgSwitchDefault</code> 会在没有任何一个 <code>NgSwitchCase</code> 被选中时把它所在的元素加入 DOM 中。</li></ul><p>这组指令在要添加或移除<em>组件元素</em>时会非常有用。 这个例子会在 <code>hero-switch.components.ts</code> 中定义的四个“感人英雄”组件之间选择。 每个组件都有一个<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#inputs-outputs" target="_blank" rel="noopener">输入属性</a><code>hero</code>，它绑定到父组件的 <code>currentHero</code> 上。</p><p>这组指令在原生元素和<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noopener">Web Component</a>上都可以正常工作。 比如，你可以把 `` 分支改成这样：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngSwitchCase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>confused<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Are you as confused as {{currentHero.name}}?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul></li></ol><h2 id="3-3-用户输入"><a href="#3-3-用户输入" class="headerlink" title="3.3-用户输入"></a>3.3-用户输入</h2><p>当用户点击链接、按下按钮或者输入文字时，这些用户动作都会产生 DOM 事件。 本章解释如何使用 Angular 事件绑定语法把这些事件绑定到事件处理器。</p><ol><li><p>绑定到用户输入事件</p><p>你可以使用 <a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#event-binding" target="_blank" rel="noopener">Angular 事件绑定</a>机制来响应任何 <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">DOM 事件</a>。 许多 DOM 事件是由用户输入触发的。绑定这些事件可以获取用户输入。</p><p>要绑定 DOM 事件，只要把 DOM 事件的名字包裹在圆括号中，然后用放在引号中的<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#template-statements" target="_blank" rel="noopener">模板语句</a>对它赋值就可以了。</p><p>下例展示了一个事件绑定，它实现了一个点击事件处理器：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClickMe()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>等号左边的 <code>(click)</code> 表示把按钮的点击事件作为<strong>绑定目标</strong>。 等号右边引号中的文本是<strong>模板语句</strong>，通过调用组件的 <code>onClickMe</code> 方法来响应这个点击事件。</p><p>写绑定时，需要知道模板语句的<strong>执行上下文</strong>。 出现在模板语句中的每个标识符都属于特定的上下文对象。 这个对象通常都是控制此模板的 Angular 组件。 上例中只显示了一行 HTML，那段 HTML 片段属于下面这个组件：</p><pre class=" language-html"><code class="language-html">@Component({  selector: 'app-click-me',  template: `    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClickMe()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    {{clickMessage}}`})export class ClickMeComponent {  clickMessage = '';  onClickMe() {    this.clickMessage = 'You are my hero!';  }}</code></pre><p>当用户点击按钮时，Angular 调用 <code>ClickMeComponent</code> 的 <code>onClickMe</code> 方法。</p></li><li><p>通过 $event 对象取得用户输入</p><p>DOM 事件可以携带可能对组件有用的信息。 本节将展示如何绑定输入框的 <code>keyup</code> 事件，在每个敲击键盘时获取用户输入。</p><p>下面的代码监听 <code>keyup</code> 事件，并将整个事件载荷 (<code>$event</code>) 传递给组件的事件处理器。</p><pre class=" language-typescript"><code class="language-typescript">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;input (keyup)="onKey($event)">  &lt;p>{{values}}&lt;/p>`</span></span></code></pre><p>当用户按下并释放一个按键时，触发 <code>keyup</code> 事件，Angular 在 <code>$event</code> 变量提供一个相应的 DOM 事件对象，上面的代码将它作为参数传递给 <code>onKey()</code> 方法。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">KeyUpComponent_v1</span> <span class="token punctuation">{</span>  values <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token function">onKey</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// without type info</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">+</span><span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">' | '</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>$event</code> 对象的属性取决于 DOM 事件的类型。例如，鼠标事件与输入框编辑事件包含了不同的信息。</p><p>所有<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event" target="_blank" rel="noopener">标准 DOM 事件对象</a>都有一个 <code>target</code> 属性， 引用触发该事件的元素。 在本例中，<code>target</code> 是<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement" target="_blank" rel="noopener">`` 元素</a>， <code>event.target.value</code> 返回该元素的当前内容。</p><p>在组件的 <code>onKey()</code> 方法中，把输入框的值和分隔符 (|) 追加组件的 <code>values</code> 属性。 使用<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#interpolation" target="_blank" rel="noopener">插值表达式</a>来把存放累加结果的 <code>values</code> 属性回显到屏幕上。</p></li></ol><h2 id="3-4-生命周期钩子"><a href="#3-4-生命周期钩子" class="headerlink" title="3.4-生命周期钩子"></a>3.4-生命周期钩子</h2><p>每个组件都有一个被 Angular 管理的生命周期。</p><p>Angular 创建它，渲染它，创建并渲染它的子组件，在它被绑定的属性发生变化时检查它，并在它从 DOM 中被移除前销毁它。</p><p>Angular 提供了<strong>生命周期钩子</strong>，把这些关键生命时刻暴露出来，赋予你在它们发生时采取行动的能力。</p><p>除了那些组件内容和视图相关的钩子外,指令有相同生命周期钩子。</p><ol><li><p>组件生命周期钩子概览</p><p>指令和组件的实例有一个生命周期：当 Angular 新建、更新和销毁它们时触发。 通过实现一个或多个 Angular <code>core</code> 库里定义的<em>生命周期钩子</em>接口，开发者可以介入该生命周期中的这些关键时刻。</p><p>每个接口都有唯一的一个钩子方法，它们的名字是由接口名再加上 <code>ng</code> 前缀构成的。比如，<code>OnInit</code> 接口的钩子方法叫做 <code>ngOnInit</code>， Angular 在创建组件后立刻调用它，：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PeekABoo</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> logger<span class="token punctuation">:</span> LoggerService<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// implement OnInit's `ngOnInit` method</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">logIt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`OnInit`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">logIt</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextId<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>没有指令或者组件会实现所有这些接口，并且有些钩子只对组件有意义。只有在指令/组件中<em>定义过的</em>那些钩子方法才会被 Angular 调用。</p></li><li><p>生命周期的顺序</p><p>当 Angular 使用构造函数新建一个组件或指令后，就会按下面的顺序在特定时刻调用这些生命周期钩子方法：</p><table><thead><tr><th>钩子</th><th>用途及时机</th></tr></thead><tbody><tr><td>ngOnChanges()</td><td>当 Angular（重新）设置数据绑定输入属性时响应。 该方法接受当前和上一属性值的 <code>SimpleChanges</code> 对象<br>在 <code>ngOnInit()</code> 之前以及所绑定的一个或多个输入属性的值发生变化时都会调用。</td></tr><tr><td>ngOnInit()</td><td>在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。<br>在第一轮 <code>ngOnChanges()</code> 完成之后调用，只调用<strong>一次</strong>。</td></tr><tr><td>ngDoCheck()</td><td>检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。<br>在每个变更检测周期中，紧跟在 <code>ngOnChanges()</code> 和 <code>ngOnInit()</code> 后面调用。</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/router/RouterLinkActive#ngAfterContentInit" target="_blank" rel="noopener">ngAfterContentInit()</a></td><td>当 Angular 把外部内容投影进组件/指令的视图之后调用。<br>第一次 <code>ngDoCheck()</code> 之后调用，只调用一次。</td></tr><tr><td>ngAfterContentChecked()</td><td>每当 Angular 完成被投影组件内容的变更检测之后调用。<br><code>ngAfterContentInit()</code> 和每次 <code>ngDoCheck()</code> 之后调用</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/forms/NgForm#ngAfterViewInit" target="_blank" rel="noopener">ngAfterViewInit()</a></td><td>当 Angular 初始化完组件视图及其子视图之后调用。<br>第一次 <code>ngAfterContentChecked()</code> 之后调用，只调用一次。</td></tr><tr><td>ngAfterViewChecked()</td><td>每当 Angular 做完组件视图和子视图的变更检测之后调用。<br><code>ngAfterViewInit()</code> 和每次 <code>ngAfterContentChecked()</code> 之后调用。</td></tr><tr><td>ngOnDestroy()</td><td>每当 Angular 每次销毁指令/组件之前调用并清扫。 在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。<br>在 Angular 销毁指令/组件之前调用。</td></tr></tbody></table></li></ol><h2 id="3-5-组件之间的交互"><a href="#3-5-组件之间的交互" class="headerlink" title="3.5-组件之间的交互"></a>3.5-组件之间的交互</h2><ol><li><p>通过输入型绑定把数据从父组件传到子组件</p><p><code>HeroChildComponent</code> 有两个<strong><em>输入型属性\</em></strong>，它们通常带<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#inputs-outputs" target="_blank" rel="noopener">@Input 装饰器</a>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Hero <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./hero'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-hero-child'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h3>{{hero.name}} says:&lt;/h3>    &lt;p>I, {{hero.name}}, am at your service, {{masterName}}.&lt;/p>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroChildComponent</span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> hero<span class="token punctuation">:</span> Hero<span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">'master'</span><span class="token punctuation">)</span> masterName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二个 <code>@Input</code> 为子组件的属性名 <code>masterName</code> 指定一个别名 <code>master</code>(译者注：不推荐为起别名，请参见风格指南).</p><p>父组件 <code>HeroParentComponent</code> 把子组件的 <code>HeroChildComponent</code> 放到 <code>*ngFor</code> 循环器中，把自己的 <code>master</code> 字符串属性绑定到子组件的 <code>master</code> 别名上，并把每个循环的 <code>hero</code> 实例绑定到子组件的 <code>hero</code> 属性。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HEROES <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./hero'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-hero-parent'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h2>{{master}} controls {{heroes.length}} heroes&lt;/h2>    &lt;app-hero-child *ngFor="let hero of heroes"      [hero]="hero"      [master]="master">    &lt;/app-hero-child>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroParentComponent</span> <span class="token punctuation">{</span>  heroes <span class="token operator">=</span> HEROES<span class="token punctuation">;</span>  master <span class="token operator">=</span> <span class="token string">'Master'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行应用程序会显示三个英雄：</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/parent-to-child.png" alt="parent-to-child"></p></li><li><p>通过 setter 截听输入属性值的变化</p><p>使用一个输入属性的 setter，以拦截父组件中值的变化，并采取行动。</p><p>子组件 <code>NameChildComponent</code> 的输入属性 <code>name</code> 上的这个 setter，会 trim 掉名字里的空格，并把空值替换成默认字符串。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-name-child'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>"{{name}}"&lt;/h3>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NameChildComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> _name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'&lt;no name set>'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面的 <code>NameParentComponent</code> 展示了各种名字的处理方式，包括一个全是空格的名字。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-name-parent'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;h2>Master controls {{names.length}} names&lt;/h2>  &lt;app-name-child *ngFor="let name of names" [name]="name">&lt;/app-name-child>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NameParentComponent</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Displays 'Dr IQ', '&lt;no name set>', 'Bombasto'</span>  names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dr IQ'</span><span class="token punctuation">,</span> <span class="token string">'   '</span><span class="token punctuation">,</span> <span class="token string">'  Bombasto  '</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2020/01/15/angular-xue-xi-bi-ji/setter.png" alt="setter"></p></li><li><p>通过ngOnChanges()来截听输入属性值的变化</p><p>使用 <code>OnChanges</code> 生命周期钩子接口的 <code>ngOnChanges()</code> 方法来监测输入属性值的变化并做出回应。</p><p>当需要监视多个、交互式输入属性的时候，本方法比用属性的 setter 更合适。</p><p>这个 <code>VersionChildComponent</code> 会监测输入属性 <code>major</code> 和 <code>minor</code> 的变化，并把这些变化编写成日志以报告这些变化。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> OnChanges<span class="token punctuation">,</span> SimpleChange <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-version-child'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h3>Version {{major}}.{{minor}}&lt;/h3>    &lt;h4>Change log:&lt;/h4>    &lt;ul>      &lt;li *ngFor="let change of changeLog">{{change}}&lt;/li>    &lt;/ul>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VersionChildComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnChanges</span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> major<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> minor<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  changeLog<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">ngOnChanges</span><span class="token punctuation">(</span>changes<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>propKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> SimpleChange<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> log<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> propName <span class="token keyword">in</span> changes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> changedProp <span class="token operator">=</span> changes<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> to <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>changedProp<span class="token punctuation">.</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>changedProp<span class="token punctuation">.</span><span class="token function">isFirstChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Initial value of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> set to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token keyword">from</span> <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>changedProp<span class="token punctuation">.</span>previousValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> changed from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>changeLog<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>VersionParentComponent</code> 提供 <code>minor</code> 和 <code>major</code> 值，把修改它们值的方法绑定到按钮上。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-version-parent'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h2>Source code version&lt;/h2>    &lt;button (click)="newMinor()">New minor version&lt;/button>    &lt;button (click)="newMajor()">New major version&lt;/button>    &lt;app-version-child [major]="major" [minor]="minor">&lt;/app-version-child>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VersionParentComponent</span> <span class="token punctuation">{</span>  major <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  minor <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>  <span class="token function">newMinor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minor<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">newMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>major<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面是点击按钮的结果。</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/parent-to-child-on-changes.gif" alt="parent-to-child-on-changes"></p></li><li><p>父组件监听子组件的事件</p><p>子组件暴露一个 <code>EventEmitter</code> 属性，当事件发生时，子组件利用该属性 <code>emits</code>(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应。</p><p>子组件的 <code>EventEmitter</code> 属性是一个<strong>输出属性</strong>，通常带有<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#inputs-outputs" target="_blank" rel="noopener">@Output 装饰器</a>，就像在 <code>VoterComponent</code> 中看到的。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Output <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-voter'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h4>{{name}}&lt;/h4>    &lt;button (click)="vote(true)"  [disabled]="didVote">Agree&lt;/button>    &lt;button (click)="vote(false)" [disabled]="didVote">Disagree&lt;/button>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VoterComponent</span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> voted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  didVote <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token function">vote</span><span class="token punctuation">(</span>agreed<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>voted<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>agreed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>didVote <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>点击按钮会触发 <code>true</code> 或 <code>false</code>(布尔型<em>有效载荷</em>)的事件。</p><p>父组件 <code>VoteTakerComponent</code> 绑定了一个事件处理器(<code>onVoted()</code>)，用来响应子组件的事件(<code>$event</code>)并更新一个计数器。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span>      <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-vote-taker'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h2>Should mankind colonize the Universe?&lt;/h2>    &lt;h3>Agree: {{agreed}}, Disagree: {{disagreed}}&lt;/h3>    &lt;app-voter *ngFor="let voter of voters"      [name]="voter"      (voted)="onVoted($event)">    &lt;/app-voter>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VoteTakerComponent</span> <span class="token punctuation">{</span>  agreed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  disagreed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  voters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Narco'</span><span class="token punctuation">,</span> <span class="token string">'Celeritas'</span><span class="token punctuation">,</span> <span class="token string">'Bombasto'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">onVoted</span><span class="token punctuation">(</span>agreed<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    agreed <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agreed<span class="token operator">++</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disagreed<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本框架把事件参数(用 <code>$event</code> 表示)传给事件处理方法，该方法会处理它：</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/child-to-parent.gif" alt="child-to-parent"></p></li><li><p>父组件与子组件通过本地变量互动</p><p>父组件不能使用数据绑定来读取子组件的属性或调用子组件的方法。但可以在父组件模板里，新建一个本地变量来代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法，如下例所示。</p></li></ol><p>   子组件 <code>CountdownTimerComponent</code> 进行倒计时，归零时发射一个导弹。<code>start</code> 和 <code>stop</code> 方法负责控制时钟并在模板里显示倒计时的状态信息。</p><pre class=" language-typescript"><code class="language-typescript">   <span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnDestroy<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>   @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     selector<span class="token punctuation">:</span> <span class="token string">'app-countdown-timer'</span><span class="token punctuation">,</span>     template<span class="token punctuation">:</span> <span class="token string">'&lt;p>{{message}}&lt;/p>'</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CountdownTimerComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> OnDestroy <span class="token punctuation">{</span>     intervalId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     message <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>     seconds <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>     <span class="token function">clearTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Holding at T-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> seconds`</span></span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>intervalId <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>seconds <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'Blast off!'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seconds <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// reset</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token template-string"><span class="token string">`T-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> seconds and counting`</span></span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>   计时器组件的宿主组件 <code>CountdownLocalVarParentComponent</code> 如下：</p><pre class=" language-typescript"><code class="language-typescript">   <span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span>                <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token punctuation">{</span> CountdownTimerComponent <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">'./countdown-timer.component'</span><span class="token punctuation">;</span>   @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     selector<span class="token punctuation">:</span> <span class="token string">'app-countdown-parent-lv'</span><span class="token punctuation">,</span>     template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`     &lt;h3>Countdown to Liftoff (via local variable)&lt;/h3>     &lt;button (click)="timer.start()">Start&lt;/button>     &lt;button (click)="timer.stop()">Stop&lt;/button>     &lt;div class="seconds">{{timer.seconds}}&lt;/div>     &lt;app-countdown-timer #timer>&lt;/app-countdown-timer>     `</span></span><span class="token punctuation">,</span>     styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'../assets/demo.css'</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CountdownLocalVarParentComponent</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>   父组件不能通过数据绑定使用子组件的 <code>start</code> 和 <code>stop</code> 方法，也不能访问子组件的 <code>seconds</code> 属性。</p><p>   把本地变量(<code>#timer</code>)放到(``)标签中，用来代表子组件。这样父组件的模板就得到了子组件的引用，于是可以在父组件的模板中访问子组件的所有属性和方法。</p><p>   这个例子把父组件的按钮绑定到子组件的 <code>start</code> 和 <code>stop</code> 方法，并用插值表达式来显示子组件的 <code>seconds</code> 属性。</p><p>   下面是父组件和子组件一起工作时的效果。</p><p>   <img src="/2020/01/15/angular-xue-xi-bi-ji/countdown-timer-anim.gif" alt="countdown-timer-anim"></p><ol start="6"><li><p>父组件调用@ViewChild()</p><p>这个<em>本地变量</em>方法是个简单便利的方法。但是它也有局限性，因为父组件-子组件的连接必须全部在父组件的模板中进行。父组件本身的代码对子组件没有访问权。</p><p>如果父组件的<em>类</em>需要读取子组件的属性值或调用子组件的方法，就不能使用<em>本地变量</em>方法。</p><p>当父组件<em>类</em>需要这种访问时，可以把子组件作为 <em>ViewChild</em>，<strong><em>注入\</em></strong>到父组件里面。</p><p>下面是父组件 <code>CountdownViewChildParentComponent</code>:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> AfterViewInit<span class="token punctuation">,</span> ViewChild <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span>                <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CountdownTimerComponent <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">'./countdown-timer.component'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-countdown-parent-vc'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;h3>Countdown to Liftoff (via ViewChild)&lt;/h3>  &lt;button (click)="start()">Start&lt;/button>  &lt;button (click)="stop()">Stop&lt;/button>  &lt;div class="seconds">{{ seconds() }}&lt;/div>  &lt;app-countdown-timer>&lt;/app-countdown-timer>  `</span></span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'../assets/demo.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CountdownViewChildParentComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AfterViewInit</span> <span class="token punctuation">{</span>  @<span class="token function">ViewChild</span><span class="token punctuation">(</span>CountdownTimerComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> timerComponent<span class="token punctuation">:</span> CountdownTimerComponent<span class="token punctuation">;</span>  <span class="token function">seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...</span>    <span class="token comment" spellcheck="true">// but wait a tick first to avoid one-time devMode</span>    <span class="token comment" spellcheck="true">// unidirectional-data-flow-violation error</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>seconds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>timerComponent<span class="token punctuation">.</span>seconds<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timerComponent<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timerComponent<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>把子组件的视图插入到父组件类需要做一点额外的工作。</p><p>首先，你必须导入对装饰器 <code>ViewChild</code> 以及生命周期钩子 <code>AfterViewInit</code> 的引用。</p><p>接着，通过 <code>@ViewChild</code> 属性装饰器，将子组件 <code>CountdownTimerComponent</code> 注入到私有属性 <code>timerComponent</code> 里面。</p><p>组件元数据里就不再需要 <code>#timer</code> 本地变量了。而是把按钮绑定到父组件自己的 <code>start</code> 和 <code>stop</code> 方法，使用父组件的 <code>seconds</code> 方法的插值表达式来展示秒数变化。</p><p>这些方法可以直接访问被注入的计时器组件。</p><p><code>ngAfterViewInit()</code> 生命周期钩子是非常重要的一步。被注入的计时器组件只有在 Angular 显示了父组件视图之后才能访问，所以它先把秒数显示为 0.</p><p>然后 Angular 会调用 <code>ngAfterViewInit</code> 生命周期钩子，但这时候再更新父组件视图的倒计时就已经太晚了。Angular 的单向数据流规则会阻止在同一个周期内更新父组件视图。应用在显示秒数之前会被迫<em>再等一轮</em>。</p><p>使用 <code>setTimeout()</code> 来等下一轮，然后改写 <code>seconds()</code> 方法，这样它接下来就会从注入的这个计时器组件里获取秒数的值。</p></li><li><p>父组件和子组件通过服务来通讯</p><p>父组件和它的子组件共享同一个服务，利用该服务在组件家族内部实现双向通讯。</p><p>该服务实例的作用域被限制在父组件和其子组件内。这个组件子树之外的组件将无法访问该服务或者与它们通讯。</p><p>这个 MissionService 把 MissionControlComponent 和多个 AstronautComponent 子组件连接起来。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Subject <span class="token punctuation">}</span>    <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MissionService</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Observable string sources</span>  <span class="token keyword">private</span> missionAnnouncedSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> missionConfirmedSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Observable string streams</span>  missionAnnounced$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>missionAnnouncedSource<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  missionConfirmed$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>missionConfirmedSource<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Service message commands</span>  <span class="token function">announceMission</span><span class="token punctuation">(</span>mission<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>missionAnnouncedSource<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>mission<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">confirmMission</span><span class="token punctuation">(</span>astronaut<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>missionConfirmedSource<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>astronaut<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>MissionControlComponent</code> 提供服务的实例，并将其共享给它的子组件(通过 <code>providers</code> 元数据数组)，子组件可以通过构造函数将该实例注入到自身。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span>          <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MissionService <span class="token punctuation">}</span>     <span class="token keyword">from</span> <span class="token string">'./mission.service'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-mission-control'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;h2>Mission Control&lt;/h2>    &lt;button (click)="announce()">Announce mission&lt;/button>    &lt;app-astronaut *ngFor="let astronaut of astronauts"      [astronaut]="astronaut">    &lt;/app-astronaut>    &lt;h3>History&lt;/h3>    &lt;ul>      &lt;li *ngFor="let event of history">{{event}}&lt;/li>    &lt;/ul>  `</span></span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>MissionService<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MissionControlComponent</span> <span class="token punctuation">{</span>  astronauts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Lovell'</span><span class="token punctuation">,</span> <span class="token string">'Swigert'</span><span class="token punctuation">,</span> <span class="token string">'Haise'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  history<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  missions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Fly to the moon!'</span><span class="token punctuation">,</span>              <span class="token string">'Fly to mars!'</span><span class="token punctuation">,</span>              <span class="token string">'Fly to Vegas!'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  nextMission <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> missionService<span class="token punctuation">:</span> MissionService<span class="token punctuation">)</span> <span class="token punctuation">{</span>    missionService<span class="token punctuation">.</span>missionConfirmed$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>      astronaut <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>astronaut<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> confirmed the mission`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">announce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> mission <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>missions<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextMission<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>missionService<span class="token punctuation">.</span><span class="token function">announceMission</span><span class="token punctuation">(</span>mission<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Mission "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mission<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" announced`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextMission <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>missions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextMission <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>AstronautComponent</code> 也通过自己的构造函数注入该服务。由于每个 <code>AstronautComponent</code> 都是 <code>MissionControlComponent</code> 的子组件，所以它们获取到的也是父组件的这个服务实例。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> OnDestroy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MissionService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mission.service'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Subscription <span class="token punctuation">}</span>   <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-astronaut'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;p>      {{astronaut}}: &lt;strong>{{mission}}&lt;/strong>      &lt;button        (click)="confirm()"        [disabled]="!announced || confirmed">        Confirm      &lt;/button>    &lt;/p>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AstronautComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnDestroy</span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> astronaut<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  mission <span class="token operator">=</span> <span class="token string">'&lt;no mission announced>'</span><span class="token punctuation">;</span>  confirmed <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  announced <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  subscription<span class="token punctuation">:</span> Subscription<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> missionService<span class="token punctuation">:</span> MissionService<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription <span class="token operator">=</span> missionService<span class="token punctuation">.</span>missionAnnounced$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>      mission <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mission <span class="token operator">=</span> mission<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>announced <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>confirmed <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>confirmed <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>missionService<span class="token punctuation">.</span><span class="token function">confirmMission</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>astronaut<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// prevent memory leak when component destroyed</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><em>History</em> 日志证明了：在父组件 <code>MissionControlComponent</code> 和子组件 <code>AstronautComponent</code> 之间，信息通过该服务实现了双向传递。</p><p><img src="/2020/01/15/angular-xue-xi-bi-ji/bidirectional-service.gif" alt="bidirectional-service"></p></li></ol><h2 id="3-6-管道"><a href="#3-6-管道" class="headerlink" title="3.6-管道"></a>3.6-管道</h2><p>每个应用开始的时候差不多都是一些简单任务：获取数据、转换它们，然后把它们显示给用户。 获取数据可能简单到创建一个局部变量就行，也可能复杂到从 WebSocket 中获取数据流。</p><p>一旦取到数据，你就可以把它们原始值的 <code>toString</code> 结果直接推入视图中。 但这种做法很少能具备良好的用户体验。 比如，几乎每个人都更喜欢简单的日期格式，例如1988-04-15，而不是服务端传过来的原始字符串格式 —— Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)。</p><p>显然，有些值最好显示成用户友好的格式。你很快就会发现，在很多不同的应用中，都在重复做出某些相同的变换。 你几乎会把它们看做某种 CSS 样式，事实上，你也确实更喜欢在 HTML 模板中应用它们 —— 就像 CSS 样式一样。</p><p>通过引入 Angular 管道（一种编写”从显示到值”转换逻辑的途径），你可以把它声明在 HTML 中。</p><ol><li><p>使用管道</p><p>管道把数据作为输入，然后转换它，给出期望的输出。 你要把组件的 <code>birthday</code> 属性转换成对人类更友好的日期格式。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-hero-birthday'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;p>The hero's birthday is {{ birthday | date }}&lt;/p>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroBirthdayComponent</span> <span class="token punctuation">{</span>  birthday <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1988</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// April 15, 1988</span><span class="token punctuation">}</span></code></pre><p>重点看下组件的模板。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The hero's birthday is {{ birthday | date }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>在这个插值表达式中，你让组件的 <code>birthday</code> 值通过<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#pipe" target="_blank" rel="noopener">管道操作符</a>( | )流动到 右侧的<a href="http://angular-doc.paas.cmbchina.cn/api/common/DatePipe" target="_blank" rel="noopener">Date 管道</a>函数中。所有管道都会用这种方式工作。</p></li><li><p>内置的管道</p><p>Angular 内置了一些管道，比如 DatePipe、UpperCasePipe、LowerCasePipe、CurrencyPipe 和 PercentPipe。 它们全都可以直接用在任何模板中。</p></li><li><p>对管道进行参数化</p><p>管道可能接受任何数量的可选参数来对它的输出进行微调。 可以在管道名后面添加一个冒号( : )再跟一个参数值，来为管道添加参数(比如 <code>currency:&#39;EUR&#39;</code>)。 如果这个管道可以接受多个参数，那么就用冒号来分隔这些参数值(比如 <code>slice:1:5</code>)。</p><p>修改生日模板，来为这个日期管道提供一个格式化参数。 当格式化完该英雄的 4 月 15 日生日之后，它应该被渲染成<strong>04/15/88</strong>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The hero's birthday is {{ birthday | date:"MM/dd/yy" }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>参数值可以是任何有效的模板表达式（参见<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax" target="_blank" rel="noopener">模板语法</a>中的<a href="http://angular-doc.paas.cmbchina.cn/guide/template-syntax#template-expressions" target="_blank" rel="noopener">模板表达式</a>部分），比如字符串字面量或组件的属性。 换句话说，借助属性绑定，你也可以像用绑定来控制生日的值一样，控制生日的显示格式。</p><p>来写第二个组件，它把管道的格式参数<em>绑定</em>到该组件的 <code>format</code> 属性。这里是新组件的模板：</p><pre class=" language-typescript"><code class="language-typescript">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;p>The hero's birthday is {{ birthday | date:format }}&lt;/p>  &lt;button (click)="toggleFormat()">Toggle Format&lt;/button>`</span></span></code></pre></li><li><p>自定义管道</p><p>你还可以写自己的自定义管道。 下面就是一个名叫 <code>ExponentialStrengthPipe</code> 的管道，它可以放大英雄的能力：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Pipe<span class="token punctuation">,</span> PipeTransform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * Raise the value exponentially * Takes an exponent argument that defaults to 1. * Usage: *   value | exponentialStrength:exponent * Example: *   {{ 2 | exponentialStrength:10 }} *   formats to: 1024*/</span>@<span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'exponentialStrength'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ExponentialStrengthPipe</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>  <span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> exponent<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个管道的定义中体现了几个关键点：</p><ul><li>管道是一个带有“管道元数据(pipe metadata)”装饰器的类。</li><li>这个管道类实现了 <code>PipeTransform</code> 接口的 <code>transform</code> 方法，该方法接受一个输入值和一些可选参数，并返回转换后的值。</li><li>当每个输入值被传给 <code>transform</code> 方法时，还会带上另一个参数，比如你这个管道就有一个 <code>exponent</code>(放大指数) 参数。</li><li>可以通过 <code>@Pipe</code> 装饰器来告诉 Angular：这是一个管道。该装饰器是从 Angular 的 <code>core</code> 库中引入的。</li><li>这个 <code>@Pipe</code> 装饰器允许你定义管道的名字，这个名字会被用在模板表达式中。它必须是一个有效的 JavaScript 标识符。 比如，你这个管道的名字是 <code>exponentialStrength</code>。</li></ul></li></ol><h1 id="4-表单"><a href="#4-表单" class="headerlink" title="4-表单"></a>4-表单</h1><h2 id="4-1-表单简介"><a href="#4-1-表单简介" class="headerlink" title="4.1-表单简介"></a>4.1-表单简介</h2><p>用表单处理用户输入是许多常见应用的基础功能。 应用通过表单来让用户登录、修改个人档案、输入敏感信息以及执行各种数据输入任务。</p><p>Angular 提供了两种不同的方法来通过表单处理用户输入：响应式表单和模板驱动表单。 两者都从视图中捕获用户输入事件、验证用户输入、创建表单模型、修改数据模型，并提供跟踪这些更改的途径。</p><p>不过，响应式表单和模板驱动表单在如何处理和管理表单和表单数据方面有所不同。各有优势。</p><p><strong>一般来说：</strong></p><ul><li><strong>响应式表单</strong>更健壮：它们的可扩展性、可复用性和可测试性更强。 如果表单是应用中的关键部分，或者你已经准备使用响应式编程模式来构建应用，请使用响应式表单。</li><li><strong>模板驱动表单</strong>在往应用中添加简单的表单时非常有用，比如邮件列表的登记表单。它们很容易添加到应用中，但是不像响应式表单那么容易扩展。如果你有非常基本的表单需求和简单到能用模板管理的逻辑，请使用模板驱动表单。</li></ul><table><thead><tr><th></th><th>响应式</th><th>模板驱动</th></tr></thead><tbody><tr><td>建立（表单模式）</td><td>显式，在组件类中创建。</td><td>隐式，由组件创建。</td></tr><tr><td>数据模式</td><td>结构化</td><td>非结构化</td></tr><tr><td>可预测性</td><td>同步</td><td>异步</td></tr><tr><td>表单验证</td><td>函数</td><td>指令</td></tr><tr><td>可变性</td><td>不可变</td><td>可变</td></tr><tr><td>可伸缩性</td><td>访问底层API</td><td>在API之上的抽象</td></tr></tbody></table><h2 id="4-2-响应式表单"><a href="#4-2-响应式表单" class="headerlink" title="4.2-响应式表单"></a>4.2-响应式表单</h2><p><em>响应式表单</em>提供了一种模型驱动的方式来处理表单输入，其中的值会随时间而变化。本文会向你展示如何创建和更新单个表单控件，然后在一个分组中使用多个控件，验证表单的值，以及如何实现更高级的表单。</p><p>响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。响应式表单是围绕 Observable 的流构建的，表单的输入和值都是通过这些输入值组成的流来提供的，它可以同步访问。</p><p>响应式表单还提供了一种更直观的测试路径，因为在请求时你可以确信这些数据是一致的、可预料的。这个流的任何一个消费者都可以安全地操纵这些数据。</p><p>响应式表单与模板驱动的表单有着显著的不同点。响应式表单通过对数据模型的同步访问提供了更多的可预测性，使用 Observable 的操作符提供了不可变性，并且通过 Observable 流提供了变化追踪功能。 如果你更喜欢在模板中直接访问数据，那么模板驱动的表单会显得更明确，因为它们依赖嵌入到模板中的指令，并借助可变数据来异步跟踪变化。参见<a href="http://angular-doc.paas.cmbchina.cn/guide/forms-overview" target="_blank" rel="noopener">表单概览</a>来了解这两种范式之间的详细比较。</p><ul><li><p>注册 ReactiveFormsModule</p><p>要使用响应式表单，就要从 <code>@angular/forms</code> 包中导入 <code>ReactiveFormsModule</code> 并把它添加到你的 NgModule 的 <code>imports</code> 数组中。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ReactiveFormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// other imports ...</span>    ReactiveFormsModule  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre></li><li><p>生成并导入一个新的表单控件</p><p><code>ng generate component NameEditor</code></p><p>当使用响应式表单时，<code>FormControl</code> 类是最基本的构造块。要注册单个的表单控件，请在组件中导入 <code>FormControl</code> 类，并创建一个 <code>FormControl</code> 的新实例，把它保存在类的某个属性中。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> FormControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-name-editor'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./name-editor.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./name-editor.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NameEditorComponent</span> <span class="token punctuation">{</span>  name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以用 <code>FormControl</code> 的构造函数设置初始值，这个例子中它是空字符串。通过在你的组件类中创建这些控件，你可以直接对表单控件的状态进行监听、修改和校验。</p></li><li><p>在模板中注册该控件</p><p>在组件类中创建了控件之后，你还要把它和模板中的一个表单控件关联起来。修改模板，为表单控件添加 formControl 绑定，formControl 是由 ReactiveFormsModule 中的 FormControlDirective 提供的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>  Name:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">[formControl]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="4-3-模板驱动表单"><a href="#4-3-模板驱动表单" class="headerlink" title="4.3-模板驱动表单"></a>4.3-模板驱动表单</h2><p>开发表单需要设计能力（那超出了本章的范围），而框架支持<em>双向数据绑定、变更检测、验证和错误处理</em>，而本章你将会学到它们。</p><p>这个页面演示了如何从草稿构建一个简单的表单。这个过程中你将学会如何：</p><ul><li>用组件和模板构建 Angular 表单</li><li>用 <code>ngModel</code> 创建双向数据绑定，以读取和写入输入控件的值</li><li>跟踪状态的变化，并验证表单控件</li><li>使用特殊的 CSS 类来跟踪控件的状态并给出视觉反馈</li><li>向用户显示验证错误提示，以及启用/禁用表单控件</li><li>使用模板引用变量在 HTML 元素之间共享信息</li></ul><ol><li><p>创建 Hero 模型类</p><p><code>ng generate class Hero</code></p><p>代码如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">public</span> id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token keyword">public</span> power<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token keyword">public</span> alterEgo<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>创建表达组件</p><p><code>ng generate component HeroForm</code></p><p>代码如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Hero <span class="token punctuation">}</span>    <span class="token keyword">from</span> <span class="token string">'../hero'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-hero-form'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./hero-form.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./hero-form.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroFormComponent</span> <span class="token punctuation">{</span>  powers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Really Smart'</span><span class="token punctuation">,</span> <span class="token string">'Super Flexible'</span><span class="token punctuation">,</span>            <span class="token string">'Super Hot'</span><span class="token punctuation">,</span> <span class="token string">'Weather Changer'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'Dr IQ'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>powers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Chuck Overstreet'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  submitted <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>submitted <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// TODO: Remove this when we're done</span>  <span class="token keyword">get</span> <span class="token function">diagnostic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改 app.module.ts</p><p>因为模板驱动的表单位于它们自己的模块，所以在使用表单之前，需要将 <code>FormsModule</code> 添加到应用模块的 <code>imports</code> 数组中。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span>      <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> FormsModule <span class="token punctuation">}</span>   <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">'./app.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HeroFormComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./hero-form/hero-form.component'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule<span class="token punctuation">,</span>    FormsModule  <span class="token punctuation">]</span><span class="token punctuation">,</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    AppComponent<span class="token punctuation">,</span>    HeroFormComponent  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span> <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre></li><li><p>修改 app.component.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>app<span class="token operator">-</span>hero<span class="token operator">-</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>hero<span class="token operator">-</span>form<span class="token operator">></span></code></pre></li><li><p>创建初始 HTML 表单模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hero Form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alterEgo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Alter Ego<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alterEgo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="5-Observable和RxJS"><a href="#5-Observable和RxJS" class="headerlink" title="5-Observable和RxJS"></a>5-Observable和RxJS</h1><h2 id="5-1-可观察对象（Observable）"><a href="#5-1-可观察对象（Observable）" class="headerlink" title="5.1-可观察对象（Observable）"></a>5.1-可观察对象（Observable）</h2><p>可观察对象支持在应用中的发布者和订阅者之间传递消息。 在需要进行事件处理、异步编程和处理多个值的时候，可观察对象相对其它技术有着显著的优点。</p><p>可观察对象是声明式的 —— 也就是说，虽然你定义了一个用于发布值的函数，但是在有消费者订阅它之前，这个函数并不会实际执行。 订阅之后，当这个函数执行完或取消订阅时，订阅者就会收到通知。</p><p>可观察对象可以发送多个任意类型的值 —— 字面量、消息、事件。无论这些值是同步发送的还是异步发送的，接收这些值的 API 都是一样的。 由于准备（setup）和清场（teardown）的逻辑都是由可观察对象自己处理的，因此你的应用代码只管订阅并消费这些值就可以了，做完之后，取消订阅。无论这个流是击键流、HTTP 响应流还是定时器，对这些值进行监听和停止监听的接口都是一样的。</p><ul><li><p>基本用法</p><p>作为发布者，你创建一个 <code>Observable</code> 的实例，其中定义了一个<em>订阅者（subscriber）</em>函数。 当有消费者调用 <code>subscribe()</code> 方法时，这个函数就会执行。 订阅者函数用于定义“如何获取或生成那些要发布的值或消息”。</p><p>要执行所创建的可观察对象，并开始从中接收通知，你就要调用它的 <code>subscribe()</code> 方法，并传入一个<em>观察者（observer）</em>。 这是一个 JavaScript 对象，它定义了你收到的这些消息的处理器（handler）。 <code>subscribe()</code> 调用会返回一个 <code>Subscription</code> 对象，该对象具有一个 <code>unsubscribe()</code> 方法。 当调用该方法时，你就会停止接收通知。</p><p>下面这个例子中示范了这种基本用法，它展示了如何使用可观察对象来对当前地理位置进行更新。</p><p>Observe geolocation updates</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Create an Observable that will start listening to geolocation updates</span><span class="token comment" spellcheck="true">// when a consumer subscribes.</span><span class="token keyword">const</span> locations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Get the next and error callbacks. These will be passed in when</span>  <span class="token comment" spellcheck="true">// the consumer subscribes.</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>next<span class="token punctuation">,</span> error<span class="token punctuation">}</span> <span class="token operator">=</span> observer<span class="token punctuation">;</span>  <span class="token keyword">let</span> watchId<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Simple geolocation API check provides values to publish</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'geolocation'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    watchId <span class="token operator">=</span> navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">watchPosition</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Geolocation not available'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// When the consumer unsubscribes, clean up data ready for next subscription.</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">clearWatch</span><span class="token punctuation">(</span>watchId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Call subscribe() to start listening for updates.</span><span class="token keyword">const</span> locationsSubscription <span class="token operator">=</span> locations<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Current Position: '</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error Getting Location: '</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Stop listening for location after 10 seconds</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> locationsSubscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>定义观察者</p><p>用于接收可观察对象通知的处理器要实现 <code>Observer</code> 接口。这个对象定义了一些回调函数来处理可观察对象可能会发来的三种通知：</p><table><thead><tr><th>通知类型</th><th>说明</th></tr></thead><tbody><tr><td>next</td><td>必要。用来处理每个送达值。在开始执行后可能执行零次或多次。</td></tr><tr><td>error</td><td>可选。用来处理错误通知。错误会中断这个可观察对象实例的执行过程。</td></tr><tr><td>complete</td><td>可选。用来处理执行完毕（complete）通知。当执行完毕后，这些值就会继续传给下一个处理器。</td></tr></tbody></table><p>观察者对象可以定义这三种处理器的任意组合。如果你不为某种通知类型提供处理器，这个观察者就会忽略相应类型的通知。</p></li><li><p>订阅</p><p>只有当有人订阅 <code>Observable</code> 的实例时，它才会开始发布值。 订阅时要先调用该实例的 <code>subscribe()</code> 方法，并把一个观察者对象传给它，用来接收通知。</p><p>下面的例子会创建并订阅一个简单的可观察对象，它的观察者会把接收到的消息记录到控制台中：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Create simple observable that emits three values</span><span class="token keyword">const</span> myObservable <span class="token operator">=</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create observer object</span><span class="token keyword">const</span> myObserver <span class="token operator">=</span> <span class="token punctuation">{</span>  next<span class="token punctuation">:</span> x <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer got a next value: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Observer got an error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>  complete<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer got a complete notification'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Execute with the observer object</span>myObservable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>myObserver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Logs:</span><span class="token comment" spellcheck="true">// Observer got a next value: 1</span><span class="token comment" spellcheck="true">// Observer got a next value: 2</span><span class="token comment" spellcheck="true">// Observer got a next value: 3</span><span class="token comment" spellcheck="true">// Observer got a complete notification</span></code></pre><p>另外，<code>subscribe()</code> 方法还可以接收定义在同一行中的回调函数，无论 <code>next</code>、<code>error</code> 还是 <code>complete</code> 处理器。比如，下面的 <code>subscribe()</code> 调用和前面指定预定义观察者的例子是等价的。</p><pre class=" language-typescript"><code class="language-typescript">myObservable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>  x <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer got a next value: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Observer got an error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer got a complete notification'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>无论哪种情况，<code>next</code> 处理器都是必要的，而 <code>error</code> 和 <code>complete</code> 处理器是可选的。</p><p>注意，<code>next()</code> 函数可以接受消息字符串、事件对象、数字值或各种结构，具体类型取决于上下文。 为了更通用一点，我们把由可观察对象发布出来的数据统称为<em>流</em>。任何类型的值都可以表示为可观察对象，而这些值会被发布为一个流。</p></li><li><p>创建可观察对象</p><p>使用 <code>Observable</code> 构造函数可以创建任何类型的可观察流。 当执行可观察对象的 <code>subscribe()</code> 方法时，这个构造函数就会把它接收到的参数作为订阅函数来运行。 订阅函数会接收一个 <code>Observer</code> 对象，并把值发布给观察者的 <code>next()</code> 方法。</p><p>比如，要创建一个与前面的 <code>of(1, 2, 3)</code> 等价的可观察对象，你可以这样做：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// This function runs when subscribe() is called</span><span class="token keyword">function</span> <span class="token function">sequenceSubscriber</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// synchronously deliver 1, 2, and 3, then complete</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// unsubscribe function doesn't need to do anything in this</span>  <span class="token comment" spellcheck="true">// because values are delivered synchronously</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Create a new Observable that will deliver the above sequence</span><span class="token keyword">const</span> sequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>sequenceSubscriber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// execute the Observable and print the result of each notification</span>sequence<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Finished sequence'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Logs:</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// Finished sequence</span></code></pre><p>如果要略微加强这个例子，我们可以创建一个用来发布事件的可观察对象。在这个例子中，订阅函数是用内联方式定义的。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Add the event handler to the target</span>    target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Detach the event handler from the target</span>      target<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在，你就可以使用这个函数来创建可发布 <code>keydown</code> 事件的可观察对象了：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> ESC_KEY <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span><span class="token keyword">const</span> nameInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> as HTMLInputElement<span class="token punctuation">;</span><span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>nameInput<span class="token punctuation">,</span> <span class="token string">'keydown'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> ESC_KEY<span class="token punctuation">)</span> <span class="token punctuation">{</span>      nameInput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>多播</p><p>典型的可观察对象会为每一个观察者创建一次新的、独立的执行。 当观察者进行订阅时，该可观察对象会连上一个事件处理器，并且向那个观察者发送一些值。当第二个观察者订阅时，这个可观察对象就会连上一个新的事件处理器，并独立执行一次，把这些值发送给第二个可观察对象。</p><p>有时候，不应该对每一个订阅者都独立执行一次，你可能会希望每次订阅都得到同一批值 —— 即使是那些你已经发送过的。这在某些情况下有用，比如用来发送 <code>document</code> 上的点击事件的可观察对象。</p><p><em>多播</em>用来让可观察对象在一次执行中同时广播给多个订阅者。借助支持多播的可观察对象，你不必注册多个监听器，而是复用第一个（<code>next</code>）监听器，并且把值发送给各个订阅者。</p><p>当创建可观察对象时，你要决定你希望别人怎么用这个对象以及是否对它的值进行多播。</p><p>来看一个从 1 到 3 进行计数的例子，它每发出一个数字就会等待 1 秒。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sequenceSubscriber</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Will run through an array of numbers, emitting one value</span>  <span class="token comment" spellcheck="true">// per second until it gets to the end of the array.</span>  <span class="token keyword">function</span> <span class="token function">doSequence</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">doSequence</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">doSequence</span><span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Unsubscribe should clear the timeout to stop execution</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Create a new Observable that will deliver the above sequence</span><span class="token keyword">const</span> sequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>sequenceSubscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>sequence<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Finished sequence'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Logs:</span><span class="token comment" spellcheck="true">// (at 1 second): 1</span><span class="token comment" spellcheck="true">// (at 2 seconds): 2</span><span class="token comment" spellcheck="true">// (at 3 seconds): 3</span><span class="token comment" spellcheck="true">// (at 3 seconds): Finished sequence</span></code></pre><p>注意，如果你订阅了两次，就会有两个独立的流，每个流都会每秒发出一个数字。代码如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Subscribe starts the clock, and will emit after 1 second</span>sequence<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1st subscribe: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1st sequence finished.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// After 1/2 second, subscribe again.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  sequence<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2nd subscribe: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2nd sequence finished.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Logs:</span><span class="token comment" spellcheck="true">// (at 1 second): 1st subscribe: 1</span><span class="token comment" spellcheck="true">// (at 1.5 seconds): 2nd subscribe: 1</span><span class="token comment" spellcheck="true">// (at 2 seconds): 1st subscribe: 2</span><span class="token comment" spellcheck="true">// (at 2.5 seconds): 2nd subscribe: 2</span><span class="token comment" spellcheck="true">// (at 3 seconds): 1st subscribe: 3</span><span class="token comment" spellcheck="true">// (at 3 seconds): 1st sequence finished</span><span class="token comment" spellcheck="true">// (at 3.5 seconds): 2nd subscribe: 3</span><span class="token comment" spellcheck="true">// (at 3.5 seconds): 2nd sequence finished</span></code></pre><p>修改这个可观察对象以支持多播，代码如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">multicastSequenceSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Keep track of each observer (one for every active subscription)</span>  <span class="token keyword">const</span> observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Still a single timeoutId because there will only ever be one</span>  <span class="token comment" spellcheck="true">// set of values being generated, multicasted to each subscriber</span>  <span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Return the subscriber function (runs when subscribe()</span>  <span class="token comment" spellcheck="true">// function is invoked)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// When this is the first subscription, start the sequence</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>observers<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      timeoutId <span class="token operator">=</span> <span class="token function">doSequence</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Iterate through observers and notify all subscriptions</span>          observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obs <span class="token operator">=</span><span class="token operator">></span> obs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Notify all complete callbacks</span>          observers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obs <span class="token operator">=</span><span class="token operator">></span> obs<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> seq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Remove from the observers array so it's no longer notified</span>        observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If there's no more listeners, do cleanup</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>observers<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Run through an array of numbers, emitting one value</span><span class="token comment" spellcheck="true">// per second until it gets to the end of the array.</span><span class="token keyword">function</span> <span class="token function">doSequence</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">doSequence</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token operator">++</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Create a new Observable that will deliver the above sequence</span><span class="token keyword">const</span> multicastSequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token function">multicastSequenceSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Subscribe starts the clock, and begins to emit after 1 second</span>multicastSequence<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1st subscribe: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1st sequence finished.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// After 1 1/2 seconds, subscribe again (should "miss" the first value).</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  multicastSequence<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2nd subscribe: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2nd sequence finished.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Logs:</span><span class="token comment" spellcheck="true">// (at 1 second): 1st subscribe: 1</span><span class="token comment" spellcheck="true">// (at 2 seconds): 1st subscribe: 2</span><span class="token comment" spellcheck="true">// (at 2 seconds): 2nd subscribe: 2</span><span class="token comment" spellcheck="true">// (at 3 seconds): 1st subscribe: 3</span><span class="token comment" spellcheck="true">// (at 3 seconds): 1st sequence finished</span><span class="token comment" spellcheck="true">// (at 3 seconds): 2nd subscribe: 3</span><span class="token comment" spellcheck="true">// (at 3 seconds): 2nd sequence finished</span></code></pre></li><li><p>错误处理</p><p>由于可观察对象会异步生成值，所以用 <code>try/catch</code> 是无法捕获错误的。你应该在观察者中指定一个 <code>error</code> 回调来处理错误。发生错误时还会导致可观察对象清理现有的订阅，并且停止生成值。可观察对象可以生成值（调用 <code>next</code> 回调），也可以调用 <code>complete</code> 或 <code>error</code> 回调来主动结束。</p><pre class=" language-typescript"><code class="language-typescript">myObservable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Next num: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received an errror: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="5-2-RxJS库"><a href="#5-2-RxJS库" class="headerlink" title="5.2-RxJS库"></a>5.2-RxJS库</h2><p>响应式编程是一种面向数据流和变更传播的异步编程范式（<a href="https://zh.wikipedia.org/wiki/响应式编程" target="_blank" rel="noopener">Wikipedia</a>）。RxJS（响应式扩展的 JavaScript 版）是一个使用可观察对象进行响应式编程的库，它让组合异步代码和基于回调的代码变得更简单 (<a href="http://reactivex.io/rxjs/" target="_blank" rel="noopener">RxJS Docs</a>)。</p><p>RxJS 提供了一种对 <code>Observable</code> 类型的实现，直到 <code>Observable</code> 成为了 JavaScript 语言的一部分并且浏览器支持它之前，它都是必要的。这个库还提供了一些工具函数，用于创建和使用可观察对象。这些工具函数可用于：</p><ul><li>把现有的异步代码转换成可观察对象</li><li>迭代流中的各个值</li><li>把这些值映射成其它类型</li><li>对流进行过滤</li><li>组合多个流</li></ul><ol><li><p>创建可观察对象的函数</p><p>RxJS 提供了一些用来创建可观察对象的函数。这些函数可以简化根据某些东西创建可观察对象的过程，比如事件、定时器、承诺等等。</p><p>比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">from</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create an Observable out of a promise</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/endpoint'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Subscribe to begin listening for async result</span>data<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Completed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create an Observable that will publish a value on an interval</span><span class="token keyword">const</span> secondsCounter <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Subscribe to begin publishing values</span>secondsCounter<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`It's been </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> seconds since subscribing!`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>操作符</p><p>操作符是基于可观察对象构建的一些对集合进行复杂操作的函数。RxJS 定义了一些操作符，比如 <code>map()</code>、<code>filter()</code>、<code>concat()</code> 和 <code>flatMap()</code>。</p><p>操作符接受一些配置项，然后返回一个以来源可观察对象为参数的函数。当执行这个返回的函数时，这个操作符会观察来源可观察对象中发出的值，转换它们，并返回由转换后的值组成的新的可观察对象。</p><p>下面是一个简单的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> squareValues <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> squaredNums <span class="token operator">=</span> <span class="token function">squareValues</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>squaredNums<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可以使用<em>管道</em>来把这些操作符链接起来。管道让你可以把多个由操作符返回的函数组合成一个。<code>pipe()</code> 函数以你要组合的这些函数作为参数，并且返回一个新的函数，当执行这个新函数时，就会顺序执行那些被组合进去的函数。</p><p>应用于某个可观察对象上的一组操作符就像一个菜谱 —— 也就是说，对你感兴趣的这些值进行处理的一组操作步骤。这个菜谱本身不会做任何事。你需要调用 <code>subscribe()</code> 来通过这个菜谱生成一个结果。</p><p>例子如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> filter<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create a function that accepts an Observable.</span><span class="token keyword">const</span> squareOddVals <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create an Observable that will run the filter and map functions</span><span class="token keyword">const</span> squareOdd <span class="token operator">=</span> <span class="token function">squareOddVals</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Subscribe to run the combined functions</span>squareOdd<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>pipe()</code> 函数也同时是 RxJS 的 <code>Observable</code> 上的一个方法，所以你可以用下列简写形式来达到同样的效果：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> filter<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> squareOdd <span class="token operator">=</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">*</span> n<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Subscribe to get values</span>squareOdd<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>RxJS 提供了很多操作符，不过只有少数是常用的。 下面是一个常用操作符的列表和用法范例，参见 <a href="https://rxjs-dev.firebaseapp.com/api" target="_blank" rel="noopener">RxJS API 文档</a>。</p></li><li><p>错误处理</p><p>除了可以在订阅时提供 <code>error()</code> 处理器外，RxJS 还提供了 <code>catchError</code> 操作符，它允许你在管道中处理已知错误。</p><p>假设你有一个可观察对象，它发起 API 请求，然后对服务器返回的响应进行映射。如果服务器返回了错误或值不存在，就会生成一个错误。如果你捕获这个错误并提供了一个默认值，流就会继续处理这些值，而不会报错。</p><p>下面是使用 <code>catchError</code> 操作符实现这种效果的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ajax <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/ajax'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> map<span class="token punctuation">,</span> catchError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Return "response" from the API. If an error happens,</span><span class="token comment" spellcheck="true">// return an empty array.</span><span class="token keyword">const</span> apiData <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/api/data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Value expected!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">catchError</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>apiData<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'errors already caught... will not run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="5-3-Angular中的可观察对象"><a href="#5-3-Angular中的可观察对象" class="headerlink" title="5.3-Angular中的可观察对象"></a>5.3-Angular中的可观察对象</h2><p>Angular 使用可观察对象作为处理各种常用异步操作的接口。比如：</p><ul><li><code>EventEmitter</code> 类派生自 <code>Observable</code>。</li><li>HTTP 模块使用可观察对象来处理 AJAX 请求和响应。</li><li>路由器和表单模块使用可观察对象来监听对用户输入事件的响应。</li></ul><ol><li><p>事件发送器 EventEmitter</p><p>Angular 提供了一个 <code>EventEmitter</code> 类，它用来从组件的 <code>@Output()</code> 属性中发布一些值。<code>EventEmitter</code> 扩展了 <code>Observable</code>，并添加了一个 <code>emit()</code> 方法，这样它就可以发送任意值了。当你调用 <code>emit()</code> 时，就会把所发送的值传给订阅上来的观察者的 <code>next()</code> 方法。</p><p>这种用法的例子参见 <a href="https://angular.cn/api/core/EventEmitter" target="_blank" rel="noopener">EventEmitter</a> 文档。下面这个范例组件监听了 <code>open</code> 和 <code>close</code> 事件：</p><p>``</p><p>组件的定义如下：</p><pre class=" language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'zippy'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;div class="zippy">    &lt;div (click)="toggle()">Toggle&lt;/div>    &lt;div [hidden]="!visible">      &lt;ng-content>&lt;/ng-content>    &lt;/div>  &lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ZippyComponent</span> <span class="token punctuation">{</span>  visible <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>  @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> open <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> close <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>visible<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>open<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>close<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>HTTP</p><p>Angular 的 <code>HttpClient</code> 从 HTTP 方法调用中返回了可观察对象。例如，<code>http.get(‘/api’)</code> 就会返回可观察对象。相对于基于承诺（Promise）的 HTTP API，它有一系列优点：</p><ul><li>可观察对象不会修改服务器的响应（和在承诺上串联起来的 <code>.then()</code> 调用一样）。反之，你可以使用一系列操作符来按需转换这些值。</li><li>HTTP 请求是可以通过 <code>unsubscribe()</code> 方法来取消的。</li><li>请求可以进行配置，以获取进度事件的变化。</li><li>失败的请求很容易重试。</li></ul></li><li><p>Async管道</p><p><a href="https://angular.cn/api/common/AsyncPipe" target="_blank" rel="noopener">AsyncPipe</a> 会订阅一个可观察对象或承诺，并返回其发出的最后一个值。当发出新值时，该管道就会把这个组件标记为需要进行变更检查的（译注：因此可能导致刷新界面）。</p><p>下面的例子把 <code>time</code> 这个可观察对象绑定到了组件的视图中。这个可观察对象会不断使用当前时间更新组件的视图。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'async-observable-pipe'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>&lt;code>observable|async&lt;/code>:       Time: {{ time | async }}&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AsyncObservablePipeComponent</span> <span class="token punctuation">{</span>  time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>路由器 (router)</p><p><a href="https://angular.cn/api/router/Router#events" target="_blank" rel="noopener"><code>Router.events</code></a> 以可观察对象的形式提供了其事件。 你可以使用 RxJS 中的 <code>filter()</code> 操作符来找到感兴趣的事件，并且订阅它们，以便根据浏览过程中产生的事件序列作出决定。 </p><p>例子如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> NavigationStart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> filter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-routable'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./routable.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./routable.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Routable1Component</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  navStart<span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>NavigationStart<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> router<span class="token punctuation">:</span> Router<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Create a new Observable that publishes only the NavigationStart event</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>navStart <span class="token operator">=</span> router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">filter</span><span class="token punctuation">(</span>evt <span class="token operator">=</span><span class="token operator">></span> evt <span class="token keyword">instanceof</span> <span class="token class-name">NavigationStart</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> as Observable<span class="token operator">&lt;</span>NavigationStart<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>navStart<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>evt <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Navigation Started!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://angular.cn/api/router/ActivatedRoute" target="_blank" rel="noopener">ActivatedRoute</a> 是一个可注入的路由器服务，它使用可观察对象来获取关于路由路径和路由参数的信息。比如，<code>ActivateRoute.url</code> 包含一个用于汇报路由路径的可观察对象。</p><p>例子如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ActivatedRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'app-routable'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./routable.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./routable.component.css'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Routable2Component</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> activatedRoute<span class="token punctuation">:</span> ActivatedRoute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>activatedRoute<span class="token punctuation">.</span>url      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>url <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The URL changed to: '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="6-NgModule"><a href="#6-NgModule" class="headerlink" title="6-NgModule"></a>6-NgModule</h1><p><strong>NgModules</strong> 用于配置注入器和编译器，并帮你把那些相关的东西组织在一起。</p><p>NgModule 是一个带有 <code>@NgModule</code> 装饰器的类。 <code>@NgModule</code> 的参数是一个元数据对象，用于描述如何编译组件的模板，以及如何在运行时创建注入器。 它会标出该模块自己的组件、指令和管道，通过 <code>exports</code> 属性公开其中的一部分，以便外部组件使用它们。 <code>NgModule</code> 还能把一些服务提供商添加到应用的依赖注入器中。</p><h2 id="6-1-启动过程"><a href="#6-1-启动过程" class="headerlink" title="6.1-启动过程"></a>6.1-启动过程</h2><p>NgModule 用于描述应用的各个部分如何组织在一起。 每个应用有至少一个 Angular 模块，<em>根</em>模块就是你用来启动此应用的模块。 按照惯例，它通常命名为 <code>AppModule</code>。</p><p>如果你使用 <a href="http://angular-doc.paas.cmbchina.cn/cli" target="_blank" rel="noopener">Angular CLI</a> 来生成一个应用，其默认的 <code>AppModule</code> 是这样的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* JavaScript imports */</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> FormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClientModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./app.component'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* the AppModule class with the @NgModule decorator */</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    AppComponent  <span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule<span class="token punctuation">,</span>    FormsModule<span class="token punctuation">,</span>    HttpClientModule  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>在 <code>import</code> 语句之后，是一个带有 <strong><code>@NgModule</code></strong> <a href="http://angular-doc.paas.cmbchina.cn/guide/glossary#decorator" target="_blank" rel="noopener">装饰器</a>的类。</p><p><code>@NgModule</code> 装饰器表明 <code>AppModule</code> 是一个 <code>NgModule</code> 类。 <code>@NgModule</code> 获取一个元数据对象，它会告诉 Angular 如何编译和启动本应用。</p><ul><li><strong>declarations</strong> —— 该应用所拥有的组件。</li><li><strong>imports</strong> —— 导入 <code>BrowserModule</code> 以获取浏览器特有的服务，比如 DOM 渲染、无害化处理和位置（location）。</li><li><strong>providers</strong> —— 各种服务提供商。</li><li><strong>bootstrap</strong> —— <em>根</em>组件，Angular 创建它并插入 <code>index.html</code> 宿主页面。</li></ul><p>Angular CLI 创建的默认应用只有一个组件 <code>AppComponent</code>，所以它会同时出现在 <code>declarations</code> 和 <code>bootstrap</code> 数组中。</p><ol><li><p>declarations 数组</p><p>该模块的 <code>declarations</code> 数组告诉 Angular 哪些组件属于该模块。 当你创建更多组件时，也要把它们添加到 <code>declarations</code> 中。</p><p>每个组件都应该（且只能）声明（declare）在一个 <code>NgModule</code> 类中。 如果你使用了未声明过的组件，Angular 就会报错。</p><p><code>declarations</code> 数组只能接受可声明对象。可声明对象包括组件、<a href="http://angular-doc.paas.cmbchina.cn/guide/attribute-directives" target="_blank" rel="noopener">指令</a>和<a href="http://angular-doc.paas.cmbchina.cn/guide/pipes" target="_blank" rel="noopener">管道</a>。 一个模块的所有可声明对象都必须放在 <code>declarations</code> 数组中。 可声明对象必须只能属于一个模块，如果同一个类被声明在了多个模块中，编译器就会报错。</p><p>这些可声明的类在当前模块中是可见的，但是对其它模块中的组件是不可见的 —— 除非把它们从当前模块导出， 并让对方模块导入本模块</p><p>下面是哪些类可以添加到 <code>declarations</code> 数组中的例子：</p><pre class=" language-typescript"><code class="language-typescript">declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>  YourComponent<span class="token punctuation">,</span>  YourPipe<span class="token punctuation">,</span>  YourDirective<span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>每个可声明对象都只能属于一个模块，所以只能把它声明在一个 <code>@NgModule</code> 中。当你需要在其它模块中使用它时，就要在那里导入包含这个可声明对象的模块。</p><p><strong>只有 <code>@NgModule</code></strong> 可以出现在 <code>imports</code> 数组中。</p></li><li><p>imports 数组模块的 <code>imports</code> 数组只会出现在 <code>@NgModule</code> 元数据对象中。 它告诉 Angular 该模块想要正常工作，还需要哪些模块。</p><p>列表中的模块导出了本模块中的各个组件模板中所引用的各个组件、指令或管道。在这个例子中，当前组件是 <code>AppComponent</code>，它引用了导出自 <code>BrowserModule</code>、<code>FormsModule</code> 或 <code>HttpClientModule</code> 的组件、指令或管道。 总之，组件的模板中可以引用在当前模块中声明的或从其它模块中导入的组件、指令、管道。</p></li><li><p>providers 数组</p><p><code>providers</code> 数组中列出了该应用所需的服务。当直接把服务列在这里时，它们是全应用范围的。 当你使用特性模块和惰性加载时，它们是范围化的。</p></li><li><p>bootstrap 数组</p><p>应用是通过引导根模块 <code>AppModule</code> 来启动的，根模块还引用了 <code>entryComponent</code>。 此外，引导过程还会创建 <code>bootstrap</code> 数组中列出的组件，并把它们逐个插入到浏览器的 DOM 中。</p><p>每个被引导的组件都是它自己的组件树的根。 插入一个被引导的组件通常触发一系列组件的创建并形成组件树。</p><p>虽然也可以在宿主页面中放多个组件，但是大多数应用只有一个组件树，并且只从一个根组件开始引导。</p><p>这个根组件通常叫做 <code>AppComponent</code>，并且位于根模块的 <code>bootstrap</code> 数组中。</p></li></ol><h2 id="6-2-常用模块"><a href="#6-2-常用模块" class="headerlink" title="6.2-常用模块"></a>6.2-常用模块</h2><ol><li><p>Angular模块化</p><p>模块是组织应用和使用外部库扩展应用的最佳途径。</p><p>Angular 自己的库都是 NgModule，比如 <code>FormsModule</code>、<code>HttpClientModule</code> 和 <code>RouterModule</code>。 很多第三方库也是 NgModule，比如 <a href="https://material.angular.cn/" target="_blank" rel="noopener">Material Design</a>、 <a href="http://ionicframework.com/" target="_blank" rel="noopener">Ionic</a> 和 <a href="https://github.com/angular/angularfire2" target="_blank" rel="noopener">AngularFire2</a>。</p><p>NgModule 把组件、指令和管道打包成内聚的功能块，每个模块聚焦于一个特性区域、业务领域、工作流或通用工具。</p><p>模块还可以把服务加到应用中。 这些服务可能是内部开发的（比如你自己写的），或者来自外部的（比如 Angular 的路由和 HTTP 客户端）。</p><p>模块可以在应用启动时急性加载，也可以由路由器进行异步的惰性加载。</p><p>NgModule 的元数据会做这些：</p><ul><li>声明某些组件、指令和管道属于这个模块。</li><li>公开其中的部分组件、指令和管道，以便其它模块中的组件模板中可以使用它们。</li><li>导入其它带有组件、指令和管道的模块，这些模块中的元件都是本模块所需的。</li><li>提供一些供应用中的其它组件使用的服务。</li></ul><p>每个 Angular 应用都至少有一个模块，也就是根模块。 你可以<a href="http://angular-doc.paas.cmbchina.cn/guide/bootstrapping" target="_blank" rel="noopener">引导</a>那个模块，以启动该应用。</p><p>对于那些只有少量组件的简单应用，根模块就是你所需的一切。 随着应用的成长，你要把这个根模块重构成一些<a href="http://angular-doc.paas.cmbchina.cn/guide/feature-modules" target="_blank" rel="noopener">特性模块</a>，它们代表一组密切相关的功能集。 然后你再把这些模块导入到根模块中。</p></li><li><p>常用模块</p><table><thead><tr><th>NgModule</th><th>导入自</th><th>为何使用</th></tr></thead><tbody><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/platform-browser/BrowserModule" target="_blank" rel="noopener">BrowserModule</a></td><td>@angular/platform-browser</td><td>当你想要在浏览器中运行应用时</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/common/CommonModule" target="_blank" rel="noopener">CommonModule</a></td><td>@angular/common</td><td>当你想要使用 <code>NgIf</code> 和 <code>NgFor</code> 时</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/forms/FormsModule" target="_blank" rel="noopener">FormsModule</a></td><td>@angular/forms</td><td>当要构建模板驱动表单时（它包含 <code>NgModel</code> ）</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/forms/ReactiveFormsModule" target="_blank" rel="noopener">ReactiveFormsModule</a></td><td>@angular/forms</td><td>当要构建响应式表单时</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/router/RouterModule" target="_blank" rel="noopener">RouterModule</a></td><td>@angular/router</td><td>要使用路由功能，并且你要用到 <code>RouterLink</code>,<code>.forRoot()</code> 和 <code>.forChild()</code> 时</td></tr><tr><td><a href="http://angular-doc.paas.cmbchina.cn/api/common/http/HttpClientModule" target="_blank" rel="noopener">HttpClientModule</a></td><td>@angular/common/<a href="http://angular-doc.paas.cmbchina.cn/api/common/http" target="_blank" rel="noopener">http</a></td><td>当你要和服务器对话时</td></tr></tbody></table></li></ol><h1 id="7-依赖注入"><a href="#7-依赖注入" class="headerlink" title="7-依赖注入"></a>7-依赖注入</h1><p>依赖注入（DI）是一种重要的应用设计模式。 Angular 有自己的 DI 框架，在设计应用时常会用到它，以提升它们的开发效率和模块化程度。</p><p>依赖，是当类需要执行其功能时，所需要的服务或对象。 DI 是一种编码模式，其中的类会从外部源中请求获取依赖，而不是自己创建它们。</p><p>在 Angular 中，DI 框架会在实例化该类时向其提供这个类所声明的依赖项。本指南介绍了 DI 在 Angular 中的工作原理，以及如何借助它来让你的应用更灵活、高效、健壮，以及可测试、可维护。</p><h2 id="7-1-创建和注册可注入的服务"><a href="#7-1-创建和注册可注入的服务" class="headerlink" title="7.1-创建和注册可注入的服务"></a>7.1-创建和注册可注入的服务</h2><p>DI 框架让你能从一个可注入的<em>服务</em>类（独立文件）中为组件提供数据。为了演示，我们还会创建一个用来提供英雄列表的、可注入的服务类，并把它注册为该服务的提供商。</p><ul><li><p>创建可注册的服务类</p><p><a href="http://angular-doc.paas.cmbchina.cn/cli" target="_blank" rel="noopener">Angular CLI</a> 可以用下列命令在 <code>src/app/heroes</code> 目录下生成一个新的 <code>HeroService</code> 类。</p><p><code>ng generate service heroes/hero</code></p><p>下列命令会创建 <code>HeroService</code> 的骨架。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  providedIn<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@Injectable()</code> 是每个 Angular 服务定义中的基本要素。该类的其余部分导出了一个 <code>getHeroes</code> 方法，它会返回像以前一样的模拟数据。（真实的应用可能会从远程服务器中异步获取这些数据，不过这里我们先忽略它，专心实现服务的注入机制。）</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HEROES <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mock-heroes'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// we declare that this service should be created</span>  <span class="token comment" spellcheck="true">// by the root application injector.</span>  providedIn<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>  <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> HEROES<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>用服务提供商配置注入器</p><p>我们创建的类提供了一个服务。<code>@Injectable()</code> 装饰器把它标记为可供注入的服务，不过在你使用该服务的 <a href="http://angular-doc.paas.cmbchina.cn/guide/glossary#provider" target="_blank" rel="noopener">provider</a> 提供商配置好 Angular 的<a href="http://angular-doc.paas.cmbchina.cn/guide/glossary#injector" target="_blank" rel="noopener">依赖注入器</a>之前，Angular 实际上无法将其注入到任何位置。</p><p>该注入器负责创建服务实例，并把它们注入到像 <code>HeroListComponent</code> 这样的类中。 你很少需要自己创建 Angular 的注入器。Angular 会在执行应用时为你创建注入器，第一个注入器是<em>根注入器</em>，创建于<a href="http://angular-doc.paas.cmbchina.cn/guide/bootstrapping" target="_blank" rel="noopener">启动过程</a>中。</p><p>提供商会告诉注入器<em>如何创建该服务</em>。 要想让注入器能够创建服务（或提供其它类型的依赖），你必须使用某个提供商配置好注入器。</p><p>提供商可以是服务类本身，因此注入器可以使用 <code>new</code> 来创建实例。 你还可以定义多个类，以不同的方式提供同一个服务，并使用不同的提供商来配置不同的注入器。</p><p>你可以在三种位置之一设置元数据，以便在应用的不同层级使用提供商来配置注入器：</p><ul><li>在服务本身的 <code>@Injectable()</code> 装饰器中。</li><li>在 NgModule 的 <code>@NgModule()</code> 装饰器中。</li><li>在组件的 <code>@Component()</code> 装饰器中。</li></ul><p><code>@Injectable()</code> 装饰器具有一个名叫 <code>providedIn</code> 的元数据选项，在那里你可以指定把被装饰类的提供商放到 <code>root</code> 注入器中，或某个特定 NgModule 的注入器中。</p><p><code>@NgModule()</code> 和 <code>@Component()</code> 装饰器都有用一个 <code>providers</code> 元数据选项，在那里你可以配置 NgModule 级或组件级的注入器。</p></li><li><p>注入服务</p><p><code>HeroListComponent</code> 要想从 <code>HeroService</code> 中获取英雄列表，就得要求注入 <code>HeroService</code>，而不是自己使用 <code>new</code> 来创建自己的 <code>HeroService</code> 实例。</p><p>你可以通过制定<strong>带有依赖类型的构造函数参数</strong>来要求 Angular 在组件的构造函数中注入依赖项。下面的代码是 <code>HeroListComponent</code> 的构造函数，它要求注入 <code>HeroService</code>。</p><pre><code>constructor(heroService: HeroService)</code></pre></li></ul><h2 id="7-2-依赖注入实战"><a href="#7-2-依赖注入实战" class="headerlink" title="7.2-依赖注入实战"></a>7.2-依赖注入实战</h2><p>下面的例子往 <code>AppComponent</code> 里声明它依赖 <code>LoggerService</code> 和 <code>UserContext</code>。</p><p>src/app/app.component.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span>logger<span class="token punctuation">:</span> LoggerService<span class="token punctuation">,</span> <span class="token keyword">public</span> userContext<span class="token punctuation">:</span> UserContextService<span class="token punctuation">)</span> <span class="token punctuation">{</span>  userContext<span class="token punctuation">.</span><span class="token function">loadUser</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>  logger<span class="token punctuation">.</span><span class="token function">logInfo</span><span class="token punctuation">(</span><span class="token string">'AppComponent initialized'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>UserContext</code> 转而依赖 <code>LoggerService</code> 和 <code>UserService</code>（这个服务用来收集特定用户信息）。</p><p>user-context.service.ts (injection)</p><pre class=" language-typescript"><code class="language-typescript">@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  providedIn<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserContextService</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> userService<span class="token punctuation">:</span> UserService<span class="token punctuation">,</span> <span class="token keyword">private</span> loggerService<span class="token punctuation">:</span> LoggerService<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当 Angular 新建 <code>AppComponent</code> 时，依赖注入框架会先创建一个 <code>LoggerService</code> 的实例，然后创建 <code>UserContextService</code> 实例。 <code>UserContextService</code> 也需要框架刚刚创建的这个 <code>LoggerService</code> 实例，这样框架才能为它提供同一个实例。<code>UserContextService</code> 还需要框架创建过的 <code>UserService</code>。 <code>UserService</code> 没有其它依赖，所以依赖注入框架可以直接 <code>new</code> 出该类的一个实例，并把它提供给 <code>UserContextService</code> 的构造函数。</p><p>父组件 <code>AppComponent</code> 不需要了解这些依赖的依赖。 只要在构造函数中声明自己需要的依赖即可（这里是 <code>LoggerService</code> 和 <code>UserContextService</code>），框架会帮你解析这些嵌套的依赖。</p><p>当所有的依赖都就位之后，<code>AppComponent</code> 就会显示该用户的信息。</p><h1 id="8-HttpClient"><a href="#8-HttpClient" class="headerlink" title="8-HttpClient"></a>8-HttpClient</h1><p>大多数前端应用都需要通过 HTTP 协议与后端服务器通讯。现代浏览器支持使用两种不同的 API 发起 HTTP 请求：<code>XMLHttpRequest</code> 接口和 <code>fetch()</code> API。</p><p><code>@angular/common/http</code> 中的 <code>HttpClient</code> 类为 Angular 应用程序提供了一个简化的 API 来实现 HTTP 客户端功能。它基于浏览器提供的 <code>XMLHttpRequest</code> 接口。 <code>HttpClient</code> 带来的其它优点包括：可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持，以及更好的、基于可观察（Observable）对象的 API 以及流式错误处理机制。</p><p>要想使用 <code>HttpClient</code>，就要先导入 Angular 的 <code>HttpClientModule</code>。大多数应用都会在根模块 <code>AppModule</code> 中导入它。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span>         <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span>    <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClientModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// import HttpClientModule after BrowserModule.</span>    HttpClientModule<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    AppComponent<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span> <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>在 <code>AppModule</code> 中导入 <code>HttpClientModule</code> 之后，你可以把 <code>HttpClient</code> 注入到应用类中，就像下面的 <code>ConfigService</code> 例子中这样。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConfigService</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> http<span class="token punctuation">:</span> HttpClient<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="8-1-获取json数据"><a href="#8-1-获取json数据" class="headerlink" title="8.1-获取json数据"></a>8.1-获取json数据</h2><p>应用通常会从服务器上获取 JSON 数据。 比如，该应用可能要从服务器上获取配置文件 <code>config.json</code>，其中指定了一些特定资源的 URL。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"heroesUrl"</span><span class="token operator">:</span> <span class="token string">"api/heroes"</span><span class="token punctuation">,</span>  <span class="token property">"textfile"</span><span class="token operator">:</span> <span class="token string">"assets/textfile.txt"</span><span class="token punctuation">}</span></code></pre><p><code>ConfigService</code> 会通过 <code>HttpClient</code> 的 <code>get()</code> 方法取得这个文件。</p><pre class=" language-typescript"><code class="language-typescript">configUrl <span class="token operator">=</span> <span class="token string">'assets/config.json'</span><span class="token punctuation">;</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>像 <code>ConfigComponent</code> 这样的组件会注入 <code>ConfigService</code>，并调用其 <code>getConfig</code> 方法。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">showConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>        heroesUrl<span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'heroesUrl'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        textfile<span class="token punctuation">:</span>  data<span class="token punctuation">[</span><span class="token string">'textfile'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个服务方法返回配置数据的 <code>Observable</code> 对象，所以组件要<strong>订阅（subscribe）</strong> 该方法的返回值。 订阅时的回调函数会把这些数据字段复制到组件的 <code>config</code> 对象中，它会在组件的模板中绑定，以供显示。</p><h2 id="8-2-发起http请求"><a href="#8-2-发起http请求" class="headerlink" title="8.2-发起http请求"></a>8.2-发起http请求</h2><ul><li><p>post请求</p><pre class=" language-typescript"><code class="language-typescript">addHero <span class="token punctuation">(</span>hero<span class="token punctuation">:</span> Hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span>post<span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heroesUrl<span class="token punctuation">,</span> hero<span class="token punctuation">,</span> httpOptions<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span><span class="token string">'addHero'</span><span class="token punctuation">,</span> hero<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>HttpClient.post()</code> 方法像 <code>get()</code> 一样也有类型参数（你会希望服务器返回一个新的英雄对象），它包含一个资源 URL。</p><p>它还接受另外两个参数：</p><ol><li><code>hero</code> - 要 <code>POST</code> 的请求体数据。</li><li><code>httpOptions</code> - 这个例子中，该方法的选项<a href="http://angular-doc.paas.cmbchina.cn/guide/http#adding-headers" target="_blank" rel="noopener">指定了所需的请求头</a>。</li></ol><p>当然，它捕获错误的方式很像<a href="http://angular-doc.paas.cmbchina.cn/guide/http#error-details" target="_blank" rel="noopener">前面描述的</a>操作方式。</p><p><code>HeroesComponent</code> 通过订阅该服务方法返回的 <code>Observable</code> 发起了一次实际的 <code>POST</code> 操作。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>heroesService<span class="token punctuation">.</span><span class="token function">addHero</span><span class="token punctuation">(</span>newHero<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>hero <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当服务器成功做出响应时，会带有这个新创建的英雄，然后该组件就会把这个英雄添加到正在显示的 <code>heroes</code> 列表中。</p></li><li><p>delete请求</p><p>该应用可以把英雄的 id 传给 <code>HttpClient.delete</code> 方法的请求 URL 来删除一个英雄。</p><pre class=" language-typescript"><code class="language-typescript">deleteHero <span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>heroesUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// DELETE api/heroes/42</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> httpOptions<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span><span class="token string">'deleteHero'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当 <code>HeroesComponent</code> 订阅了该服务方法返回的 <code>Observable</code> 时，就会发起一次实际的 <code>DELETE</code> 操作。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">this</span><span class="token punctuation">.</span>heroesService<span class="token punctuation">.</span><span class="token function">deleteHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该组件不会等待删除操作的结果，所以它的 subscribe （订阅）中没有回调函数。不过就算你不关心结果，也仍然要订阅它。调用 <code>subscribe()</code> 方法会<strong>执行</strong>这个可观察对象，这时才会真的发起 DELETE 请求。</p></li></ul><h1 id="9-路由与导航"><a href="#9-路由与导航" class="headerlink" title="9-路由与导航"></a>9-路由与导航</h1><p>在用户使用应用程序时，Angular 的<strong><em>路由器\</em></strong>能让用户从一个<a href="http://angular-doc.paas.cmbchina.cn/guide/glossary#view" target="_blank" rel="noopener">视图</a>导航到另一个视图。</p><p>浏览器具有熟悉的导航模式：</p><ul><li>在地址栏输入 URL，浏览器就会导航到相应的页面。</li><li>在页面中点击链接，浏览器就会导航到一个新页面。</li><li>点击浏览器的前进和后退按钮，浏览器就会在你的浏览历史中向前或向后导航。</li></ul><p>Angular 的 <code>Router</code>（即“路由器”）借鉴了这个模型。它把浏览器中的 URL 看做一个操作指南， 据此导航到一个由客户端生成的视图，并可以把参数传给支撑视图的相应组件，帮它决定具体该展现哪些内容。 你可以为页面中的链接绑定一个路由，这样，当用户点击链接时，就会导航到应用中相应的视图。 当用户点击按钮、从下拉框中选取，或响应来自任何地方的事件时，你也可以在代码控制下进行导航。 路由器还在浏览器的历史日志中记录下这些活动，这样浏览器的前进和后退按钮也能照常工作。</p><h2 id="9-1-配置"><a href="#9-1-配置" class="headerlink" title="9.1-配置"></a>9.1-配置</h2><p>每个带路由的 Angular 应用都有一个<em><code>Router</code>（路由器）</em>服务的单例对象。 当浏览器的 URL 变化时，路由器会查找对应的 <code>Route</code>（路由），并据此决定该显示哪个组件。</p><p>路由器需要先配置才会有路由信息。 下面的例子创建了五个路由定义，并用 <code>RouterModule.forRoot()</code> 方法来配置路由器， 并把它的返回值添加到 <code>AppModule</code> 的 <code>imports</code> 数组中。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> appRoutes<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'crisis-center'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> CrisisListComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'hero/:id'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HeroDetailComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'heroes'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> HeroListComponent<span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Heroes List'</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    redirectTo<span class="token punctuation">:</span> <span class="token string">'/heroes'</span><span class="token punctuation">,</span>    pathMatch<span class="token punctuation">:</span> <span class="token string">'full'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'**'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> PageNotFoundComponent <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>      appRoutes<span class="token punctuation">,</span>      <span class="token punctuation">{</span> enableTracing<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// &lt;-- debugging purposes only</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// other imports here</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>这里的路由数组 <code>appRoutes</code> 描述如何进行导航。 把它传给 <code>RouterModule.forRoot()</code> 方法并传给本模块的 <code>imports</code> 数组就可以配置路由器。</p><p>每个 <code>Route</code> 都会把一个 URL 的 <code>path</code> 映射到一个组件。 注意，<code>path</code> 不能以<em>斜杠（<code>/</code>）</em>开头。 路由器会为解析和构建最终的 URL，这样当你在应用的多个视图之间导航时，可以任意使用相对路径和绝对路径。</p><p>第二个路由中的 <code>:id</code> 是一个路由参数的令牌(Token)。比如 <code>/hero/42</code> 这个 URL 中，“42”就是 <code>id</code> 参数的值。 此 URL 对应的 <code>HeroDetailComponent</code> 组件将据此查找和展现 <code>id</code> 为 42 的英雄。 在本章中稍后的部分，你将会学习关于路由参数的更多知识。</p><p>第三个路由中的 <code>data</code> 属性用来存放于每个具体路由有关的任意信息。该数据可以被任何一个激活路由访问，并能用来保存诸如 页标题、面包屑以及其它静态只读数据。本章稍后的部分，你将使用<a href="http://angular-doc.paas.cmbchina.cn/guide/router#resolve-guard" target="_blank" rel="noopener">resolve 守卫</a>来获取动态数据。</p><p>第四个路由中的空路径（<code>&#39;&#39;</code>）表示应用的默认路径，当 URL 为空时就会访问那里，因此它通常会作为起点。 这个默认路由会重定向到 URL <code>/heroes</code>，并显示 <code>HeroesListComponent</code>。</p><p>最后一个路由中的 <code>**</code> 路径是一个<strong>通配符</strong>。当所请求的 URL 不匹配前面定义的路由表中的任何路径时，路由器就会选择此路由。 这个特性可用于显示“404 - Not Found”页，或自动重定向到其它路由。</p><p><strong>这些路由的定义顺序</strong>是刻意如此设计的。路由器使用<strong>先匹配者优先</strong>的策略来匹配路由，所以，具体路由应该放在通用路由的前面。在上面的配置中，带静态路径的路由被放在了前面，后面是空路径路由，因此它会作为默认路由。而通配符路由被放在最后面，这是因为它能匹配上<em>每一个 URL</em>，因此应该<strong>只有在</strong>前面找不到其它能匹配的路由时才匹配它。</p><p>如果你想要看到在导航的生命周期中发生过哪些事件，可以使用路由器默认配置中的 <strong>enableTracing</strong> 选项。它会把每个导航生命周期中的事件输出到浏览器的控制台。 这应该只用于<em>调试</em>。你只需要把 <code>enableTracing: true</code> 选项作为第二个参数传给 <code>RouterModule.forRoot()</code> 方法就可以了。</p><h2 id="9-2-路由出口"><a href="#9-2-路由出口" class="headerlink" title="9.2-路由出口"></a>9.2-路由出口</h2><p><code>RouterOutlet</code> 是一个来自路由模块中的指令，它的用法类似于组件。 它扮演一个占位符的角色，用于在模板中标出一个位置，路由器将会把要显示在这个出口处的组件显示在这里。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-outlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-outlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Routed components go here --></span></code></pre><p>有了这份配置，当本应用在浏览器中的 URL 变为 <code>/heroes</code> 时，路由器就会匹配到 <code>path</code> 为 <code>heroes</code> 的 <code>Route</code>，并在宿主视图中的<em><code>RouterOutlet</code></em>之后显示 <code>HeroListComponent</code> 组件。</p><h2 id="9-3-路由链接"><a href="#9-3-路由链接" class="headerlink" title="9.3-路由链接"></a>9.3-路由链接</h2><p>现在，你已经有了配置好的一些路由，还找到了渲染它们的地方，但又该如何导航到它呢？固然，从浏览器的地址栏直接输入 URL 也能做到，但是大多数情况下，导航是某些用户操作的结果，比如点击一个 A 标签。</p><p>考虑下列模板：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Angular Router<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">routerLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/crisis-center<span class="token punctuation">"</span></span> <span class="token attr-name">routerLinkActive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Crisis Center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">routerLink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/heroes<span class="token punctuation">"</span></span> <span class="token attr-name">routerLinkActive</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Heroes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-outlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-outlet</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka学习笔记</title>
      <link href="/2019/12/25/kafka-xue-xi-bi-ji/"/>
      <url>/2019/12/25/kafka-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka学习笔记"><a href="#Kafka学习笔记" class="headerlink" title="Kafka学习笔记"></a>Kafka学习笔记</h1><h1 id="1-kafka介绍"><a href="#1-kafka介绍" class="headerlink" title="1-kafka介绍"></a>1-kafka介绍</h1><h2 id="1-1-什么是kafka？"><a href="#1-1-什么是kafka？" class="headerlink" title="1.1-什么是kafka？"></a>1.1-什么是kafka？</h2><p><strong>Apache Kafka</strong>是一个分布式发布-订阅消息系统，它最初由 LinkedIn 公司开发，使用 Scala语言编写,之后成为 Apache 项目的一部分。Kafka 是一个分布式的，可划分的，多订阅者,冗余备份的持久性的日志服务。它主要用于处理活跃的流式数据。</p><p>kafka最基本的架构是生产者发布一个消息到Kafka的一个主题（topic），这个主题即是由扮演KafkaServer角色的broker提供，消费者订阅这个主题，然后从中获取消息.</p><h2 id="1-2-kafka特点"><a href="#1-2-kafka特点" class="headerlink" title="1.2-kafka特点"></a>1.2-kafka特点</h2><ul><li><strong>高吞吐量：</strong>Kafka的设计是工作在标准硬件之上，支持每秒数百万的消息</li><li><strong>负载均衡：</strong>通过zookeeper对Broker,Consumer的动态加入与离开进行管理。</li><li><strong>拉取系统：</strong>producer主动向kafka broker以 push方式发送消息，consumer采用pull方式消费消息</li><li><strong>动态扩展：</strong>当需要增加broker结点时，新增的broker会向zookeeper注册，而    consumer会通过zookeeper感知这些          变化，并及时作出调整。</li><li><strong>消息删除策略：</strong>数据文件将会根据broker中的配置要求,保留一定的时间之后删除。  kafka通过这种简单的手段,来释放磁盘空间。</li><li><strong>高性能：</strong>单节点支持上千客户端；</li><li><strong>分布式：</strong>数据副本冗余，流量负载均衡，可扩展；</li></ul><h2 id="1-3-kafka基本概念"><a href="#1-3-kafka基本概念" class="headerlink" title="1.3-kafka基本概念"></a>1.3-kafka基本概念</h2><ul><li><strong>Broker</strong>：Kafka消息服务器，消息中心。一个Broker可以容纳多个Topic。<ul><li><code>其作用简而言之就是接收producer请求并持久化，接收consumer请求并响应消费消息。</code> </li></ul></li><li><strong>Producer</strong>：消息生产者，就是向Kafka broker发消息的客户端。</li><li><strong>Consumer</strong>：消息消费者，向Kafka broker拉取消息的客户端。</li><li><strong>Consumer Group</strong>：每个consumer归属于一个特定的consumer group，一个partition中的消息只会被group中的一个consumer消费; 每个group中consumer消息消费互相独立;<ul><li><code>Kafka引进group的概念，可实现消息的单播和广播。</code></li></ul></li><li><strong>Topic</strong>：Topic为一个逻辑上的概念，每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic. Producer可以针对某个主题进行生产，Consumer可以针对某个主题进行订阅。</li><li><strong>Partition</strong>：Parition是物理上的概念，每个Topic包含一个或多个Partition。Kafka通过partition对topic的数据文件切片，可以将一个Topic可以分布存储到多个Broker上。</li></ul><h1 id="2-kafka架构"><a href="#2-kafka架构" class="headerlink" title="2-kafka架构"></a>2-kafka架构</h1><h2 id="2-1-kafka部署架构"><a href="#2-1-kafka部署架构" class="headerlink" title="2.1-kafka部署架构"></a>2.1-kafka部署架构</h2><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/kafka%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png" alt="kafka部署架构"></p><ul><li>完全的分布式：Producer、Broker、Consumer、zookeeper都是分布式</li><li>一个典型的Kafka集群中包含若干Producer，若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个<a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息</li></ul><h2 id="2-2-kafka集群架构"><a href="#2-2-kafka集群架构" class="headerlink" title="2.2-kafka集群架构"></a>2.2-kafka集群架构</h2><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/kafka%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84.png" alt="kafka集群架构"></p><h2 id="2-3-kafka存储结构"><a href="#2-3-kafka存储结构" class="headerlink" title="2.3-kafka存储结构"></a>2.3-kafka存储结构</h2><h3 id="2-3-1-Topic中partition存储分布"><a href="#2-3-1-Topic中partition存储分布" class="headerlink" title="2.3.1-Topic中partition存储分布"></a>2.3.1-Topic中partition存储分布</h3><ul><li><strong>存储根目录</strong>：kafka的Log文件存储在Kafka broker中，其的根目录在server.properties文件中配置(参数 <code>log.dirs=xxx/message-folder</code>)   </li><li><strong>partition目录命名</strong>：在Kafka的Log文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1</li></ul><p><strong>例子：</strong></p><p>例如创建1个topic名称分别为report_push, partitions=3，假设有三个broker（Broker1、Broker2、Broker3），那么其存储路径和目录规则可能为：<br>    Broker1根目录下有目录： report_push-0<br>    Broker2根目录下有目录： report_push-1<br>    Broker3根目录下有目录： report_push-2   </p><p><code>partition将均衡的分布在各个broker上，这样有助于提高吞吐量。</code></p><h3 id="2-3-2-partiton中文件存储方式"><a href="#2-3-2-partiton中文件存储方式" class="headerlink" title="2.3.2-partiton中文件存储方式"></a>2.3.2-partiton中文件存储方式</h3><p>每个partition在存储层面是append log文件。任何发布到此partition的消息都会被直接追加到log文件的尾部，每条消息在文件中的位置称为offset（偏移量），offset为一个long型数字，它是唯一标记一条消息。partition是以文件的形式存储在文件系统中。Logs文件根据broker中的配置要求,保留一定时间后删除来释放磁盘空间。</p><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/partition.png" alt="partition"></p><ul><li><strong>Partition</strong>：<pre><code>Topic 物理上的分组，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。       partition 中的每条消息都会被分配一个有序的 id（offset）。</code></pre></li><li>每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中，segment文件大小由属性log.segment.bytes 指定。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除。</li></ul><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/segment.png" alt="segment"></p><h3 id="2-3-3-partiton中segment文件存储结构"><a href="#2-3-3-partiton中segment文件存储结构" class="headerlink" title="2.3.3-partiton中segment文件存储结构"></a>2.3.3-partiton中segment文件存储结构</h3><ul><li><strong>Segment file组成：</strong>由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀”.index”和“.log”分别表示为segment索引文件、数据文件.</li><li><strong>Segment文件命名规则：</strong>partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li></ul><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/segment%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90.png" alt="segment文件组成"></p><h3 id="2-3-4-Segment中message存储结构"><a href="#2-3-4-Segment中message存储结构" class="headerlink" title="2.3.4-Segment中message存储结构"></a>2.3.4-Segment中message存储结构</h3><ul><li><p><strong>Message组成</strong>：每条Message包含了以下三个属性</p><table><thead><tr><th>offset</th><th>对应类型：long</th></tr></thead><tbody><tr><td>MessageSize</td><td>对应类型：int（32）</td></tr><tr><td>data</td><td>是message的具体内容</td></tr></tbody></table></li><li><p><strong>Message消息</strong>：是通信的基本单位，每个 producer 可以向一个 topic（主题）发布一些消息。</p></li><li><p>Kafka中的Message是以topic为基本单位组织的，不同的topic之间是相互独立的。每个topic又可以分成几个不同的partition(每个topic有几个partition是在创建topic时指定的)，每个partition存储一部分Message。</p></li><li><p>一个Segment由多个message组成</p></li><li><p><strong>offset</strong>：每条消息在文件中的位置，它唯一标记一条消息。kafka并没有提供其他额外的索引机制来存储offset，因为在kafka中几 乎不允许对消息进行“随机读写”。</p></li></ul><h3 id="2-3-5-segment索引文件、数据文件的关系"><a href="#2-3-5-segment索引文件、数据文件的关系" class="headerlink" title="2.3.5-segment索引文件、数据文件的关系"></a>2.3.5-segment索引文件、数据文件的关系</h3><ul><li><p><strong>segment索引文件</strong>：由下图中看出，index文件有两列，第一列代表message在log文件中的位置，第二列代表物理偏移量。以索引文件中 元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。索引文件稀疏索引方式存储，它减少索引文件大小。索引文件被映射到内存中，有助于提高查找速度</p><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/segment%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png" alt="segment索引结构"></p></li><li><p><strong>segment数据文件</strong>：由上图了解到segment data file由许多message组成，message物理结构如下图</p><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/segment%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84.png" alt="segment物理结构"></p></li><li><p><strong>Message的查找过程</strong>：</p><p><code>比如：要查找绝对offset为7的Message：</code><br>1、首先是用二分查找确定它是在哪个LogSegment中，自然是在第一个Segment中。</p><p>2、打开这个Segment的index文件，也是用二分查找找到offset小于或者等于指定offset的索引条目中最大的那个offset。自然offset为6的那个索引是我们要找的，通过索引文件我们知道offset为6的Message在数据文件中的物理位置为9807。</p><p>3、打开数据文件，从物理位置为9807的那个地方开始顺序扫描直到找到offset为7的那条Message。</p><p>这套机制是建立在offset是有序的。索引文件被映射到内存中，所以查找的速度还是很快的。</p><p>一句话，Kafka的Message存储采用了分区(partition)，分段(LogSegment)和稀疏索引这几个手段来达到了高效性。</p></li></ul><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/message%E6%9F%A5%E6%89%BE.png" alt="message查找"></p><h3 id="2-3-6-Replication-存储副本"><a href="#2-3-6-Replication-存储副本" class="headerlink" title="2.3.6-Replication 存储副本"></a>2.3.6-Replication 存储副本</h3><p>Kafka从0.8开始提供<code>High Availability机制</code>。</p><p>​    <strong>同一个Partition可能会多个Replication ，这些Replication之间将会选举一个Leader，Producer和Consumer只与这个Leader交互，其它Replica作为Follower从Leader中复制数据。Kafka内部有自己的算法将Replica均匀分布到整个集群，如果某些broker宕机，仍能保持kafka集群的高可用性</strong>。</p><p><code>Kafka分配Replica的算法如下</code>：<br>1、将所Broker（假设共n个Broker和待分配的Partition排序 )<br>2、将第i个Partition分配到第（i mod n个Broker上）<br>3、将第i个Partition的第j个Replica分配到第（(i + j) mode n个Broker上</p><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/replication.png" alt="replication"></p><p><code>Kafka 的Leader Election</code><br>      Kafka在ZooKeeper中动态维护了一个<code>ISR</code>（in-sync replicas，这个ISR里的所Replica都跟上了leader，只ISR里的成员才被为Leader的可能），kafka引进Leader的概念是为了保持数据的一致性。</p><h1 id="3-kafka生产和消费"><a href="#3-kafka生产和消费" class="headerlink" title="3-kafka生产和消费"></a>3-kafka生产和消费</h1><h2 id="3-1-kafka生产"><a href="#3-1-kafka生产" class="headerlink" title="3.1-kafka生产"></a>3.1-kafka生产</h2><p><strong>Producer：</strong>消息生产者，就是向Kafka broker发消息的客户端。</p><p>Producer使用<code>push模式</code>将消息发布到broker，<strong>一个topic在集群中可以有多个partition，消息发送到哪个分区上， 由producer客户端决定</strong>， producer端实现“消息均衡分发”，一般可通过如下的<code>路由策略</code>实现：</p><ol><li><p><strong>采用Key Hash算法</strong>:根据消息的key来进行分区的分配，即hash(key) %  numPartitions，系统默认方式。</p></li><li><p><strong>自定义分区策略</strong>：可通过配置partitioner.class来实现自定义分区策略。 该class必须实现kafka.producer.Partitioner接口</p></li><li><p><strong>异步发送：</strong>producer端将多条消息暂且在客户端buffer起来，并将他们批量的发送到broker，因为小数据IO太多，会拖慢整体的网络延迟，批量延迟发送事实上提升了网络效率。可配置linger.ms和batch.size达到异步发送的机制， batch.size是指在客户端缓存多大的数据后发送， linger.ms是指如果缓存的数据大小达不到batch.size,但是缓存的时间达到了linger.ms，照样发送数据到broker。</p></li></ol><h2 id="3-2-kafka消费"><a href="#3-2-kafka消费" class="headerlink" title="3.2-kafka消费"></a>3.2-kafka消费</h2><ul><li><p><strong>Consumer和Consumer Group</strong></p><p>​       每一个consumer归属于一个特定的consumer group，同一Topic的一条消息只能被同一个Consumer Group内的一个Consumer消费，但多个Consumer Group可同时消费这一消息</p></li><li><p><strong>Consumer Group的作用</strong></p><ul><li>Topic消息的<code>广播</code>（发给所有的Consumer）<pre><code>     如果需要实现广播，只要每个Consumer有一个独立的Group就可以了</code></pre></li><li>Topic消息的<code>单播</code>（发给某一个Consumer）<pre><code>     如果要实现单播只要所有的Consumer在同一个Group里</code></pre></li></ul></li></ul><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/kafka%E6%B6%88%E8%B4%B9.png" alt="kafka消费"></p><p><code>注:同一个group中的consumer个数最好不要超过topic的partition数，如果超过，那么将有consumer处于闲置状态</code></p><h2 id="3-3-Kafka如何保证消息只能被消费一次呢？"><a href="#3-3-Kafka如何保证消息只能被消费一次呢？" class="headerlink" title="3.3-Kafka如何保证消息只能被消费一次呢？"></a>3.3-Kafka如何保证消息只能被消费一次呢？</h2><p>Consumer Group在消费某Topic时，kafka通过一个特殊的topic 即<strong>consumer_offsets记录该消费组Offset消费偏移量，最新Consumer加入并消费某一主题时，将会从可以从</strong>consumer_offsets获取最新的Offset点开始消费。在topic中存储结构如下：</p><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/kafka%E6%B6%88%E8%B4%B9%E8%BF%87%E7%A8%8B.png" alt="kafka消费过程"></p><p><code>注：kafka只能保证同一个Partition中的消息消费是顺序性的，不能保证整个topic中的消息消费的顺序</code></p><h2 id="3-4-kafka集群管理"><a href="#3-4-kafka集群管理" class="headerlink" title="3.4-kafka集群管理"></a>3.4-kafka集群管理</h2><p>Zookeeper在Kafka中<strong>用于存储集群MataData并管理、协调Kafka代理。</strong></p><p><img src="/2019/12/25/kafka-xue-xi-bi-ji/kafka%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86.png" alt="kafka集群管理"></p><ul><li><p><strong>Zookeeper在Kafka中的用途:</strong></p><p><strong>用于管理、协调Kafka代理。</strong>每个Kafka代理都通过ZooKeeper协调其它Kafka代理。当Kafka系统中新增了代理或者某个代理故障失效时，ZooKeeper服务将通知生产者和消费者。生产者和消费者据此开始与其它代理协调工作</p><ol><li>kafka使用zookeeper来实现动态的集群扩展，不需要更改客户端（producer和consumer）的配置。<br>broker会在zookeeper注册并保持相关的元数据（topic，partition信息等）更新。</li><li>而客户端会在zookeeper上注册相关的watcher。一旦zookeeper发生变化，客户端能及时感知并作出相应调整。这样就保证了添加或去除broker时，各broker间仍能自动实现负载均衡。    这里的客户端指的是Kafka的消息生产端(Producer)和消息消费端(Consumer)</li><li>Broker端使用zookeeper来注册broker信息,以及监测partition leader存活性.</li><li>Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息.</li><li>Zookeer和Producer没有建立关系，只和Brokers、Consumers建立关系以实现负载均衡，即同一个Consumer Group中的Consumers可以实现负载均衡.</li></ol></li></ul><h1 id="4-kafka常见问题"><a href="#4-kafka常见问题" class="headerlink" title="4-kafka常见问题"></a>4-kafka常见问题</h1><h2 id="4-1-如何保证消息的可靠性传输？"><a href="#4-1-如何保证消息的可靠性传输？" class="headerlink" title="4.1-如何保证消息的可靠性传输？"></a>4.1-如何保证消息的可靠性传输？</h2><ol><li>生产者不丢数据</li><li>服务器不丢数据</li><li>消费者不丢数据</li></ol><ul><li><p><strong>生产者</strong>：如果是同步模式，确认机制设为<code>acks=all</code>，也就是让消息写入leader和所有的副件;如果是异步模式消息发出去，但还没有收到确认的时候,缓冲池已满.在配置文件中设置<code>block.on.buffer.full =true</code>成不限制阻塞超时的时间， 让生产者一直阻塞， 等待缓冲区可用，不能清空，这样也能保证数据不丢失。</p></li><li><p><strong>消费者</strong>：确认数据被完成处理之后，再更新offset值， 不要自动提交offset,关闭自动提交offset,<code>enable.auto.commit=false</code></p></li><li><p><strong>服务器</strong>: follower数据还没有完成同步. leader宕机，重新选择leader </p><p>设置<code>replication. factor</code>太于1，至少每个partition有2个副本<br>设置<code>min . insync. replicas</code>太于1，要求leader感知到至少一个follower跟自己保持联系，确保leader挂了还有一个follower.</p></li></ul><h2 id="4-2-如何保证高可用？"><a href="#4-2-如何保证高可用？" class="headerlink" title="4.2-如何保证高可用？"></a>4.2-如何保证高可用？</h2><ol><li><p><strong>分布式</strong></p><p>由多个broker组成，每个broker是一个节点，topic可以人划分为多个partition，每个partition可以存在于不同的broker上。</p></li><li><p><strong>Replica机制</strong></p><p>每个partition的数据都会同步到其它机器上,形成多个replica副本，所有replica会选举一个leader.生产和消费都和leader打交道。其它 replica就是follower。写的时候，leader会负责把数据同步列所有follower 上去，读的候就直接读leader上的数据。只读写leader保证教据一致性，kafka会均匀地将 一个partition的所有 replica分布在不同的机器上，这样可以提高容错性。</p></li></ol><h2 id="4-3-如何避免重复消费？"><a href="#4-3-如何避免重复消费？" class="headerlink" title="4.3-如何避免重复消费？"></a>4.3-如何避免重复消费？</h2><p><strong>情况：</strong>ConSumer消费了数据之后，会把消费过后的消息offset提交一下，表示已经消费过，下次重启后,直接从offset继续消费,有某些异常情况时进程被kill,号致consumer消费了消息，但没来得及提交offset ,重启之后，少数消息会被再次消费一次。</p><p><strong>解决方法:——结合具体的业务</strong></p><ol><li><p>如果消费后写数据库，先查数据库中记录是否存在，如果存在则证明已消费，然后比较时间戳是否是最新的，如果是最新的消息，则更新数据库，否则丢弃。0racle中可以使用Merge实现。</p></li><li><p>如果是写Redis ,面接Set操作<br>或者给数据一个uuid,消费过的数据uuid保存到Redis中，如果重复则直接丢弃。</p></li></ol><h2 id="4-4-如何保证消息的顺序性？"><a href="#4-4-如何保证消息的顺序性？" class="headerlink" title="4.4-如何保证消息的顺序性？"></a>4.4-如何保证消息的顺序性？</h2><p><strong>情况：</strong>在数据量很大的情况下，如果消费者使用单线程消费处理，而且处理比较耗时的话，那么吞吐量就会很低。改用多个线程并发跑的话，就可能导致消息的顺序乱掉。</p><p><strong>解决方法：</strong></p><ol><li><p>一个topic，一个partition（内部有序），一个consumer，内部单线程消费，</p><p>吞吐量太低，一般不会使用</p></li><li><p>多线程写N个内存队列（queue），具有相同key的数据都存到同一个内存queue；然后对于N个线程，每个线程分别消费一个内存queue即可。</p></li></ol><p><strong>消息积压</strong>——例如消费后要写数据库，但数据库挂掉或者压力很大，消费者hang住，或者是消费者故障，导致消费速度极其慢，此时消息队列会积压大量的消息。</p><ol><li><p>查看kafka消息队列的积压情况</p><p><code>kafka-consumer-groups  --bootstrap-server master：9092</code></p><p><code>--describe --group group-name</code></p><p>a.将现有的consumer 停掉，防止再向队列中写消息。</p><p>b.定位消息积压的原因。</p><p>c.增加消费线程，提高消费速度。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记2</title>
      <link href="/2019/12/25/springboot-bi-ji-er/"/>
      <url>/2019/12/25/springboot-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot2-0学习笔记"><a href="#SpringBoot2-0学习笔记" class="headerlink" title="SpringBoot2.0学习笔记"></a>SpringBoot2.0学习笔记</h1><h1 id="1-SpringBoot2-0入门"><a href="#1-SpringBoot2-0入门" class="headerlink" title="1-SpringBoot2.0入门"></a>1-SpringBoot2.0入门</h1><h2 id="1-1-SpringBoot2-x依赖环境和版本新特性"><a href="#1-1-SpringBoot2-x依赖环境和版本新特性" class="headerlink" title="1.1-SpringBoot2.x依赖环境和版本新特性"></a>1.1-SpringBoot2.x依赖环境和版本新特性</h2><p><strong>简介：讲解新版本依赖环境和springboot2新特性概述</strong></p><ul><li><p>1、依赖版本jdk8以上, Springboot2.x用JDK8, 因为底层是 Spring framework5</p></li><li><p>2、安装maven最新版本，maven3.2以上版本，下载地址 ：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a></p></li><li><p>3、Eclipse或者IDE</p></li><li><p>4、新特性</p></li><li><p>5、翻译工具：<a href="https://translate.google.cn/" target="_blank" rel="noopener">https://translate.google.cn/</a></p></li><li><p>6、springbootGitHub地址：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></p></li><li><p>7、springboot官方文档：<a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot/</a></p></li></ul><h2 id="1-2-快速创建SpringBoot2-x应用之手工创建web应用"><a href="#1-2-快速创建SpringBoot2-x应用之手工创建web应用" class="headerlink" title="1.2-快速创建SpringBoot2.x应用之手工创建web应用"></a>1.2-快速创建SpringBoot2.x应用之手工创建web应用</h2><p><strong>简介：使用Maven手工创建SpringBoot2.x应用</strong></p><ul><li><p>手工创建:<a href="https://projects.spring.io/spring-boot/#quick-start" target="_blank" rel="noopener">https://projects.spring.io/spring-boot/#quick-start</a></p></li><li><p>官方推荐包命名接口，不要使用默认 defaultPackage</p></li><li><p>官方文档: <a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#using-boot-using-the-default-package" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#using-boot-using-the-default-package</a></p><ul><li>例子：com +- example +- myapplication +- Application.java | +- customer | +- Customer.java | +- CustomerController.java | +- CustomerService.java | +- CustomerRepository.java | +- order +- Order.java +- OrderController.java +- OrderService.java +- OrderRepository.java</li></ul></li></ul><h2 id="1-3-快速创建SpringBoot2-x应用之工具类自动创建web应用"><a href="#1-3-快速创建SpringBoot2-x应用之工具类自动创建web应用" class="headerlink" title="1.3-快速创建SpringBoot2.x应用之工具类自动创建web应用"></a>1.3-快速创建SpringBoot2.x应用之工具类自动创建web应用</h2><p><strong>简介：使用构建工具自动生成项目基本架构</strong> 工具自动创建:<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></p><h2 id="1-4-SpringBoot2-x的依赖默认Maven版本"><a href="#1-4-SpringBoot2-x的依赖默认Maven版本" class="headerlink" title="1.4-SpringBoot2.x的依赖默认Maven版本"></a>1.4-SpringBoot2.x的依赖默认Maven版本</h2><p><strong>简介：讲解SpringBoot2.x的默认Maven依赖版本</strong></p><ul><li>官网地址<ul><li><a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#appendix-dependency-versions" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#appendix-dependency-versions</a></li></ul></li></ul><h1 id="2-SpringBoot接口Http协议开发实战"><a href="#2-SpringBoot接口Http协议开发实战" class="headerlink" title="2-SpringBoot接口Http协议开发实战"></a>2-SpringBoot接口Http协议开发实战</h1><h2 id="2-1-SpringBoot2-xHTTP请求配置讲解"><a href="#2-1-SpringBoot2-xHTTP请求配置讲解" class="headerlink" title="2.1-SpringBoot2.xHTTP请求配置讲解"></a>2.1-SpringBoot2.xHTTP请求配置讲解</h2><p><strong>简介：SpringBoot2.xHTTP请求注解讲解和简化注解配置技巧</strong></p><ul><li>@RestController and @RequestMapping是springMVC的注解，不是springboot特有的</li><li>@RestController = @Controller+@ResponseBody</li><li>@SpringBootApplication = @Configuration+@EnableAutoConfiguration+@ComponentScanlocalhost:8080</li></ul><h2 id="2-2-开发必备工具PostMan接口工具介绍和使用"><a href="#2-2-开发必备工具PostMan接口工具介绍和使用" class="headerlink" title="2.2-开发必备工具PostMan接口工具介绍和使用"></a>2.2-开发必备工具PostMan接口工具介绍和使用</h2><p>用户在开发或者调试网络程序或者是网页B/S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！<strong>Postman</strong>在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p><p><strong>简介：模拟Http接口测试工具PostMan安装和讲解</strong></p><ul><li>接口调试工具安装和基本使用</li><li>下载地址：<a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></li></ul><h2 id="2-3-HTTP接口GET请求实战"><a href="#2-3-HTTP接口GET请求实战" class="headerlink" title="2.3-HTTP接口GET请求实战"></a>2.3-HTTP接口GET请求实战</h2><p><strong>简介:讲解springboot接口，http的get请求，各个注解使用</strong></p><ul><li><p>GET请求</p><ul><li><p>1、单一参数@RequestMapping(path = “/{id}”, method = RequestMethod.GET)</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> </code></pre></li></ul></li></ul></li></ul><pre><code>- ```java  @RequestMapping(path = &quot;/{depid}/{userid}&quot;, method = RequestMethod.GET)   //可以同时指定多个提交方法   public String getUser(@PathVariable(&quot;depid&quot;)String departmentID,@PathVariable(&quot;userid&quot;) String userid)  ```</code></pre><ul><li><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/{city_id}/{user_id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"city_id"</span><span class="token punctuation">)</span> String cityId<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span> String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cityId"</span><span class="token punctuation">,</span> cityId<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>Restful协议的GET请求</p><ul><li><p>@GetMapping注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/page_user1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">pageUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul></li></ul><ul><li><p>参数设置默认值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v2/page_user2"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Object <span class="token function">pageUser2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>获取http的头部</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/get_header"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span> String accessToken<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>使用HttpServletRequest</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/test_request"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">testRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h2 id="2-4-HTTP其他提交方法请求实战"><a href="#2-4-HTTP其他提交方法请求实战" class="headerlink" title="2.4-HTTP其他提交方法请求实战"></a>2.4-HTTP其他提交方法请求实战</h2><p><strong>简介：讲解http请求post，put, delete提交方式</strong></p><h3 id="2-4-1-Post请求"><a href="#2-4-1-Post请求" class="headerlink" title="2.4.1-Post请求"></a>2.4.1-Post请求</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">login</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-4-2-Put请求"><a href="#2-4-2-Put请求" class="headerlink" title="2.4.2-Put请求"></a>2.4.2-Put请求</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/put"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">put</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-4-3-Delete请求"><a href="#2-4-3-Delete请求" class="headerlink" title="2.4.3-Delete请求"></a>2.4.3-Delete请求</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/del"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">del</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-5-Jackson使用"><a href="#2-5-Jackson使用" class="headerlink" title="2.5-Jackson使用"></a>2.5-Jackson使用</h2><p><strong>简介：介绍常用json框架和注解的使用，自定义返回json结构和格式</strong></p><ul><li>常用框架 阿里 fastjson,谷歌gson等</li><li>JavaBean序列化为Json，<ul><li>性能：Jackson &gt; FastJson &gt; Gson &gt; Json-lib 同个结构</li><li>Jackson、FastJson、Gson类库各有优点，各有自己的专长</li><li>空间换时间，时间换空间</li></ul></li><li>jackson处理相关自动<ul><li>指定字段不返回：@JsonIgnore</li><li>指定日期格式：@JsonFormat(pattern=”yyyy-MM-dd hh:mm:ss”,locale=”zh”,timezone=”GMT+8”)</li><li>空字段不返回：@JsonInclude(Include.NON_NUll)</li><li>指定别名：@JsonProperty</li></ul></li></ul><h2 id="2-6-SpringBoot目录文件结构"><a href="#2-6-SpringBoot目录文件结构" class="headerlink" title="2.6-SpringBoot目录文件结构"></a>2.6-SpringBoot目录文件结构</h2><p><strong>简介：讲解SpringBoot目录文件结构和官方推荐的目录规范</strong></p><ul><li><p>目录讲解</p><ul><li>src/main/java：存放代码</li><li>src/main/resources</li><li>static: 存放静态文件，比如 css、js、image, （访问方式 <a href="http://localhost:8080/js/main.js）" target="_blank" rel="noopener">http://localhost:8080/js/main.js）</a></li><li>templates:存放静态页面jsp,html,tpl</li><li>config:存放配置文件,application.properties</li><li>resources:</li></ul></li><li><p>引入依赖 Thymeleaf</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>//注意：如果不引人这个依赖包，html文件应该放在默认加载文件夹里面，//比如resources、static、public这个几个文件夹，才可以访问</code></pre></li><li><p>同个文件的加载顺序,静态资源文件 Spring Boot 默认会挨个从</p><ul><li>META/resources &gt;</li><li>resources &gt;</li><li>static &gt;</li><li>public</li></ul><p>里面找是否存在相应的资源，如果有则直接返回。</p></li><li><p>默认配置</p><ul><li>官网地址：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content</a></li><li>spring.resources.static-locations = classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</li></ul></li><li><p>静态资源文件存储在CDN</p></li></ul><h2 id="2-7-SpringBoot文件上传实战"><a href="#2-7-SpringBoot文件上传实战" class="headerlink" title="2.7-SpringBoot文件上传实战"></a>2.7-SpringBoot文件上传实战</h2><p><strong>简介：讲解HTML页面文件上传和后端处理实战</strong></p><ul><li><p>springboot文件上传 MultipartFile file，源自SpringMVC</p><ul><li>静态页面直接访问：localhost:8080/index.html<ul><li>注意点：如果想要直接访问html页面，则需要把html放在springboot默认加载的文件夹下面</li></ul></li><li>MultipartFile 对象的transferTo方法，用于文件保存（效率和操作比原先用FileOutStream方便和高效）</li></ul><p>访问路径 <a href="http://localhost:8080/images/39020dbb-9253-41b9-8ff9-403309ff3f19.jpeg" target="_blank" rel="noopener">http://localhost:8080/images/39020dbb-9253-41b9-8ff9-403309ff3f19.jpeg</a></p></li><li><p><img src="/2019/12/25/springboot-bi-ji-er/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.png" alt="文件上传"></p></li></ul><h2 id="2-8-jar包方式运行web项目文件上传和访问"><a href="#2-8-jar包方式运行web项目文件上传和访问" class="headerlink" title="2.8-jar包方式运行web项目文件上传和访问"></a>2.8-jar包方式运行web项目文件上传和访问</h2><p><strong>简介：讲解SpingBoot2.x使用 java -jar运行方式的图片上传和访问处理</strong></p><ul><li><p>文件大小配置，启动类里面配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> MultipartConfigElement <span class="token function">multipartConfigElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      MultipartConfigFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipartConfigFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//单个文件最大  </span>    factory<span class="token punctuation">.</span><span class="token function">setMaxFileSize</span><span class="token punctuation">(</span><span class="token string">"10240KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//KB,MB  </span>    <span class="token comment" spellcheck="true">// 设置总上传数据总大小  </span>    factory<span class="token punctuation">.</span><span class="token function">setMaxRequestSize</span><span class="token punctuation">(</span><span class="token string">"1024000KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createMultipartConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre></li><li><p>打包成jar包，需要增加maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ul><p>  如果没加相关依赖，执行maven打包，运行后会报错:no main manifest attribute, in XXX.jar<br>  GUI：反编译工具，作用就是用于把class文件转换成java文件</p><pre><code>- 文件上传和访问需要指定磁盘路径  ```properties  application.properties中增加下面配置  1) web.images-path=/Users/jack/Desktop  2) spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,classpath:/test/,file:${web.upload-path} </code></pre><ul><li>文件服务器：fastdfs，阿里云oss，nginx搭建一个简单的文件服务器等</li></ul><h1 id="3-SpringBoot热部署devtool和配置文件自动注入实战"><a href="#3-SpringBoot热部署devtool和配置文件自动注入实战" class="headerlink" title="3-SpringBoot热部署devtool和配置文件自动注入实战"></a>3-SpringBoot热部署devtool和配置文件自动注入实战</h1><h2 id="3-1-使用Dev-tool热部署"><a href="#3-1-使用Dev-tool热部署" class="headerlink" title="3.1-使用Dev-tool热部署"></a>3.1-使用Dev-tool热部署</h2><p><strong>简介:介绍什么是热部署，使用springboot结合dev-tool工具，快速加载启动应用</strong></p><ul><li><p>什么是热部署？</p><ul><li><p>在应用运行的时升级软件，无需重新启动的方式有两种，<code>热部署</code>和<code>热加载</code>。</p><p>对于Java应用程序来说，<code>热部署</code>就是在服务器运行时重新部署项目，<code>热加载</code>即在在运行时重新加载class，从而升级应用。</p></li><li><p><code>热加载</code>的实现原理主要依赖java的类加载机制，在实现方式可以概括为在容器启动的时候起一条后台线程，定时的检测类文件的时间戳变化，如果类的时间戳变掉了，则将类重新载入。</p><p>对比反射机制，反射是在运行时获取类信息，通过动态的调用来改变程序行为； 热加载则是在运行时通过重新加载改变类信息，直接改变程序行为。</p><p><code>热部署</code>原理类似，但它是直接重新加载整个应用，这种方式会释放内存，比热加载更加干净彻底，但同时也更费时间。</p></li></ul></li><li><p>添加依赖</p><ul><li><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>添加配置</p><ul><li><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#热部署</span><span class="token attr-name">spring.devtools.restart.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.devtools.restart.additional-paths</span><span class="token punctuation">=</span><span class="token attr-value">src/main/java</span><span class="token comment" spellcheck="true">#关闭缓存，及时刷新</span><span class="token comment" spellcheck="true">#spring.thymeleaf.cache=false</span><span class="token comment" spellcheck="true">#排除无需热部署目录</span><span class="token comment" spellcheck="true">#spring.devtools.restart.exclude=static/**,public/**</span><span class="token comment" spellcheck="true">#srping.devtools.restart.exclude=WEB-INF/**</span></code></pre></li></ul></li><li><p>IDEA配置</p><p><img src="/2019/12/25/springboot-bi-ji-er/IDEA%E9%85%8D%E7%BD%AE.png" alt="IDEA配置"></p></li><li><p>不被热部署的文件 :</p><p>1、/META-INF/maven, /META-INF/resources, /resources, /static, /public, or /templates </p><p>2、指定文件不进行热部署 spring.devtools.restart.exclude=static/** ,public/** </p><p>3、手工触发重启 <code>spring.devtools.restart.trigger-file=trigger.txt</code> 改代码不重启，通过一个文本去控制</p><p><a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#using-boot-devtools-restart-exclude" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#using-boot-devtools-restart-exclude</a></p><p><code>注意点</code>：生产环境不要开启这个功能，如果用java -jar启动，springBoot是不会进行热部署的</p></li></ul><h2 id="3-2-SpringBoot配置文件"><a href="#3-2-SpringBoot配置文件" class="headerlink" title="3.2-SpringBoot配置文件"></a>3.2-SpringBoot配置文件</h2><p><strong>简介：SpringBoot2.x常见的配置文件 xml、yml、properties的区别和使用</strong></p><ul><li>xml、properties、json、yaml</li><li>常见的配置文件 xx.yml, xx.properties，<ul><li>1)YAML（Yet Another Markup Language） 写 YAML 要比写 XML 快得多(无需关注标签或引号) 使用空格 Space 缩进表示分层，不同层次之间的缩进可以使用不同的空格数目 注意：key后面的冒号，后面一定要跟一个空格,树状结构 application.properties示例 server.port=8090<br>server.session-timeout=30<br>server.tomcat.max-threads=0<br>server.tomcat.uri-encoding=UTF-8</li></ul></li><li>application.yml示例 server:<br>port: 8090<br>session-timeout: 30<br>tomcat.max-threads: 0<br>tomcat.uri-encoding: UTF-8</li><li>默认示例文件仅作为指导。 不要将整个内容复制并粘贴到您的应用程序中，只挑选您需要的属性。</li><li>参考：<a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#common-application-properties</a></li><li>如果需要修改，直接复制对应的配置文件，加到application.properties里面</li></ul><h2 id="3-3-SpringBoot注解配置文件自动映射到属性和实体类"><a href="#3-3-SpringBoot注解配置文件自动映射到属性和实体类" class="headerlink" title="3.3-SpringBoot注解配置文件自动映射到属性和实体类"></a>3.3-SpringBoot注解配置文件自动映射到属性和实体类</h2><p><strong>简介：讲解使用@value注解配置文件自动映射到属性和实体类</strong></p><ul><li><p>1、配置文件加载</p><ul><li><p>方式一</p><ul><li><p>1、Controller上面配置 </p><p><code>@PropertySource({&quot;classpath:resource.properties&quot;})</code></p></li><li><p>2、增加属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${test.name}"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ul><ul><li><p>方式二：实体类配置文件</p><ul><li><p>1、添加 @Component 注解；</p></li><li><p>2、使用 @PropertySource 注解指定配置文件位置；</p></li><li><p>3、使用 @ConfigurationProperties 注解，设置相关属性；</p></li><li><p>4、必须 通过注入IOC对象Resource 进来 ， 才能在类中使用获取的配置文件值。</p><p> <code>@Autowired private ServerSettings serverSettings</code>;</p></li></ul></li></ul><ul><li><p>例子</p><p>1.配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"classpath:application.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerSettings</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//应用名称</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${test.name}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//域名地址</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${test.domain}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String domain<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.配置文件application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置文件注入</span><span class="token attr-name">test.name</span><span class="token punctuation">=</span><span class="token attr-value">springboot</span><span class="token attr-name">test.domain</span><span class="token punctuation">=</span><span class="token attr-value">www.fangpeng.com</span></code></pre><p>3.注入测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> ServerSettings serverSettings<span class="token punctuation">;</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/test_properties"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> Object <span class="token function">testProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> serverSettings<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>常见问题：<span class="token number">1</span>、配置文件注入失败，Could not resolve placeholder解决：根据springboot启动流程，会有自动扫描包没有扫描到相关注解<span class="token punctuation">,</span> 默认Spring框架实现会从声明<span class="token annotation punctuation">@ComponentScan</span>所在的类的<span class="token keyword">package</span>进行扫描，来自动注入，因此启动类最好放在根路径下面，或者指定扫描包范围spring<span class="token operator">-</span>boot扫描启动类对应的目录和子目录<span class="token number">2</span>、注入bean的方式，属性名称和配置文件里面的key一一对应，就用加<span class="token annotation punctuation">@Value</span> 这个注解如果不一样，就要加<span class="token annotation punctuation">@value</span><span class="token punctuation">(</span><span class="token string">"${XXX}"</span><span class="token punctuation">)</span></code></pre><p><img src="/2019/12/25/springboot-bi-ji-er/%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95.png" alt="配置测试"></p></li><li><p>第二种方式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//配置文件的属性前缀</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"classpath:resource.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerSettings</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> String domain<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h1 id="4-Springboot单元测试进阶实战和自定义异常处理"><a href="#4-Springboot单元测试进阶实战和自定义异常处理" class="headerlink" title="4-Springboot单元测试进阶实战和自定义异常处理"></a>4-Springboot单元测试进阶实战和自定义异常处理</h1><h2 id="4-1-SpringBootTest单元测试实战"><a href="#4-1-SpringBootTest单元测试实战" class="headerlink" title="4.1-SpringBootTest单元测试实战"></a>4.1-SpringBootTest单元测试实战</h2><p><strong>简介：讲解SpringBoot的单元测试</strong></p><p>1、引入相关依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--springboot程序测试依赖，如果是自动创建项目默认添加--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、编写单元测试用例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>ApiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//启动整个springboot工程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootTestDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span> <span class="token comment" spellcheck="true">//Test注解标记方法为测试方法，以便构建工具和IDE能够识别并执行它们</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test hello 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** 其他注解     * @BeforeAll——只执行一次，执行的时机是在所有测试和@BeforeEach注解方法之前     * @BeforeEach——在每个测试执行之前执行     * @AfterEach——在每个测试执行之后执行     * @AfterAll——只执行一次，执行时机是在所有测试和@AfterEach注解方法之后     **/</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBeforeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testBefore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterAll</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAfterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAfter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、Junit5断言</p><ul><li><strong>assertAll</strong>：断言所有提供的可执行文件都不会抛出异常。若提供的标题(heading),其将包含在MultipleFailuresError的消息字符串中。</li><li><strong>assertArrayEquals</strong>：断言期望的和实际的XX类型数组是相等的。若失败，将显示提供的失败消息。</li><li><strong>assertDoesNotThrow</strong>：虽然从测试方法抛出的任何异常都会导致测试失败，但在某些用例中，显式断言测试方法中的给定代码块不会抛出异常会很有用。若提供的标题(heading),其将包含在MultipleFailuresError的消息字符串中。</li><li><strong>assertEquals</strong>：断言预期和实际是相等的。如有必要，将从提供的messageSupplier中懒惰地检索失败消息。</li><li><strong>assertFalse</strong>：断言提供的条件不是真。失败并显示提供的失败消息。</li><li><strong>assertIterableEquals</strong>：断言预期和实际的迭代是完全相同的。类似于检查assertArrayEquals(Object []，Object []，String)中的完全相等，如果遇到两个迭代(包括期望和实际)，则它们的迭代器必须以相同的顺序返回相等的元素。注意：这意味着迭代器不需要是同一类型。</li><li><strong>assertNotNull</strong>：断言提供的条件不为null。</li><li><strong>assertNotSame</strong>：断言预期和实际不会引用同一个对象。</li><li><strong>assertNull</strong>：断言提供的实际为null。</li><li><strong>assertSame</strong>：断言预期和实际引用同一个对象。</li><li><strong>assertThrows</strong>：断言所提供的可执行代码块的执行会引发expectedType的异常并返回异常。如果没有抛出异常，或者抛出了不同类型的异常，则此方法将失败。如果不想对异常实例执行其他检查，只需忽略返回值。</li><li><strong>assertTimeout</strong>：断言在超出给定超时之前，所提供的可执行代码块的执行完成。注意：可执行代码块将在与调用代码相同的线程中执行。因此，如果超过超时，则不会抢先中止执行可执行代码块。</li><li><strong>assertTimeoutPreemptively</strong>：断言在超出给定超时之前，所提供的可执行代码块的执行完成。注意：可执行代码块将在与调用代码不同的线程中执行。此外，如果超过超时，则可抢占地执行可执行代码块。</li><li><strong>assertTrue</strong>：断言提供的条件为true。</li><li><strong>fail</strong>：使用给定的失败消息以及根本原因进行测试失败。泛型返回类型V允许此方法直接用作单语句lambda表达式，从而避免需要实现具有显式返回值的代码块。 由于此方法在其return语句之前抛出AssertionFailedError，因此该方法实际上永远不会向其调用者返回值。</li></ul><h2 id="4-2-SpringBoot测试之MockMvc讲解"><a href="#4-2-SpringBoot测试之MockMvc讲解" class="headerlink" title="4.2-SpringBoot测试之MockMvc讲解"></a>4.2-SpringBoot测试之MockMvc讲解</h2><p><strong>简介: 讲解MockMvc类的使用和模拟Http请求实战</strong></p><ul><li>增加类注解 <code>@AutoConfigureMockMvc</code> 和 <code>@SpringBootTest</code></li><li>相关API <ul><li>perform：执行一个RequestBuilder请求 </li><li>andExpect：添加ResultMatcher-&gt;MockMvcResultMatchers验证规则 andReturn：最后返回相应的MvcResult-&gt;Response</li><li>andReturn：最后返回相应的MvcResult-&gt;Response</li></ul></li></ul><h3 id="4-2-1-什么是Mock？"><a href="#4-2-1-什么是Mock？" class="headerlink" title="4.2.1-什么是Mock？"></a>4.2.1-什么是Mock？</h3><p>在面向对象的程序设计中，模拟对象（英语：<code>mock object</code>）是以可控的方式模拟真实对象行为的假对象。在编程过程中，通常通过模拟一些输入数据，来验证程序是否达到预期结果。</p><h3 id="4-2-2-为什么使用Mock对象？"><a href="#4-2-2-为什么使用Mock对象？" class="headerlink" title="4.2.2-为什么使用Mock对象？"></a>4.2.2-为什么使用Mock对象？</h3><p>使用模拟对象，可以模拟复杂的、真实的对象行为。如果在单元测试中无法使用真实对象，可采用模拟对象进行替代。</p><p><strong>在以下情况可以采用模拟对象来替代真实对象：</strong></p><ul><li>真实对象的行为是不确定的（例如，当前的时间或温度）；</li><li>真实对象很难搭建起来；</li><li>真实对象的行为很难触发（例如，网络错误）；</li><li>真实对象速度很慢（例如，一个完整的数据库，在测试之前可能需要初始化）；</li><li>真实的对象是用户界面，或包括用户界面在内；</li><li>真实的对象使用了回调机制；</li><li>真实对象可能还不存在；</li><li>真实对象可能包含不能用作测试（而不是为实际工作）的信息和方法。</li></ul><p><strong>注：使用Mockito一般分三个步骤：</strong></p><ol><li>模拟测试类所需的外部依赖；</li><li>执行测试代码；</li><li>判断执行结果是否达到预期；</li></ol><h3 id="4-2-3-MockMvc"><a href="#4-2-3-MockMvc" class="headerlink" title="4.2.3-MockMvc"></a>4.2.3-MockMvc</h3><p><code>MockMvc</code>是由spring-test包提供，实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。同时提供了一套验证的工具，结果的验证十分方便。</p><p><strong>接口<code>MockMvcBuilder</code>，提供一个唯一的<code>build</code>方法，用来构造MockMvc。</strong></p><p>主要有两个实现：<code>StandaloneMockMvcBuilder</code>和<code>DefaultMockMvcBuilder</code>，分别对应两种测试方式，即独立安装和集成Web环境测试（并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）。MockMvcBuilders提供了对应的创建方法standaloneSetup方法和webAppContextSetup方法，在使用时直接调用即可。</p><h3 id="4-2-4-在SpringBoot中使用"><a href="#4-2-4-在SpringBoot中使用" class="headerlink" title="4.2.4-在SpringBoot中使用"></a>4.2.4-在SpringBoot中使用</h3><ol><li>引入依赖（jar包），创建SpringBoot项目中默认引入的spring-boot-starter-test间接引入了spring-test，因此无需再额外引入jar包。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>创建Controller类并编写相关方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//测试MockMvc</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test/mockmvc"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test_mockmvc"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><p>编写测试类。实例化MockMvc有两种形式，一种是使用StandaloneMockMvcBuilder，另外一种是使用DefaultMockMvcBuilder。</p><ul><li><p>测试类及初始化MockMvc初始化：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> WebApplicationContext webApplicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化方式一</span>        mockMvc <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloWorldController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例化方式二</span><span class="token comment" spellcheck="true">//        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span>    <span class="token punctuation">}</span></code></pre></li><li><p>单元测试方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>ApiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockMvcTestDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apiTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        MvcResult mvcResult <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>MockMvcRequestBuilders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/test/mockmvc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 1、mockMvc.perform执行一个请求。         * 2、MockMvcRequestBuilders.get("XXX")构造一个请求。         * 3、ResultActions.param添加请求传值         * 4、ResultActions.accept(MediaType.TEXT_HTML_VALUE))设置返回类型         * 5、ResultActions.andExpect添加执行完成后的断言。         * 6、ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情         *   比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息。         * 7、ResultActions.andReturn表示执行完成后返回相应的结果。         */</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>MockMvcRequestBuilders                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置返回值类型为utf-8，否则默认为ISO-8859-1</span>                <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8_VALUE<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Hello Tom!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span>MockMvcResultHandlers<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2 id="4-3-SpringBoot个性化启动banner设置和debug日志"><a href="#4-3-SpringBoot个性化启动banner设置和debug日志" class="headerlink" title="4.3-SpringBoot个性化启动banner设置和debug日志"></a>4.3-SpringBoot个性化启动banner设置和debug日志</h2><p><strong>简介：自定义应用启动的趣味性日志图标和查看调试日志</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">1、启动获取更多信息</span> <span class="token attr-value">java -jar xxx.jar --debug</span>2、修改启动的banner信息        1）在类路径下增加一个banner.txt，里面是启动要输出的信息<span class="token attr-name">        2）在applicatoin.properties增加banner文件的路径地址</span> <span class="token attr-name">            spring.banner.location</span><span class="token punctuation">=</span><span class="token attr-value">banner.txt</span><span class="token attr-name">        3）官网地址</span> <span class="token attr-value">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-banners</span></code></pre><ul><li><p>输出denbug日志</p><ol><li><p>修改application.properties配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">debug</span><span class="token attr-name">或者</span> <span class="token attr-value">指定路径</span><span class="token attr-name">logging.level.com.XXX.XXX.mapper</span><span class="token punctuation">=</span><span class="token attr-value">debug</span></code></pre></li><li><p>修改logback-spring.xml配置文件</p><p>增加<code>&lt;logger name=&quot;com.XXX.XXX.mapper&quot; level=&quot;DEBUG&quot;&gt;&lt;/logger&gt;</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test/log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 按照每天生成日志文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件输出的文件名--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">></span></span>${LOG_HOME}/TestWeb.log.%d{yyyy-MM-dd}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxHistory</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件最大的大小--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxFileSize</span><span class="token punctuation">></span></span>10MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxFileSize</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.type.descriptor.sql.BasicBinder<span class="token punctuation">"</span></span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TRACE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.type.descriptor.sql.BasicExtractor<span class="token punctuation">"</span></span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.SQL<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.engine.QueryParameters<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.engine.query.HQLQueryPlan<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--myibatis log configure--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.apache.ibatis<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TRACE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.sql.Connection<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.sql.Statement<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.sql.PreparedStatement<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志输出级别 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h2 id="4-4-SpringBoot配置全局异常"><a href="#4-4-SpringBoot配置全局异常" class="headerlink" title="4.4-SpringBoot配置全局异常"></a>4.4-SpringBoot配置全局异常</h2><h3 id="4-4-1-模拟全局异常"><a href="#4-4-1-模拟全局异常" class="headerlink" title="4.4.1-模拟全局异常"></a>4.4.1-模拟全局异常</h3><ol><li><p>编写异常代码段</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/v1/test_ext"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>返回结果如下</p><p><img src="/2019/12/25/springboot-bi-ji-er/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8.png" alt="全局异常结果"></p></li></ol><h3 id="4-4-2-异常注解介绍"><a href="#4-4-2-异常注解介绍" class="headerlink" title="4.4.2-异常注解介绍"></a>4.4.2-异常注解介绍</h3><p><code>@ControllerAdvice</code> 顾名思义，这是一个增强的 Controller。需要配合@ExceptionHandler使用，<br>当将异常抛到controller时,可以对异常进行统一处理,规定返回的json格式或是跳转到一个错误页面。</p><p>使用这个 Controller ，可以实现三个方面的功能：</p><ol><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理</li></ol><p>如果是返回json数据 则用 <code>RestControllerAdvice</code>,就可以不加 @ResponseBody</p><p>//捕获全局异常,处理所有不可知的异常<br><code>@ExceptionHandler(value=Exception.class)</code>注解用来指明异常的处理类型</p><h3 id="4-4-3-处理全局异常"><a href="#4-4-3-处理全局异常" class="headerlink" title="4.4.3-处理全局异常"></a>4.4.3-处理全局异常</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CustomExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//捕获全局异常，处理所有不可知的异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"url {}, msg {}"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>返回结果如下：</strong></p><p><img src="/2019/12/25/springboot-bi-ji-er/%E5%A4%84%E7%90%86%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8.png" alt="处理全局异常结果"></p><h3 id="4-4-4-处理自定义异常"><a href="#4-4-4-处理自定义异常" class="headerlink" title="4.4.4-处理自定义异常"></a>4.4.4-处理自定义异常</h3><ol><li><p>自定义异常类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义异常类</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>处理自定义异常</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//处理自定义异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">handleMyException</span><span class="token punctuation">(</span>MyException e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>返回自定义页面</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//处理自定义异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">handleMyExceptio</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2019/12/25/springboot-bi-ji-er/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2.png" alt="自定义页面"></p></li></ol><h1 id="5-SpringBoot部署war项目到tomcat9和启动原理"><a href="#5-SpringBoot部署war项目到tomcat9和启动原理" class="headerlink" title="5-SpringBoot部署war项目到tomcat9和启动原理"></a>5-SpringBoot部署war项目到tomcat9和启动原理</h1><h2 id="5-1-SpringBoot启动方式和部署war项目到tomcat9"><a href="#5-1-SpringBoot启动方式和部署war项目到tomcat9" class="headerlink" title="5.1-SpringBoot启动方式和部署war项目到tomcat9"></a>5.1-SpringBoot启动方式和部署war项目到tomcat9</h2><ol><li><p>IDE启动</p></li><li><p>jar包方式启动</p><pre class=" language-xml"><code class="language-xml">//maven插件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>如果没有加，则执行jar包 ，报错如下</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>jar spring<span class="token operator">-</span>boot<span class="token operator">-</span>demo<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar                no main manifest attribute<span class="token punctuation">,</span> in spring<span class="token operator">-</span>boot<span class="token operator">-</span>demo<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar</code></pre><p>jar包项目结构</p><pre class=" language-xml"><code class="language-xml">example.jar                 |                 +-META-INF                 |  +-MANIFEST.MF                 +-org                 |  +-springframework                 |     +-boot                 |        +-loader                 |           +-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring</span> <span class="token attr-name">boot</span> <span class="token attr-name">loader</span> <span class="token attr-name">classes</span><span class="token punctuation">></span></span>                 +-BOOT-INF                    +-classes                    |  +-mycompany                    |     +-project                    |        +-YourClasses.class                    +-lib                       +-dependency1.jar                       +-dependency2.jar</code></pre><p>目录结构讲解<br><a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#executable-jar-jar-file-structure" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#executable-jar-jar-file-structure</a></p></li><li><p>war包方式启动</p><ul><li><p>在pom.xml中将打包形式 <code>jar</code> 修改为<code>war</code>  <packaging>war</packaging></p><p>构建项目名称 <finalName>springboot_demo</finalName></p></li><li><p>tocmat下载和安装 <a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-90.cgi</a></p></li><li><p>修改启动类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder application<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> application<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>DemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre></li><li><p>打包项目，启动tomcat</p></li></ul></li></ol><h2 id="5-2-SpringBoot启动原理"><a href="#5-2-SpringBoot启动原理" class="headerlink" title="5.2-SpringBoot启动原理"></a>5.2-SpringBoot启动原理</h2><h1 id="6-SpringBoot拦截器和-Servlet3-0自定义Filter、Listener"><a href="#6-SpringBoot拦截器和-Servlet3-0自定义Filter、Listener" class="headerlink" title="6-SpringBoot拦截器和 Servlet3.0自定义Filter、Listener"></a>6-SpringBoot拦截器和 Servlet3.0自定义Filter、Listener</h1><h2 id="6-1-SpringBoot过滤器和Servlet3-0配置过滤器"><a href="#6-1-SpringBoot过滤器和Servlet3-0配置过滤器" class="headerlink" title="6.1-SpringBoot过滤器和Servlet3.0配置过滤器"></a>6.1-SpringBoot过滤器和Servlet3.0配置过滤器</h2><ol><li>SpringBoot启动默认加载的Filter </li></ol><pre><code>characterEncodingFilterhiddenHttpMethodFilterhttpPutFormContentFilterrequestContextFilter</code></pre><ol start="2"><li>Filter优先级</li></ol><p><code>Ordered.HIGHEST_PRECEDENCE</code><br><code>Ordered.LOWEST_PRECEDENCE</code></p><p>低位值意味着更高的优先级 Higher values are interpreted as lower priority<br>自定义Filter，避免和默认的Filter优先级一样，不然会冲突</p><p>注册Filter的bean FilterRegistrationBean<br>同模块里面有相关默认Filter<br>            web-&gt;servlet-&gt;filter</p><ol start="3"><li>自定义Filter<ul><li>使用Servlet3.0的注解进行配置</li><li>启动类里面增加 @ServletComponentScan，进行扫描</li><li>新建一个Filter类，implements Filter，并实现对应的接口</li><li><code>@WebFilter</code> 标记一个类为filter，被spring进行扫描<br> <code>urlPatterns</code>：拦截规则，支持正则</li><li>控制chain.doFilter的方法的调用，来实现是否通过放行<br>不放行，web应用resp.sendRedirect(“/index.html”);<br>场景：权限控制、用户登录(非前端后端分离场景)等</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/api/*"</span><span class="token punctuation">,</span> filterName <span class="token operator">=</span> <span class="token string">"loginFilter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//容器加载的时候调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init loginFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//请求被拦截的时候调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doFilter loginFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"fangpeng"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//容器被销毁的时候调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy loginFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-2-Servlet3-0注解自定义原生Servlet"><a href="#6-2-Servlet3-0注解自定义原生Servlet" class="headerlink" title="6.2-Servlet3.0注解自定义原生Servlet"></a>6.2-Servlet3.0注解自定义原生Servlet</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userServlet"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/test/customs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>                 resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"custom sevlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="6-3-自定义监听器Listener"><a href="#6-3-自定义监听器Listener" class="headerlink" title="6.3-自定义监听器Listener"></a>6.3-自定义监听器Listener</h2><ul><li><p>常用的监听器</p><p><code>servletContextListener</code>、<code>httpSessionListener</code>、<code>servletRequestListener</code></p></li><li><p>Servlet注解自定义监听器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span>ServletRequestEvent sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======requestDestroyed========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span>ServletRequestEvent sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======requestInitialized========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======contextInitialized======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contextDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="6-4-自定义拦截器Interceptor"><a href="#6-4-自定义拦截器Interceptor" class="headerlink" title="6.4-自定义拦截器Interceptor"></a>6.4-自定义拦截器Interceptor</h2><ol><li><p>@Configuration</p><ul><li>继承WebMvcConfigurationAdapter(SpringBoot2.X之前旧版本)</li><li>SpringBoot2.X 新版本配置拦截器 implements <code>WebMvcConfigurer</code></li></ul></li><li><p>自定义拦截器 HandlerInterceptor</p><ul><li>preHandle：调用Controller某个方法之前</li><li>postHandle：Controller之后调用，视图渲染之前，如果控制器Controller出现了异常，则不会执行此方法</li><li>afterCompletion：不管有没有异常，这个afterCompletion都会被调用，用于资源清理</li></ul></li><li><p>按照注册顺序进行拦截，先注册，先被拦截</p></li><li><p>拦截器不生效常见问题：</p><ul><li>是否有加@Configuration</li><li>拦截路径是否有问题 <code>**</code>  和 <code>*</code> </li><li>拦截器最后路径一定要 “/**”， 如果是目录的话则是 ”/ */“</li></ul></li><li><p>Filter</p><p>是基于函数回调 doFilter()，而Interceptor则是基于AOP思想<br>Filter在只在Servlet前后起作用，而Interceptor够深入到方法前后、异常抛出前后等</p><p>依赖于Servlet容器即web应用中，而Interceptor不依赖于Servlet容器所以可以运行在多种环境。</p><p>在接口调用的生命周期里，Interceptor可以被多次调用，而Filter只能在容器初始化时调用一次。</p></li></ol><p>   Filter和Interceptor的执行顺序：</p><p>   过滤前-&gt;拦截前-&gt;action执行-&gt;拦截后-&gt;过滤后</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//进入controller方法之前</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LoginInterceptor=====>preHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> HandlerInterceptor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用完controller之后，试图渲染之前</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LoginInterceptor====>postHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HandlerInterceptor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LoginInterceptor====>afterCompletion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HandlerInterceptor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomWebMvcConfigure</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/*/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/*/**"</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span> 排除某路径不被拦截        <span class="token comment" spellcheck="true">//拦截全部 </span><span class="token comment" spellcheck="true">/*/*/</span><span class="token operator">*</span><span class="token operator">*</span>        WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="7-数据库操作之整合Mybatis和事务"><a href="#7-数据库操作之整合Mybatis和事务" class="headerlink" title="7-数据库操作之整合Mybatis和事务"></a>7-数据库操作之整合Mybatis和事务</h1><h2 id="7-1-SpringBoot持久化数据方式"><a href="#7-1-SpringBoot持久化数据方式" class="headerlink" title="7.1-SpringBoot持久化数据方式"></a>7.1-SpringBoot持久化数据方式</h2><ol><li><p>原始java访问数据库JDBC（开发流程会很麻烦）</p><ul><li><p>注册驱动/加载驱动——<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code></p></li><li><p>建立连接</p><p><code>Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/dbname&quot;,&quot;root&quot;,&quot;root&quot;);</code></p></li><li><p>创建Statement</p></li><li><p>执行SQL语句</p></li><li><p>处理结果集</p></li><li><p>关闭连接，释放资源</p></li></ul></li><li><p>apache dbutils框架</p><p>比JDBC简单点<br>官网:<a href="https://commons.apache.org/proper/commons-dbutils/" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-dbutils/</a></p></li><li><p>jpa框架</p><p><code>spring-data-jpa</code><br>jpa在复杂查询的时候性能不是很好</p></li><li><p>Hiberante </p><p>解释：ORM：对象关系映射Object Relational Mapping<br>企业大都喜欢使用hibernate</p></li><li><p>Mybatis框架</p><p>互联网行业通常使用mybatis<br>不提供对象和关系模型的直接映射,半ORM</p></li></ol><h2 id="7-2-SpringBoot2-x整合Mybatis3-x注解实战"><a href="#7-2-SpringBoot2-x整合Mybatis3-x注解实战" class="headerlink" title="7.2-SpringBoot2.x整合Mybatis3.x注解实战"></a>7.2-SpringBoot2.x整合Mybatis3.x注解实战</h2><ol><li><p>使用starter, maven仓库地址：<a href="http://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter</a></p></li><li><p>加入依赖(可以用 <a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a> 下载)</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入starter--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- MySQL的JDBC驱动包    --></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 引入第三方数据源 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>加入配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#mybatis.type-aliases-package=com.fangpeng.base_project.domain</span><span class="token comment" spellcheck="true">#可以自动识别</span><span class="token comment" spellcheck="true">#spring.datasource.driver-class-name =com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span class="token comment" spellcheck="true">#如果不使用默认的数据源 （com.zaxxer.hikari.HikariDataSource）</span><span class="token attr-name">spring.datasource.type</span> <span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span></code></pre><p>加载配置，注入到<code>sqlSessionFactory</code>等都是springBoot帮我们完成</p></li><li><p>启动类增加mapper扫描</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.fangpeng.base_project.mapper"</span><span class="token punctuation">)</span>技巧：保存对象，获取数据库自增id <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> keyProperty<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span> keyColumn<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span></code></pre></li><li><p>开发mapper<br>参考语法 <a href="http://www.mybatis.org/mybatis-3/zh/java-api.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/java-api.html</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//推荐使用#{}取值，不要用${}取值，因为存在SQL注入风险</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(name,phone,create_time,age) VALUES(#{name}, #{phone}, #{createTime}, #{age})"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>开发service</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>开发controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kobe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>sql脚本</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>          <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> unsigned <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>          <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>          <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户手机号'</span><span class="token punctuation">,</span>          <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>          <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">18</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p><strong>相关资料：</strong></p><pre><code>http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/#Configuration</code></pre><p>​    <a href="https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples" target="_blank" rel="noopener">https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples</a></p><p><strong>整合问题集合：</strong></p><p>​    <a href="https://my.oschina.net/hxflar1314520/blog/1800035" target="_blank" rel="noopener">https://my.oschina.net/hxflar1314520/blog/1800035</a><br>​    <a href="https://blog.csdn.net/tingxuetage/article/details/80179772" target="_blank" rel="noopener">https://blog.csdn.net/tingxuetage/article/details/80179772</a></p></li></ol><h2 id="7-3-SpringBoot整合Mybatis实操和打印SQL语句"><a href="#7-3-SpringBoot整合Mybatis实操和打印SQL语句" class="headerlink" title="7.3-SpringBoot整合Mybatis实操和打印SQL语句"></a>7.3-SpringBoot整合Mybatis实操和打印SQL语句</h2><ol><li><p>控制台打印sql语句        </p><pre><code>#增加打印sql语句，一般用于本地开发测试   `mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl`</code></pre></li><li><p>增加mapper代码    </p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//javaType = java.util.Date.class        </span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE id = #{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    User <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE user SET name=#{name} WHERE id =#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM user WHERE id =#{userId}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>增加API</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"find_all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"find_by_Id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"del_by_id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">delById</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">update</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonData<span class="token punctuation">.</span><span class="token function">buildSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h2 id="7-4-事务介绍和常见的隔离级别，传播行为"><a href="#7-4-事务介绍和常见的隔离级别，传播行为" class="headerlink" title="7.4-事务介绍和常见的隔离级别，传播行为"></a>7.4-事务介绍和常见的隔离级别，传播行为</h2><ol><li><p>什么是事务？</p><p>指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。<br>简单的说，事务就是并发控制的单位，是用户定义的一个操作序列。<br>而一个逻辑工作单元要成为事务，就必须满足ACID属性。<br>A：原子性（Atomicity）</p><pre><code>事务中的操作要么都不做，要么就全做。</code></pre><p>C：一致性（Consistency）</p><pre><code>事务执行的结果必须是从数据库从一个一致性状态转换到另一个一致性状态。</code></pre><p>I：隔离性（Isolation）</p><pre><code>一个事务的执行不能被其他事务干扰</code></pre><p>D：持久性（Durability）</p><pre><code>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的</code></pre></li><li><p>事务的隔离级别</p><ul><li><p>读未提交（<code>Read Uncommitted</code>）：保证了读取过程中不会读取到非法数据</p><p>​             引发脏读（读取了未提交的数据）</p></li><li><p>读已提交（<code>Read Committed</code>）</p><pre><code>        这是大多数数据库系统默认的隔离级别，但不是MySQL默认的        只能看见已经提交事务所做的改变        引发不可重复读，不可重读读意味着我们同一事务执行完全相同的select语句时可能看到不一样的结果。        ——&gt;导致这种情况的原因可能有：(1)有一个交叉的事务有新的commit，导致了数据的改变;(2)一个数据库被多个实例操作时,同一事务的其他实例在该实例处理其间可能会有新的commit                多个commit提交时，只读一次出现结果不一致</code></pre></li><li><p>可重复读（<code>Repeatable Read</code>）：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据</p><p>​        这是MySQL的默认事务隔离级别<br>​        它确保同一事务的多个实例在并发读取数据时，看到同样的数据行<br>​        此级别可能出现的问题–幻读（Phantom Read），当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行<br>​        InnoDB和Falcon存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题</p></li><li><p>可串行化（<code>Serializable</code>）：最严格，串行处理，消耗资源大</p><p>​            这是最高的隔离级别<br>​            它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它在每个读的数据行上加上共享锁。<br>​            可能导致大量的超时现象和锁竞争</p></li></ul></li><li><p>常见的传播行为</p><pre class=" language-properties"><code class="language-properties">PROPAGATION_REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务,最常见的选择。PROPAGATION_SUPPORTS--支持当前事务，如果当前没有事务，就以非事务方式执行。PROPAGATION_MANDATORY--支持当前事务，如果当前没有事务，就抛出异常。<span class="token attr-name">PROPAGATION_REQUIRES_NEW--新建事务，如果当前存在事务，把当前事务挂起,</span> <span class="token attr-value">两个事务之间没有关系，一个异常，一个提交，不会同时回滚</span>PROPAGATION_NOT_SUPPORTED--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。PROPAGATION_NEVER--以非事务方式执行，如果当前存在事务，则抛出异常</code></pre></li></ol><h2 id="7-5-SpringBoot整合mybatis之事务处理实战"><a href="#7-5-SpringBoot整合mybatis之事务处理实战" class="headerlink" title="7.5-SpringBoot整合mybatis之事务处理实战"></a>7.5-SpringBoot整合mybatis之事务处理实战</h2><ul><li>service逻辑引入事务</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"事务测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"000121212"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="8-SpringBoot整合Redis"><a href="#8-SpringBoot整合Redis" class="headerlink" title="8-SpringBoot整合Redis"></a>8-SpringBoot整合Redis</h1><h2 id="8-1-分布式缓存Redis介绍"><a href="#8-1-分布式缓存Redis介绍" class="headerlink" title="8.1-分布式缓存Redis介绍"></a>8.1-分布式缓存Redis介绍</h2><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p><ol><li><p>redis官网 <a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p></li><li><p>新手入门redis在线测试工具：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></p></li></ol><h2 id="8-2-源码编译安装Redis4-x"><a href="#8-2-源码编译安装Redis4-x" class="headerlink" title="8.2-源码编译安装Redis4.x"></a>8.2-源码编译安装Redis4.x</h2><ol><li><p>快速安装  <a href="https://redis.io/download#installation" target="_blank" rel="noopener">https://redis.io/download#installation</a></p><pre><code>    wget http://download.redis.io/releases/redis-4.0.9.tar.gz       tar xzf redis-4.0.9.tar.gz       cd redis-4.0.9       make</code></pre><p> 启动服务端：src/redis-server<br> 启动客户端：src/redis-cli</p></li><li><p>默认是本地访问的，需要开放外网访问</p><pre><code>1）打开redis.conf文件在NETWORK部分修改      注释掉bind 127.0.0.1可以使所有的ip访问redis      修改 protected-mode，值改为no</code></pre></li></ol><h2 id="8-3-SpringBoot整合redis实战"><a href="#8-3-SpringBoot整合redis实战" class="headerlink" title="8.3-SpringBoot整合redis实战"></a>8.3-SpringBoot整合redis实战</h2><ol><li><p>官网：<a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-redis" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-redis</a><br>集群文档：<a href="https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#cluster" target="_blank" rel="noopener">https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#cluster</a></p></li><li><p>springboot整合redis相关依赖引入</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>相关配置文件配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#=========redis基础配置=========</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true"># 连接超时时间 单位 ms（毫秒）</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">3000</span><span class="token comment" spellcheck="true">#=========redis线程池设置=========</span><span class="token comment" spellcheck="true"># 连接池中的最大空闲连接，默认值也是8。</span><span class="token attr-name">spring.redis.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span class="token comment" spellcheck="true">#连接池中的最小空闲连接，默认值也是0。</span><span class="token attr-name">spring.redis.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">200</span><span class="token comment" spellcheck="true"># 如果赋值为-1，则表示不限制；pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。</span><span class="token attr-name">spring.redis.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment" spellcheck="true"># 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时</span><span class="token attr-name">spring.redis.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">1000</span></code></pre></li><li><p>常见redistemplate种类讲解和缓存实操(使用自动注入)</p><ul><li><p>注入模板</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> StirngRedisTemplate strTplRedis</code></pre></li><li><p>类型String,List,Hash,Set,ZSet</p><pre><code>对应的方法分别是opsForValue()、opsForList()、opsForHash()、opsForSet()、opsForZSet()</code></pre></li></ul></li></ol><h2 id="8-5-Redis配置类和工具类"><a href="#8-5-Redis配置类和工具类" class="headerlink" title="8.5-Redis配置类和工具类"></a>8.5-Redis配置类和工具类</h2><ol><li><p>RedisTemplate的自动配置（源代码如下）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>    proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RedisOperations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RedisProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>LettuceConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JedisConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RedisAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"redisTemplate"</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过源码可以看出，SpringBoot自动帮我们在容器中生成了一个<code>RedisTemplate</code>和一个<code>StringRedisTemplate</code>。但是，这个RedisTemplate的泛型是&lt;Object,Object&gt;，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为&lt;String,Object&gt;形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。</p><pre><code>    看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，配置RedisTemplate。</code></pre></li><li><p>重新写一个Redis配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Redis配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>封装Redis工具类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// =============================common============================</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * å     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="9-SpringBoot整合定时任务和异步任务"><a href="#9-SpringBoot整合定时任务和异步任务" class="headerlink" title="9-SpringBoot整合定时任务和异步任务"></a>9-SpringBoot整合定时任务和异步任务</h1><h2 id="9-1-SpringBoot定时任务schedule"><a href="#9-1-SpringBoot定时任务schedule" class="headerlink" title="9.1-SpringBoot定时任务schedule"></a>9.1-SpringBoot定时任务schedule</h2><ol><li><p>常见定时任务</p><ul><li><p>Java自带的java.util.Timer类</p><p>timer:配置比较麻烦，时间延后问题<br>timertask:不推荐</p></li><li><p>Quartz框架</p><p>配置更简单<br>xml或者注解</p></li><li><p>SpringBoot使用注解方式开启定时任务</p><ul><li>启动类里面 @EnableScheduling开启定时任务，自动扫描</li><li>定时任务业务类 加注解 @Component被容器扫描</li><li>定时执行的方法加上注解 @Scheduled(fixedRate=2000) 定期执行一次</li></ul></li></ul></li><li><p>定时任务schedule</p><p>SpringBoot内置了定时任务Scheduled，能够很好的实现定时任务。</p><ul><li>在SpringBoot应用添加<code>@EnableScheduling</code>注解启动定时任务</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootTestApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootTestApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>添加测试定时任务的代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"5 0 0 * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时任务1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span>  <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>fixedDelay <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2执行时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时任务2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2结束时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span>  <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3执行时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时任务3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3结束时间："</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong></p><ul><li>corn表达式在linux使用广泛，具体可以参考<a href="https://www.cnblogs.com/javahr/p/8318728.html" target="_blank" rel="noopener">cron表达式详解</a>以及在线<a href="https://tool.lu/crontab/" target="_blank" rel="noopener">Cron表达式生成器</a></li><li>initialDelay：启动后多久开始执行，单位时毫秒</li><li>fixedRate：下次执行时间，任务开始运行的时候就计时</li><li>fixedDelay：下次执行时间，fixedDelay等任务进行完了才开始计时，上一次执行结束时间点后xx秒再次执行</li><li>fixedDelayString:  字符串形式，可以通过配置文件指定</li></ul></li></ol><h2 id="9-2-SpringBoot异步任务"><a href="#9-2-SpringBoot异步任务" class="headerlink" title="9.2-SpringBoot异步任务"></a>9.2-SpringBoot异步任务</h2><ol><li><p>启动类里面使用@EnableAsync注解开启功能，自动扫描</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>定义异步任务类并使用@Component标记组件被容器扫描,异步方法加上@Async</p><pre><code>    注意点：           1）要把异步任务封装到类里面，不能直接写到Controller           2）增加Future&lt;String&gt; 返回结果 AsyncResult&lt;String&gt;(&quot;task执行完成&quot;);             3）如果需要拿到结果 需要判断全部的 task.isDone()</code></pre><p><code>@EnableAsync</code> 表示支持异步任务，springboot对于异步，定时，缓存，切面等的配置都是通过在启动类上加 @EnableXXX来配置的。</p><p><code>@Async</code>表示该方法会异步执行，也就是说主线程会直接跳过该方法，而是使用线程池中的线程来执行该方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">execTaskA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskA开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskA结束，耗时毫秒数："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> star<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"TaskA结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">execTaskB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskB开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskB结束，耗时毫秒数："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> star<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"TaskB结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">execTaskC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskC开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TaskC结束，耗时毫秒数："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> star<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"TaskC结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>通过注入方式，注入到controller里面，如果测试前后区别则改为同步则把Async注释掉</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AsyncTask asyncTask<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testTask"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务开始，当前时间"</span> <span class="token operator">+</span>star <span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> taskA <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">execTaskA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> taskB <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">execTaskB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> taskC <span class="token operator">=</span> asyncTask<span class="token punctuation">.</span><span class="token function">execTaskC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//间隔一秒轮询 直到 A B C 全部完成</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>taskA<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> taskB<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> taskC<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务结束，当前时间"</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总耗时："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="9-3-SpringBootz整合Quartz"><a href="#9-3-SpringBootz整合Quartz" class="headerlink" title="9.3-SpringBootz整合Quartz"></a>9.3-SpringBootz整合Quartz</h2><p>Quartz是一款功能强大的任务调度器，可以实现较为复杂的调度功能，如每月一号执行、每天凌晨执行、每周五执行等等，还支持分布式调度。本文使用Springboot+Mybatis+Quartz实现对定时任务的增、删、改、查、启用、停用等功能。并把定时任务持久化到数据库以及支持集群。</p><h3 id="Quartz的3个基本要素"><a href="#Quartz的3个基本要素" class="headerlink" title="Quartz的3个基本要素"></a>Quartz的3个基本要素</h3><ul><li>Scheduler：调度器。所有的调度都是由它控制。</li><li>Trigger： 触发器。决定什么时候来执行任务。</li><li>JobDetail &amp; Job： JobDetail定义的是任务数据，而真正的执行逻辑是在Job中。使用JobDetail + Job而不是Job，这是因为任务是有可能并发执行，如果Scheduler直接使用Job，就会存在对同一个Job实例并发访问的问题。而JobDetail &amp; Job 方式，sheduler每次执行，都会根据JobDetail创建一个新的Job实例，这样就可以规避并发访问的问题。</li></ul><ol><li><p>引入依赖jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--QuartZ--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol><ol start="2"><li><p>添加配置application-quartz.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#配置数据源</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/testquartz<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> password  <span class="token key atrule">quartz</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#持久化到数据库方式</span>    <span class="token key atrule">job-store-type</span><span class="token punctuation">:</span> jdbc    <span class="token key atrule">initialize-schema</span><span class="token punctuation">:</span> embedded    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">org</span><span class="token punctuation">:</span>        <span class="token key atrule">quartz</span><span class="token punctuation">:</span>          <span class="token key atrule">scheduler</span><span class="token punctuation">:</span>            <span class="token key atrule">instanceName</span><span class="token punctuation">:</span> MyScheduler            <span class="token key atrule">instanceId</span><span class="token punctuation">:</span> AUTO          <span class="token key atrule">jobStore</span><span class="token punctuation">:</span>            <span class="token key atrule">class</span><span class="token punctuation">:</span> org.quartz.impl.jdbcjobstore.JobStoreTX            <span class="token key atrule">driverDelegateClass</span><span class="token punctuation">:</span> org.quartz.impl.jdbcjobstore.StdJDBCDelegate            <span class="token key atrule">tablePrefix</span><span class="token punctuation">:</span> QRTZ_            <span class="token key atrule">isClustered</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">clusterCheckinInterval</span><span class="token punctuation">:</span> <span class="token number">10000</span>            <span class="token key atrule">useProperties</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">threadPool</span><span class="token punctuation">:</span>            <span class="token key atrule">class</span><span class="token punctuation">:</span> org.quartz.simpl.SimpleThreadPool            <span class="token key atrule">threadCount</span><span class="token punctuation">:</span> <span class="token number">10</span>         <span class="token key atrule">threadPriority</span><span class="token punctuation">:</span> <span class="token number">5</span>            <span class="token key atrule">threadsInheritContextClassLoaderOfInitializingThread</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>实现<code>Job</code>接口并且在<code>execute</code>方法中实现自己的业务逻辑</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    HelloworldService helloworldService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>        helloworldService<span class="token punctuation">.</span><span class="token function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world! :"</span> <span class="token operator">+</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JobDetail <span class="token function">myJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        JobDetail jobDetail <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>HiJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myJob1"</span><span class="token punctuation">,</span><span class="token string">"myJobGroup1"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//JobDataMap可以给任务execute传递参数</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"job_param"</span><span class="token punctuation">,</span><span class="token string">"job_param1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jobDetail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Trigger <span class="token function">myTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Trigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">myJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"myTrigger1"</span><span class="token punctuation">,</span><span class="token string">"myTriggerGroup1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"job_trigger_param"</span><span class="token punctuation">,</span><span class="token string">"job_trigger_param1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//.withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(5).repeatForever())</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ? 2018"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Quartz使用同一组数据库表作集群只需要配置相同的<code>instanceName</code>实例名称，以及设置<code>org.quartz.jobStore.isClustered = true</code><br>启动两个节点后关闭其中正在跑任务的节点，另一个节点会自动检测继续运行定时任务</p></li></ol><p>注：多任务的问题，多个<code>JobDetail</code>使用同一个<code>Trigger</code>报错：<code>Trigger does not reference given job!</code></p><p>​        一个Job可以对应多个Trigger，但多个Job绑定一个Trigger报错。</p><h1 id="10-Logback日志框架介绍和SpringBoot整合"><a href="#10-Logback日志框架介绍和SpringBoot整合" class="headerlink" title="10-Logback日志框架介绍和SpringBoot整合"></a>10-Logback日志框架介绍和SpringBoot整合</h1><h2 id="10-1-新日志框架LogBack介绍"><a href="#10-1-新日志框架LogBack介绍" class="headerlink" title="10.1-新日志框架LogBack介绍"></a>10.1-新日志框架LogBack介绍</h2><ol><li><p>常用处理java的日志组件 slf4j,log4j,logback,common-logging 等</p></li><li><p>logback介绍：</p><p>​    基于Log4j基础上大量改良，不能单独使用，推荐配合日志框架SLF4J来使用<br>​    logback当前分成三个模块：logback-core,logback-classic和logback-access;<br>​    logback-core是其它两个模块的基础模块</p></li><li><p>Logback的核心对象：</p><pre><code>Logger：日志记录器Appender：指定日志输出的目的地，目的地可以是控制台，文件Layout：日志布局 格式化日志信息的输出</code></pre></li><li><p>日志级别：DEBUG &lt; INFO &lt; WARN &lt; ERROR</p><pre class=" language-properties"><code class="language-properties"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>log4j示例<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>        <span class="token comment" spellcheck="true">### 设置###</span><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">debug,stdout,D,E</span><span class="token comment" spellcheck="true">### 输出信息到控制抬 ###</span><span class="token attr-name">log4j.appender.stdout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.stdout.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n</span><span class="token comment" spellcheck="true">### 输出DEBUG 级别以上的日志到=D://logs/error.log ###</span><span class="token attr-name">log4j.appender.D</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token attr-name">log4j.appender.D.File</span> <span class="token punctuation">=</span> <span class="token attr-value">D://logs/log.log</span><span class="token attr-name">log4j.appender.D.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">log4j.appender.D.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">DEBUG </span><span class="token attr-name">log4j.appender.D.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.D.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n</span><span class="token comment" spellcheck="true">### 输出ERROR 级别以上的日志到=D://logs/error.log ###</span><span class="token attr-name">log4j.appender.E</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token attr-name">log4j.appender.E.File</span> <span class="token punctuation">=</span><span class="token attr-value">E://logs/error.log </span><span class="token attr-name">log4j.appender.E.Append</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">log4j.appender.E.Threshold</span> <span class="token punctuation">=</span> <span class="token attr-value">ERROR </span><span class="token attr-name">log4j.appender.E.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.E.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n </span></code></pre></li><li><p>Log4j日志转换为logback在线工具（支持log4j.properties转换为logback.xml,不支持 log4j.xml转换为logback.xml） <a href="https://logback.qos.ch/translator/" target="_blank" rel="noopener">https://logback.qos.ch/translator/</a></p></li></ol><h2 id="10-2-SpringBoot2-x日志讲解和Logback"><a href="#10-2-SpringBoot2-x日志讲解和Logback" class="headerlink" title="10.2-SpringBoot2.x日志讲解和Logback"></a>10.2-SpringBoot2.x日志讲解和Logback</h2><ol><li><p>官网介绍：<a href="https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-logging</a></p><p>各个组件案例：<a href="https://logback.qos.ch/manual/index.html" target="_blank" rel="noopener">https://logback.qos.ch/manual/index.html</a></p></li><li><p>分析SpringBoot启动日志</p><ul><li>默认情况下，Spring Boot将日志输出到控制台</li></ul></li><li><p>整合Logback实战</p><ul><li>创建 日志文件logback-spring.xml，官方推荐 -spring.xml结尾<br>默认加载加载配置顺序 logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</li></ul></li><li><p>注释：</p><pre><code>&lt;configuration&gt; 子节点&lt;appender&gt;&lt;/appender&gt;                       &lt;logger&gt;&lt;/logger&gt;&lt;root&gt;&lt;/root&gt;(要加在最后)        </code></pre></li></ol><p><code>Logback.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义参数,后面可以通过${app.name}使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logback_test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--ConsoleAppender 用于在屏幕上输出日志--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义了一个过滤器,在LEVEL之下的日志输出不会被打印出来--></span>        <span class="token comment" spellcheck="true">&lt;!--这里定义了DEBUG，也就是控制台不会输出比ERROR级别小的日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- encoder 默认配置为PatternLayoutEncoder --></span>        <span class="token comment" spellcheck="true">&lt;!--定义控制台输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d [%thread] %-5level %logger{36} [%file : %line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义日志输出的路径--></span>        <span class="token comment" spellcheck="true">&lt;!--这里的scheduler.manager.server.home 没有在上面的配置中设定，所以会使用java启动时配置的值--></span>        <span class="token comment" spellcheck="true">&lt;!--比如通过 java -Dscheduler.manager.server.home=/path/to XXXX 配置该属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${scheduler.manager.server.home}/logs/${app.name}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义日志滚动的策略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--定义文件滚动时的文件名的格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${scheduler.manager.server.home}/logs/${app.name}.%d{yyyy-MM-dd.HH}.log.gz            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--60天的时间周期，日志量最大20GB--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 该属性在 1.1.6版本后 才开始支持--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>20GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--每个日志文件最大100MB--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d [%thread] %-5level %logger{36} [%file : %line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--root是默认的logger 这里设定输出级别是debug--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义了两个appender，日志会通过往这两个appender里面写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--对于类路径以 com.example.logback 开头的Logger,输出级别设置为warn,并且只输出到控制台--></span>    <span class="token comment" spellcheck="true">&lt;!--这个logger没有指定appender，它会继承root节点中定义的那些appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.logback<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--通过 LoggerFactory.getLogger("mytest") 可以获取到这个logger--></span>    <span class="token comment" spellcheck="true">&lt;!--由于这个logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender--></span>    <span class="token comment" spellcheck="true">&lt;!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况--></span>    <span class="token comment" spellcheck="true">&lt;!--additivity表示要不要使用rootLogger配置的appender进行输出--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mytest<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--由于设置了 additivity="false" ，所以输出时不会使用rootLogger的appender--></span>    <span class="token comment" spellcheck="true">&lt;!--但是这个logger本身又没有配置appender，所以使用这个logger输出日志的话就不会输出到任何地方--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mytest2<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h1 id="11-搜索框架ElasticSearch介绍和整合SpringBoot"><a href="#11-搜索框架ElasticSearch介绍和整合SpringBoot" class="headerlink" title="11-搜索框架ElasticSearch介绍和整合SpringBoot"></a>11-搜索框架ElasticSearch介绍和整合SpringBoot</h1><h2 id="11-1-搜索知识"><a href="#11-1-搜索知识" class="headerlink" title="11.1-搜索知识"></a>11.1-搜索知识</h2><ul><li><p>mysql：like 模糊，性能问题</p></li><li><p>solr:针对企业，Lucene</p></li><li><p><code>elasticsearch：</code></p><p>针对数据量特别大，PB,TB<br>纯java开发，springboot使用，5.6版本<br>es升级4-&gt;5版本，改动大，但是5版本后，改动不大</p></li></ul><h2 id="11-2-ElasticSearch介绍"><a href="#11-2-ElasticSearch介绍" class="headerlink" title="11.2-ElasticSearch介绍"></a>11.2-ElasticSearch介绍</h2><p>Elasticsearch(ES)是一个基于Apache的开源索引库Lucene而构建的开源、分布式、具有RESTful接口的全文搜索引擎, 还是一个分布式文档数据库.</p><p>ES可以轻松扩展数以百计的服务器(水平扩展), 用于存储和处理数据. 它可以在很短的时间内存储、搜索和分析海量数据, 通常被作为复杂搜索场景下的核心引擎.</p><p><strong>由于Lucene提供的API操作起来非常繁琐, 需要编写大量的代码, Elasticsearch对Lucene进行了封装与优化, 并提供了REST风格的操作接口, 开箱即用, 很大程度上方便了开发人员的使用.</strong></p><ul><li>elasticSearch主要特点<ol><li>特点：全文检索，结构化检索，数据统计、分析，接近实时处理，分布式搜索(可部署数百台服务器)，处理PB级别的数据，搜索纠错，自动完成</li><li>使用场景：日志搜索，数据聚合，数据监控，报表统计分析</li><li>国内外使用者：维基百科，Stack Overflow，GitHub</li></ol></li></ul><h2 id="11-3-SpringBoot整合ElasticSearch"><a href="#11-3-SpringBoot整合ElasticSearch" class="headerlink" title="11.3-SpringBoot整合ElasticSearch"></a>11.3-SpringBoot整合ElasticSearch</h2><ol><li>添加依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--elasticsearch--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>配置文件</li></ol><pre class=" language-yml"><code class="language-yml">spring:  data:    elasticsearch:      cluster-name: esCluster      cluster-nodes: 127.0.0.1:9300       #配置es节点信息，逗号分隔，如果没有指定，则启动ClientNode（9200端口是http查询使用的。9300集群使用。这里使用9300.）</code></pre><ol start="3"><li>创建实体类bean</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"testgoods"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"goods"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGoodsBo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Field(type = FieldType.Text)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> stock<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> Long version<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>@Document注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Persistent</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>    String <span class="token function">indexName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引库的名称，个人建议以项目的名称命名</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型，个人建议以实体的名称命名</span>    <span class="token keyword">short</span> <span class="token function">shards</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认分区数</span>    <span class="token keyword">short</span> <span class="token function">replicas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个分区默认的备份数</span>    String <span class="token function">refreshInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"1s"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新间隔</span>    String <span class="token function">indexStoreType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引文件存储类型</span><span class="token punctuation">}</span></code></pre><p><code>@Document</code>作用于类上，经测试代码初始化时若es中没有对应的索引，则会在es中创建一个。</p></li><li><p>@Field注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Field</span> <span class="token punctuation">{</span>    FieldType <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> FieldType<span class="token punctuation">.</span>Auto<span class="token punctuation">;</span>#自动检测属性的类型    FieldIndex <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> FieldIndex<span class="token punctuation">.</span>analyzed<span class="token punctuation">;</span>#默认情况下分词    DateFormat <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> DateFormat<span class="token punctuation">.</span>none<span class="token punctuation">;</span>    String <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>#默认情况下不存储原文    String <span class="token function">searchAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>#指定字段搜索时使用的分词器    String <span class="token function">indexAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>#指定字段建立索引时指定的分词器    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">ignoreFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#如果某个字段需要被忽略    <span class="token keyword">boolean</span> <span class="token function">includeInParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>@Field</code>作用于属性上，经测试该注解的属性有时会与现有的属性冲突，造成异常，错误信息如下，所以建议es中映射已建立的情况下，不要使用该注解。</p></li><li><p><code>@Id</code>和<code>@Version</code>分别用来绑定es中的<code>_id</code>和<code>_version</code>字段。</p></li></ul><ol start="4"><li>创建Repository(接口继承ElasticSearchRepository)</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsRepository</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token operator">&lt;</span>TestGoodsBo<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token punctuation">,</span> PagingAndSortingRepository<span class="token operator">&lt;</span>TestGoodsBo<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameAndPrice</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Long price<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameOrPrice</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Long price<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameNot</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByPriceBetween</span><span class="token punctuation">(</span><span class="token keyword">long</span> price<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByNameLike</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"{\"bool\" : {\"must\" : {\"term\" : {\"message\" : \"?0\"}}}}"</span><span class="token punctuation">)</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">findByMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>es的操作主要通过自定义的Repository对象完成，该对象可以通过继承模板接口<code>ElasticsearchRepository</code>实现，该模板提供了<code>save</code>、<code>findById</code>、<code>findAll</code>和<code>search</code>等通用方法的实现，同时还支持通过规定的名称格式自定义操作方法.</p><ol start="5"><li>使用</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> GoodsRepository repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ElasticsearchTemplate elasticsearchTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TestGoodsBo <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> TestGoodsBo bo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>bo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TestGoodsBo <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> result <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/find"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Pageable page<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        //通过ElasticsearchTemplate实现</span><span class="token comment" spellcheck="true">//        QueryBuilder queryBuilder = QueryBuilders.matchQuery("name", name);</span><span class="token comment" spellcheck="true">//        SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder).withHighlightFields().build();</span><span class="token comment" spellcheck="true">//        Page&lt;TestGoodsBo> sampleEntities = elasticsearchTemplate.queryForPage(searchQuery, TestGoodsBo.class);</span><span class="token comment" spellcheck="true">//        //Pageable对象的手动实现</span><span class="token comment" spellcheck="true">//        Sort sort = new Sort(Sort.Direction.ASC,"name");</span><span class="token comment" spellcheck="true">//        Pageable page = PageRequest.of(0,10,sort);</span>        Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> sampleEntities <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sampleEntities<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>Pageable对象</li></ol><p>该对象可以帮助我们完成分页和排序操作，有手动和自动两种方式实现：</p><ul><li><p>手动</p><pre class=" language-java"><code class="language-java"> Sort sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>ASC<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Pageable page <span class="token operator">=</span> PageRequest<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>自动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>TestGoodsBo<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span>Pageable pageable<span class="token punctuation">)</span></code></pre><p>自动方式可以在request传参的同时就根据传入的参数来组装<code>Pageable</code>对象，同时还能使用<code>@PageableDefault</code>注解设定默认值，因此更推荐使用。</p><p>Spring支持的request参数如下：</p><ul><li><p>page，第几页，从0开始，默认为第0页</p></li><li><p>size，每一页的大小，默认为20</p></li><li><p>sort，排序相关的信息，例如sort=firstname&amp;sort=lastname,desc表示在按firstname正序排列基础上按lastname倒序排列</p></li></ul></li></ul><h1 id="12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ"><a href="#12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ" class="headerlink" title="12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ"></a>12-消息队列介绍和SpringBoot整合RockketMQ、ActiveMQ</h1><h2 id="12-1-JMS介绍和使用场景及基础编程模型"><a href="#12-1-JMS介绍和使用场景及基础编程模型" class="headerlink" title="12.1-JMS介绍和使用场景及基础编程模型"></a>12.1-JMS介绍和使用场景及基础编程模型</h2><ol><li><p>什么是JMS？</p><p>Java消息服务（Java Message Service),Java平台中关于面向消息中间件的接口</p></li><li><p>JMS是一种与厂商无关的 API，用来访问消息收发系统消息，它类似于JDBC(Java Database Connectivity)。这里，JDBC 是可以用来访问许多不同关系数据库的 API</p></li><li><p>使用场景</p><ul><li>跨平台 </li><li>多语言 </li><li>多项目</li><li>解耦</li><li>分布式事务</li><li>流量控制</li><li>最终一致性</li><li>RPC调用</li></ul></li><li><p>概念</p><ul><li>JMS提供者：Apache ActiveMQ、RabbitMQ、Kafka、Notify、MetaQ、RocketMQ</li><li>JMS生产者(Message Producer)</li><li>JMS消费者(Message Consumer)</li><li>JMS消息</li><li>JMS队列</li><li>JMS主题</li></ul><p>JMS消息通常有两种类型：<code>点对点</code>、<code>发布/订阅</code></p></li><li><p>编程模型</p><p>MQ中需要用的一些类</p><pre><code>ConnectionFactory ：连接工厂，JMS 用它创建连接Connection ：JMS 客户端到JMS Provider 的连接Session： 一个发送或接收消息的线程Destination ：消息的目的地;消息发送给谁MessageConsumer / MessageProducer： 消息接收者，消费者</code></pre></li></ol><h2 id="12-2-ActiveMQ消息队列基础介绍"><a href="#12-2-ActiveMQ消息队列基础介绍" class="headerlink" title="12.2-ActiveMQ消息队列基础介绍"></a>12.2-ActiveMQ消息队列基础介绍</h2><p>ActiveMQ是一种开源的基于JMS规范的一种消息中间件的实现，ActiveMQ的设计目标是提供标准的，面向消息的，能够跨越多语言和多系统的应用集成消息通信中间件。</p><p><strong>特点：</strong></p><ul><li>支持来自Java，C，C ++，C＃，Ruby，Perl，Python，PHP的各种跨语言客户端和协议</li><li>支持许多高级功能，如消息组，虚拟目标，通配符和复合目标</li><li>完全支持JMS 1.1和J2EE 1.4，支持瞬态，持久，事务和XA消息</li><li>Spring支持，ActiveMQ可以轻松嵌入到Spring应用程序中，并使用Spring的XML配置机制进行配置</li><li>支持在流行的J2EE服务器（如TomEE，Geronimo，JBoss，GlassFish和WebLogic）中进行测试</li><li>使用JDBC和高性能日志支持非常快速的持久化</li></ul><h2 id="12-3-SpringBoot2整合ActiveMQ实战之点对点消息"><a href="#12-3-SpringBoot2整合ActiveMQ实战之点对点消息" class="headerlink" title="12.3-SpringBoot2整合ActiveMQ实战之点对点消息"></a>12.3-SpringBoot2整合ActiveMQ实战之点对点消息</h2><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 整合消息队列ActiveMQ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 如果配置线程池则加入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#整合jms测试，安装在别的机器，防火墙和端口号记得开放</span><span class="token attr-name">spring.activemq.broker-url</span><span class="token punctuation">=</span><span class="token attr-value">tcp://127.0.0.1:61616</span><span class="token comment" spellcheck="true">#集群配置</span><span class="token comment" spellcheck="true">#spring.activemq.broker-url=failover:(tcp://localhost:61616,tcp://localhost:61617)</span><span class="token attr-name">spring.activemq.user</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.activemq.password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token comment" spellcheck="true">#下列配置要增加依赖</span><span class="token attr-name">spring.activemq.pool.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.activemq.pool.max-connections</span><span class="token punctuation">=</span><span class="token attr-value">100</span></code></pre></li><li><p>启动类添加@EnableJms注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableJms</span> <span class="token comment" spellcheck="true">//启动消息队列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProductApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>QueueConfig定义消息队列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span>ActiveMQQueue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueConfig</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//定义存放消息的队列</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"ActiveMQQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ProviderController测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入存放消息的队列，用于下列方法一</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注入springboot封装的工具类</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法一：添加消息到消息队列</span>        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法二：这种方式不需要手动创建queue，系统会自行创建名为test的队列</span>        <span class="token comment" spellcheck="true">//jmsMessagingTemplate.convertAndSend("test", message);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者应用</p><p>application.properties 和 ConsumerApplication 同 provider类似，如下为不同的ActiveConsumer：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用JmsListener配置消费者监听的队列，其中message是接收到的消息</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">"ActiveMQQueue"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// SendTo 会将此方法返回的数据, 写入到 OutQueue 中去.</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"SQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">handleMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功接受message"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"成功接受message"</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="7"><li>模拟请求 <code>localhost:8080/send?msg=123</code></li></ol><h2 id="12-4-SpringBoot整合ActiveMQ实战之发布订阅模式"><a href="#12-4-SpringBoot整合ActiveMQ实战之发布订阅模式" class="headerlink" title="12.4-SpringBoot整合ActiveMQ实战之发布订阅模式"></a>12.4-SpringBoot整合ActiveMQ实战之发布订阅模式</h2><ol><li><p>需要加入配置文件，支持发布订阅模型，默认只支持点对点</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#default point to point</span><span class="token comment" spellcheck="true">#默认消费者并不会消费订阅发布类型的消息，这是由于springboot默认采用的是p2p模式进行消息的监听</span><span class="token attr-name">spring.jms.pub-sub-domain</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre></li><li><p>新建JMS配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmsConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String TOPIC <span class="token operator">=</span> <span class="token string">"springboot.topic.test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE <span class="token operator">=</span> <span class="token string">"springboot.queue.test"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Topic <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span>QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// topic模式的ListenerContainer</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsListenerContainerFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">jmsListenerContainerTopic</span><span class="token punctuation">(</span>ConnectionFactory activeMQConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultJmsListenerContainerFactory bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setPubSubDomain</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>activeMQConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// queue模式的ListenerContainer</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsListenerContainerFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">jmsListenerContainerQueue</span><span class="token punctuation">(</span>ConnectionFactory activeMQConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultJmsListenerContainerFactory bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>activeMQConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"producer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送消息，destination是发送到的队列，message是待发送的消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Destination destination<span class="token punctuation">,</span> <span class="token keyword">final</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        jmsTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JMSConsumer3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> JmsConfig<span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTopicMessage1</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到topic消息：{}"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> JmsConfig<span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTopicMessage2</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到topic消息：{}"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> JmsConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"jmsListenerContainerQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onQueueMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收到queue消息：{}"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Topic topic<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            jmsProducer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"queue,world!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            jmsProducer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"topic,world!"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h2 id="12-5-RocketMQ消息队列介绍"><a href="#12-5-RocketMQ消息队列介绍" class="headerlink" title="12.5-RocketMQ消息队列介绍"></a>12.5-RocketMQ消息队列介绍</h2><p>RocketMQ 是一款分布式、队列模型的消息中间件</p><p><strong>特点：</strong></p><ul><li>在高压下1毫秒内响应延迟超过99.6％。</li><li>适合金融类业务，高可用性跟踪和审计功能。</li><li>支持发布订阅模型，和点对点</li><li>支持拉pull和推push两种消息模式</li><li>单一队列百万消息</li><li>支持单master节点，多master节点，多master多slave节点</li></ul><p><strong>概念：</strong></p><ul><li>Producer:消息生产者</li><li>Producer Group:消息生产者组，发送同类消息的一个消息生产组</li><li>Consumer:消费者</li><li>Consumer Group:消费同个消息的多个实例</li><li>Tag:标签，子主题（二级分类）,用于区分同一个主题下的不同业务的消息</li><li>Topic:主题</li><li>Message：消息</li><li>Broker：MQ程序，接收生产的消息，提供给消费者消费的程序</li><li>Name Server：给生产和消费者提供路由信息，提供轻量级的服务发现和路由    </li></ul><p><strong>官网地址</strong>：<a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a></p><h2 id="12-6-Springboot2整合RocketMQ4-x实战"><a href="#12-6-Springboot2整合RocketMQ4-x实战" class="headerlink" title="12.6-Springboot2整合RocketMQ4.x实战"></a>12.6-Springboot2整合RocketMQ4.x实战</h2><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件</p><pre class=" language-yml"><code class="language-yml">rocketmq:  # 生产者配置  producer:    isOnOff: on    # 发送同一类消息的设置为同一个group，保证唯一    groupName: FeePlatGroup    # 服务地址    namesrvAddr: 10.1.1.207:9876    # 消息最大长度 默认1024*4(4M)    maxMessageSize: 4096    # 发送消息超时时间,默认3000    sendMsgTimeout: 3000    # 发送消息失败重试次数，默认2    retryTimesWhenSendFailed: 2  # 消费者配置  consumer:    isOnOff: on    # 官方建议：确保同一组中的每个消费者订阅相同的主题。    groupName: FeePlatGroup    # 服务地址    namesrvAddr: 10.1.1.207:9876    # 接收该 Topic 下所有 Tag    topics: FangPlatTopic~*;    consumeThreadMin: 20    consumeThreadMax: 64    # 设置一次消费消息的条数，默认为1条    consumeMessageBatchMaxSize: 1# 配置 Group  Topic  Tagfang-plat:  fang-plat-group: FangPlatGroup  fang-plat-topic: FangPlatTopic  fang-account-tag: FangAccountTag</code></pre></li><li><p>生产者配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//RocketMQ生产者配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.groupName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String groupName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.namesrvAddr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String namesrvAddr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.maxMessageSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer maxMessageSize <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.sendMsgTimeout}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer sendMsgTimeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.producer.retryTimesWhenSendFailed}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer retryTimesWhenSendFailed<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultMQProducer <span class="token function">getRocketMQProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultMQProducer producer<span class="token punctuation">;</span>        producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果需要同一个jvm中不同的producer往不同的mq集群发送消息，需要设置不同的instanceName</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxMessageSize<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">setMaxMessageSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxMessageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendMsgTimeout<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">setSendMsgTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendMsgTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果发送消息失败，设置重试次数，默认为2次</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>retryTimesWhenSendFailed<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>retryTimesWhenSendFailed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> producer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//消费者配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.namesrvAddr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String namesrvAddr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.groupName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String groupName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.consumeThreadMin}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> consumeThreadMin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.consumeThreadMax}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> consumeThreadMax<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.topics}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String topics<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rocketmq.consumer.consumeMessageBatchMaxSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> consumeMessageBatchMaxSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RocketMsgListener msgListener<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultMQPushConsumer <span class="token function">getRocketMQConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeThreadMin</span><span class="token punctuation">(</span>consumeThreadMin<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeThreadMax</span><span class="token punctuation">(</span>consumeThreadMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span>msgListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_LAST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeMessageBatchMaxSize</span><span class="token punctuation">(</span>consumeMessageBatchMaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> topicTagsArr <span class="token operator">=</span> topics<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String topicTags <span class="token operator">:</span> topicTagsArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> topicTag <span class="token operator">=</span> topicTags<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topicTag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>topicTag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> consumer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者监听配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//消费监听配置</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMsgListener</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListenerConcurrently</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RocketMsgListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ParamConfigService paramConfigService <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> list<span class="token punctuation">,</span> ConsumeConcurrentlyContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MessageExt messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受到的消息为："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> reConsume <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消息已经重试了3次，如果不需要再次消费，则返回成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>reConsume <span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>paramConfigService<span class="token punctuation">.</span>feePlatTopic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String tags <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"FeeAccountTag"</span><span class="token operator">:</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开户 tag == >>"</span><span class="token operator">+</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span> <span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"未匹配到Tag == >>"</span><span class="token operator">+</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 消息消费成功</span>        <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置参数绑定</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamConfigService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fang-plat.fang-plat-group}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String fangPlatGroup <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fang-plat.fang-plat-topic}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String fangPlatTopic <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fang-plat.fang-account-tag}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String fangAccountTag <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeePlatMqServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FeePlatMqService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DefaultMQProducer defaultMQProducer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ParamConfigService paramConfigService <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SendResult <span class="token function">openAccountMsg</span><span class="token punctuation">(</span>String msgInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可以不使用Config中的Group</span>        defaultMQProducer<span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span>paramConfigService<span class="token punctuation">.</span>fangPlatGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>        SendResult sendResult <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Message sendMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>paramConfigService<span class="token punctuation">.</span>fangPlatTopic<span class="token punctuation">,</span>                                          paramConfigService<span class="token punctuation">.</span>fangAccountTag<span class="token punctuation">,</span>                                         <span class="token string">"fang_open_account_key"</span><span class="token punctuation">,</span> msgInfo<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sendResult <span class="token operator">=</span> defaultMQProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sendResult <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="13-SpringBoot多环境配置"><a href="#13-SpringBoot多环境配置" class="headerlink" title="13-SpringBoot多环境配置"></a>13-SpringBoot多环境配置</h1><h2 id="13-1-SpringBoot多环境配置介绍"><a href="#13-1-SpringBoot多环境配置介绍" class="headerlink" title="13.1-SpringBoot多环境配置介绍"></a>13.1-SpringBoot多环境配置介绍</h2><ol><li>不同环境使用不同配置<br>例如数据库配置，在开发的时候，我们一般用开发数据库，而在生产环境的时候，我们是用正式的数据</li><li>配置文件存放路径<br><code>classpath</code>根目录的“/config”包下<br><code>classpath</code>的根目录下</li><li>spring boot允许通过命名约定按照一定的格式<code>(application-{profile}.properties)</code>来定义多个配置文件</li><li><code>spring.profiles.active=dev</code>来指定加载哪个环境的配置文件</li></ol><h1 id="14-SpringBoot2-0响应式编程（Webflux）"><a href="#14-SpringBoot2-0响应式编程（Webflux）" class="headerlink" title="14-SpringBoot2.0响应式编程（Webflux）"></a>14-SpringBoot2.0响应式编程（Webflux）</h1><h2 id="14-1-什么是reactive响应式编程（反应式编程）？"><a href="#14-1-什么是reactive响应式编程（反应式编程）？" class="headerlink" title="14.1-什么是reactive响应式编程（反应式编程）？"></a>14.1-什么是reactive响应式编程（反应式编程）？</h2><p>是一种异步编程范式，它关注数据流和变化的传播。这意味着可以通过使用编程语言轻松地表示静态（例如数组）和动态（例如事件发射器）数据流。</p><p>响应式编程是一种流行的编程方法，编写代码是基于对变化的反应。它的灵感来自于我们的日常生活，也即我们如何采取行动以及与他人沟通。</p><p>我们在执行日常生活活动时，我们会尽可能多任务，但大脑无法处理多任务，不管我们如何努力去做。我们人类实现多任务的唯一办法是在时间线上在任务之间切换。事实上，我们总是切换任务，即使我们没有意识到它。</p><p>例如，要执行一个任务：在星巴克喝一杯咖啡饮料，你需要发出一个命令，等待它准备好，然后接受你的饮料。当你在等待的时候，你很可能会找到别的事情做。这是最简单的执行任务的反应(响应)形式，你会在你等待来自咖啡师的“响应”时做别的事情，当你的咖啡已经准备好后，会叫你的名字时。</p><p>响应编程能够简化编程，它依赖于事件，代码运行的顺序不是代码行的顺序，而是和一个以上的事件有关，这些事件发生是以随着时间的推移的序列。我们把这一系列事件称为“流”。</p><p>何为事件？例如，你知道某个名人总是在发送有趣微博，每次他推发一条微博我们可以称之为一个“事件”。如果你看看这位名人微博系列，你会发现其实是一个随着时间的推移（一系列的事件）发生的一序列的“事件”，响应式编程就是因为我们得“响应”这些事件而得以命名。</p><ul><li>依赖于事件，事件驱动(Event-driven)</li><li>一系列事件称为“流”</li><li>异步</li><li>非阻塞</li><li>观察者模式</li></ul><p><strong>例子</strong></p><p><code>int A = B + C;</code></p><p>A被赋值为B和C的值。这时，如果我们改变B的值，A的值并不会随之改变。而如果我们运用一种机制，当B或者C的值发现变化的时候，A的值也随之改变，这样就实现了”响应式“。</p><h2 id="14-2-SpringBoot2-x响应式编程webflux介绍"><a href="#14-2-SpringBoot2-x响应式编程webflux介绍" class="headerlink" title="14.2-SpringBoot2.x响应式编程webflux介绍"></a>14.2-SpringBoot2.x响应式编程webflux介绍</h2><ol><li><p>Spring WebFlux是Spring Framework 5.0中引入的新的反应式Web框架，与Spring MVC不同，它不需要Servlet API，完全异步和非阻塞，并 通过Reactor项目实现Reactive Streams规范。</p><ul><li><p>传统的Servlet</p><p>servlet由servlet container进行生命周期管理。container启动时构造servlet对象并调用servlet init()进行初始化；container关闭时调用servlet destory()销毁servlet；container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</p><p><img src="/2019/12/25/springboot-bi-ji-er/servlet.png" alt="Servlet结构"></p></li></ul></li></ol><pre><code> **缺点：** servlet是一个简单的网络编程模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型就较为吃力。 **例如：** spring webmvc是基于servlet之上的一个路由模型，即spring实现了处理所有request请求的一个servlet（DispatcherServlet），并由该servlet进行路由。所以spring webmvc无法摆脱servlet模型的弊端。</code></pre><ul><li><p>Webflux</p><p>Webflux模式替换了旧的Servlet线程模型。用少量的线程处理request和response io操作，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。</p><p><img src="/2019/12/25/springboot-bi-ji-er/webflux.png" alt="webflux"></p><p>Spring WebFlux是Spring Framework 5.0中引入的新的反应式Web框架，与Spring MVC不同，它不需要Servlet API，完全异步和非阻塞，并 通过Reactor项目实现Reactive Streams规范。</p><p><img src="/2019/12/25/springboot-bi-ji-er/mvc%E5%92%8Cwebflux.png" alt="mvc和webflux"></p><p><strong>响应式与非响应式区别：</strong></p><p><img src="/2019/12/25/springboot-bi-ji-er/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%92%8C%E9%9D%9E%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8C%BA%E5%88%AB.png" alt="SpringBoot中响应式和非响应式"></p></li></ul><ol start="2"><li><p>Flux和Mono</p><ul><li><p>简单业务而言：和其他普通对象差别不大，复杂请求业务，就可以提升性能</p></li><li><p>通俗理解：</p><ul><li><p>Mono 表示的是包含 0 或者 1 个元素的异步序列</p><p><code>mono-&gt;单一对象 User  如： redis-&gt;用户ID-&gt;唯一的用户Mono&lt;User&gt;</code> </p></li><li><p>Flux 表示的是包含 0 到 N 个元素的异步序列</p><p><code>flux-&gt;数组列表对象 List&lt;User&gt;  如： redis-&gt;男性用户-&gt;Flux&lt;User&gt;</code></p></li><li><p>Flux 和 Mono 之间可以进行转换</p></li></ul></li></ul></li><li><p>Spring WebFlux有两种风格：基于功能和基于注解的。基于注解非常接近Spring MVC模型</p><ul><li><p>基于注解的方式</p><p><strong>业务层Service：</strong>调用了ReactiveRedisTemplate对数据进行操作</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ReactiveService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ReactiveRedisTemplate reactiveRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_KEY <span class="token operator">=</span> <span class="token string">"entity:user"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryByUUID</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>USER_KEY<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">delete</span><span class="token punctuation">(</span>String uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Controller层：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ReactiveService reactiveService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询所有</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/find/all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询单个</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query/{uuid}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span> String uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">queryByUUID</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加用户</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新用户</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{uuid}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span> String uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reactiveService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>和使用mvc没有任何的区别，唯一的区别在于返回的对象是<code>Mono</code>和<code>Flux</code>，简单点理解，返回单个数据就是<code>Mono</code>，多个就使用<code>Flux</code>。</p><p>启动项目可以看到实际上使用的是<code>Netty</code>服务器</p></li><li><p>基于功能（函数式）</p><p>处理请求的类，实现具体的业务逻辑，接口 <code>ServerRequest</code> 表示的是一个 HTTP 请求体。通过ServerRequest 对象可获取到请求的相关信息，如请求路径、查询参数和请求内容等。方法 的返回值是一个 Mono<T extends serverresponse>对象。接口 <code>ServerResponse</code> 用来表示 HTTP 响应。ServerResponse 中包含了很多静态方法来创建不同 HTTP 状态码的响应对象。</T></p><p>涉及几个比较重要的类如：<code>RouterFunction、HandlerFunction和DispatcherHandler</code></p><p><code>RouterFunction</code>就是一个路由函数，可以理解为将请求和具体的<code>HandlerFunction</code>做一个映射；</p><ol><li><p>先创建<code>RouterFunction</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFunctionRouter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserHandler userHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"userRouter"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RouterFunction <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RouterFunction<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> routerFunction <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/find/all"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>findAll<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/query/{uuid}"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>queryByName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span>userHandler<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span>userHandler<span class="token operator">:</span><span class="token operator">:</span>update<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/user/delete/{uuid}"</span><span class="token punctuation">,</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>delete<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routerFunction<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将具体的请求路径和具体的handler做了映射，这样会根据用户具体的请求路径找具体的handler，其实就是具体的方法。和mvc的@RequestMapping功能上是一样的。但是这个需要注意的是返回的结果是ServerResponse，请求是ServerRequest，这个也可以和mvc的HttpServletRequest、HttpServletResponse对应起来，都是封装用户的请求信息，其实和mvc都还是能对应起来的，只是编程方式不太一样。</p></li><li><p>然后创建<code>HandlerFunction</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Mono <span class="token function">findAll</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Flux<span class="token operator">&lt;</span>User<span class="token operator">></span> flux <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>flux<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询单个</span>    <span class="token keyword">public</span> Mono <span class="token function">queryByUUID</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">queryByUUID</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加用户</span>    <span class="token keyword">public</span> Mono <span class="token function">add</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将请求体转成指定Momo对象</span>        Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> mono <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String uuid <span class="token operator">=</span> <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法2</span>        Mono<span class="token operator">&lt;</span>Object<span class="token operator">></span> safeUser <span class="token operator">=</span> mono<span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> u<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        User user = createUser(serverRequest);</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>safeUser<span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//方法1</span><span class="token comment" spellcheck="true">//        Mono&lt;User> userMono = mono.doOnNext(u -> u.setUuid(uuid)).doOnSuccess(user -> userRepository.saveNoReturn(user));</span><span class="token comment" spellcheck="true">//        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON_UTF8).body(userMono,User.class);</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> User <span class="token function">createUser</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> userId <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> userName <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> age <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> sex <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> uuid <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span><span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新用户</span>    <span class="token keyword">public</span> Mono <span class="token function">update</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> mono <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token function">createUser</span><span class="token punctuation">(</span>serverRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除用户</span>    <span class="token keyword">public</span> Mono <span class="token function">delete</span><span class="token punctuation">(</span>ServerRequest serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">generateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ul></li><li><p>Spring WebFlux应用程序不严格依赖于Servlet API，因此它们不能作为war文件部署，也不能使用src/main/webapp目录</p></li><li><p>可以整合多个模板引擎</p><pre><code>除了REST Web服务外，您还可以使用Spring WebFlux提供动态HTML内容。Spring WebFlux支持各种模板技术，包括Thymeleaf，FreeMarker。</code></pre></li></ol><h2 id="14-3-SpringBoot2-x-webflux实战"><a href="#14-3-SpringBoot2-x-webflux实战" class="headerlink" title="14.3-SpringBoot2.x webflux实战"></a>14.3-SpringBoot2.x webflux实战</h2><ol><li><p>WebFlux中，请求和响应不再是WebMVC中的ServletRequest和ServletResponse，而是ServerRequest和ServerResponse</p></li><li><p>加入依赖，如果同时存在spring-boot-starter-web，则会优先用spring-boot-starter-web</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写测试类UserController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/v1/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"hello webflux!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>启动方式默认是Netty,8080端口</p><p>测试:localhost:8080/api/v1/user/test</p><p><img src="/2019/12/25/springboot-bi-ji-er/webflux%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="webflux测试结果"></p></li></ol><h2 id="14-4-WebFlux客户端WebClient"><a href="#14-4-WebFlux客户端WebClient" class="headerlink" title="14.4-WebFlux客户端WebClient"></a>14.4-WebFlux客户端WebClient</h2><p>WebClient是一个响应式客户端，它提供了RestTemplate的替代方法。它公开了一个功能齐全、流畅的API，并依赖于非阻塞I / O，使其能够比RestTemplate更高效地支持高并发性。WebClient非常适合流式的传输方案，并且依赖于较低级别的HTTP客户端库来执行请求，是可插拔的。</p><p><strong>与RestTemplate相比，WebClient是：</strong></p><ul><li>非阻塞，Reactive的，并支持更高的并发性和更少的硬件资源。</li><li>提供利用Java 8 lambdas的函数API。</li><li>支持同步和异步方案。</li><li>支持从服务器向上或向下流式传输。</li></ul><p>RestTemplate不适合在非阻塞应用程序中使用，因此Spring WebFlux应用程序应始终使用WebClient。在大多数高并发场景中，WebClient也应该是Spring MVC中的首选，并且用于编写一系列远程，相互依赖的调用。</p><p>Reactive方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> WebClient client <span class="token operator">=</span> WebClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="15-SpringBoot2-0服务器端主动推送SSE技术"><a href="#15-SpringBoot2-0服务器端主动推送SSE技术" class="headerlink" title="15-SpringBoot2.0服务器端主动推送SSE技术"></a>15-SpringBoot2.0服务器端主动推送SSE技术</h1><h2 id="15-1-服务端推送常用技术介绍"><a href="#15-1-服务端推送常用技术介绍" class="headerlink" title="15.1-服务端推送常用技术介绍"></a>15.1-服务端推送常用技术介绍</h2><ol><li><p>客户端轮询:ajax定时拉取</p><p>ajax长时间和服务端保持通讯太占内存</p></li><li><p>服务端主动推送:WebSocket</p><pre><code>全双工的，本质上是一个额外的tcp连接，建立和关闭时握手使用http协议，其他数据传输不使用http协议更加复杂一些，适用于需要进行复杂双向数据通讯的场景</code></pre><p>​    websocket可以进行服务端和前端双向通讯,写法较为复杂</p></li><li><p>服务端主动推送:SSE (Server Send Event)</p><pre><code>html5新标准，用来从服务端实时推送数据到浏览器端，直接建立在当前http连接上，本质上是保持一个http长连接，轻量协议简单的服务器数据推送的场景，使用服务器推送事件    学习资料：http://www.w3school.com.cn/html5/html_5_serversentevents.asp</code></pre></li></ol><h2 id="15-2-SpringBoot2-x服务端主动推送SSE"><a href="#15-2-SpringBoot2-x服务端主动推送SSE" class="headerlink" title="15.2-SpringBoot2.x服务端主动推送SSE"></a>15.2-SpringBoot2.x服务端主动推送SSE</h2><ol><li><p>后端代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SSEController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//produces = "text/event-stream;charset=UTF-8"一定要带上</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get_data"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/event-stream;charset=UTF-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">double</span> moeny <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>moeny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          DecimalFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">".00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String price <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>moeny<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//！！！注意，EventSource返回的参数必须以data:开头，"\n\n"结尾，不然onmessage方法无法执行。</span>          <span class="token keyword">return</span> <span class="token string">"data:猪肉价格行情:"</span> <span class="token operator">+</span> price <span class="token operator">+</span><span class="token string">"元"</span><span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>前段代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//需要判断浏览器支不支持，可以去w3c进行查看</span><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">'/get_data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="16-SpringBoot2-x监控Actuator"><a href="#16-SpringBoot2-x监控Actuator" class="headerlink" title="16-SpringBoot2.x监控Actuator"></a>16-SpringBoot2.x监控Actuator</h1><p><code>Spring Boot Actuator</code>是<code>spring boot</code>项目一个监控模块，提供了很多原生的端点，包含了对应用系统的自省和监控的集成功能，可以查看应用配置的详细信息，比如<strong>应用程序上下文里全部的Bean</strong>、<strong>健康指标</strong>、<strong>环境变量</strong>及<strong>各类重要度量指标</strong>等等，这些都是使用可<code>HTTP</code>进行请求访问。通过这些监控信息，我们就能随时了解应用的运行情况了。</p><p>Actuator 是 Spring Boot 提供的对应用系统的自省和监控功能。通过 Actuator，可以使用数据化的指标去度量应用的运行情况，比如查看服务器的磁盘、内存、CPU等信息，系统的线程、gc、运行状态等等。</p><p>Actuator 通常通过使用 HTTP 和 JMX 来管理和监控应用，大多数情况使用 HTTP 的方式。</p><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /demo<span class="token comment" spellcheck="true"># actuator 监控配置</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#actuator端口 如果不配置做默认使用上面8080端口</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#默认值访问health,info端点  用*可以包含全部端点</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>      <span class="token comment" spellcheck="true">#修改访问路径 2.0之前默认是/; 2.0默认是/actuator可以通过这个属性值修改</span>      <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /actuator</code></pre><p>配置完成启动项目后就可以通过postman或者直接在预览器输入路径等方式来查看应用的运行状态了。<br> 当项目启动时，访问<code>[http://127.0.0.1:9090/actuator]</code>地址</p><h5 id="注意：如果没有配置-actuator端口-采用默认访问地址：http-127-0-0-1-8080-demo-actuator"><a href="#注意：如果没有配置-actuator端口-采用默认访问地址：http-127-0-0-1-8080-demo-actuator" class="headerlink" title="注意：如果没有配置 actuator端口,采用默认访问地址：http://127.0.0.1:8080/demo/actuator"></a><code>注意：如果没有配置 actuator端口,采用默认访问地址：http://127.0.0.1:8080/demo/actuator</code></h5><p>如果看到类似下面的内容，说明actuator已经生效了</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"_links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"self"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"auditevents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/auditevents"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"beans"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/beans"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"caches-cache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/caches/{cache}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"caches"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/caches"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"health"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/health"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"health-component"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/health/{component}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"health-component-instance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/health/{component}/{instance}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"conditions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/conditions"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"configprops"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/configprops"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/env"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"env-toMatch"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/env/{toMatch}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/info"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"loggers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/loggers"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"loggers-name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/loggers/{name}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"heapdump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/heapdump"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"threaddump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/threaddump"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"metrics-requiredMetricName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/metrics/{requiredMetricName}"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"metrics"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/metrics"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"scheduledtasks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/scheduledtasks"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"httptrace"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/httptrace"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:9090/actuator/mappings"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>建议</p><ul><li><p>只能访问几个url</p><ul><li><p>访问的url在SpringBoot2.0版本需要加上actuator</p></li><li><p>需要在配置文件中加入下列配置<br><code>management.endpoints.web.exposure.include=*</code></p></li><li><p>官网说明：<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security-actuator" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security-actuator</a></p></li></ul><p><strong>原因：</strong><br>出于安全考虑，除/ health和/ info之外的所有执行器默认都是禁用的。  <code>management.endpoints.web.exposure.include</code>属性可用于启用执行器</p></li><li><p>建议<br>在设置management.endpoints.web.exposure.include之前，请确保暴露的执行器不包含敏感信息和/<br>或通过将其放置在防火墙进行控制，不对外进行使用</p><p>禁用的端点将从应用程序上下文中完全删除。如果您只想更改端点所暴露的技术，请改用 include和exclude属性<br><strong>例子：</strong></p><pre><code>开启全部：`management.endpoints.web.exposure.include=*`开启某个：`management.endpoints.web.exposure.include=metrics`关闭某个：`management.endpoints.web.exposure.exclude=metrics`</code></pre><p>或者用springadmin进行管理</p><pre><code>相关资料：https://www.cnblogs.com/ityouknow/p/8440455.html</code></pre><p>或者用自己编写脚本监控</p><pre><code>CPU、内存、磁盘、nginx的http响应状态码200,404,5xx </code></pre></li><li><p>介绍常用的几个</p><pre><code>`/health`     查看应用健康指标`/actuator/metrics`    查看应用基本指标列表`/actuator/metrics/{name}`        通过上述列表，查看具体 查看具体指标`/actuator/env`        显示来自Spring的 ConfigurableEnvironment的属性    </code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记1</title>
      <link href="/2019/12/25/springboot-bi-ji-yi/"/>
      <url>/2019/12/25/springboot-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring-Boot概述"><a href="#1、Spring-Boot概述" class="headerlink" title="1、Spring Boot概述"></a>1、Spring Boot概述</h1><h2 id="1-1-Spring-Boot简介"><a href="#1-1-Spring-Boot简介" class="headerlink" title="1.1-Spring Boot简介"></a>1.1-Spring Boot简介</h2><ul><li>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程，J2EE开发的一站式解决方案。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</li><li>我们在使用Spring Boot时只需要配置相应的Spring Boot就可以用所有的Spring组件，简单的说，spring boot就是整合了很多优秀的框架，不用我们自己手动的去写一堆xml配置然后进行配置。从本质上来说，Spring Boot就是Spring，它做了那些没有它你也会去做的Spring Bean配置。</li></ul><h2 id="1-2-Spring-Boot特点"><a href="#1-2-Spring-Boot特点" class="headerlink" title="1.2-Spring Boot特点"></a>1.2-Spring Boot特点</h2><ol><li>为基于Spring的开发提供更快的入门体验</li><li>创建可以独立运行的Spring应用</li><li>直接嵌入Servlet容器Tomcat或Jetty服务器,不需要打包成WAR文件</li><li>提供推荐的基础POM文件来简化Apache Maven配置</li><li>尽可能的根据项目依赖来自动配置Spring框架</li><li>大量的自动配置，简化开发，也可以修改默认值</li><li>准生产环境的运行时应用监控，提供可以直接在生产环境中使用的功能,如性能指标,应用信息和应用健康检查</li><li>开箱即用,没有代码生成,也无需配置XML文件.同时可以修改默认值来特定需求</li><li>与云计算天然集成</li></ol><h2 id="1-3-单体应用与微服务"><a href="#1-3-单体应用与微服务" class="headerlink" title="1.3-单体应用与微服务"></a>1.3-单体应用与微服务</h2><h3 id="1-3-1-单体应用"><a href="#1-3-1-单体应用" class="headerlink" title="1.3.1. 单体应用"></a>1.3.1. 单体应用</h3><p>单体应用是把所有的应用模块都写在一个应用中，导致项目越写越大，模块之间的耦合度也会越来越高。<br></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><ul><li>便于共享：单个归档文件包含所有功能，便于在团队之间以及不同的部署阶段之间共享。</li><li>易于测试：单体应用一旦部署，所有的服务或特性就都可以使用了，这简化了测试过程，因为没有额外的依赖，每项测试都可以在部署完成后立刻开始。</li><li>易于部署：只需将单个归档文件复制到单个目录下。</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>复杂性高：由于是单个归档文件，所以整个项目文件包含的模块非常多，导致模块的边界模糊、依赖关系不清晰、代码的质量参差不齐，混乱的堆在一起，使得整个项目非常复杂。以致每次修改代码，都非常小心，可能添加一个简单的功能，或者修改一个Bug都会带来隐藏的缺陷。</li><li>技术债务：随着时间的推移、需求的变更和技术人员的更替，会逐渐形成应用程序的技术债务，并且越积越多。</li><li>扩展能力受限：单体应用只能作为一个整体进行扩展，无法根据业务模块的需要进行伸缩。</li><li>阻碍技术创新：对于单体应用来说，技术是在开发之前经过慎重评估后选定的，每个团队成员都必须使用相同的开发语言、持久化存储及消息系统。</li></ul><h3 id="1-3-2-微服务"><a href="#1-3-2-微服务" class="headerlink" title="1.3.2. 微服务"></a>1.3.2. 微服务</h3><p>微服务是一种架构风格，用微服务可以将应用的模块单独部署，对不同的模块进行不同的管理操作，不同的模块生成小型服务，每个功能元素最后都可以成为一个可以独立替换、独立升级的功能单元，各个小型服务之间通过http进行通信。<br><br>微服务架构风格是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>易于开发和维护：一个微服务只会关注一个特定的业务功能，所以业务清晰、代码量较少。开发和维护单个微服务相对简单。</li><li>单个微服务应用启动较快。</li><li>局部修改容易部署：单体应用只要有修改，就得重新部署整个应用。微服务解决了这样的问题。一般来说，对某个微服务进行修改，只需要重新部署这个服务即可。</li><li>技术栈不受限制：在微服务架构中，可以结合项目业务及团队的特点，合理的选择技术栈。</li><li>按需伸缩：可根据需求，实现细粒度的扩展。</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>运维要求高：更多的服务意味着要投入更多的运维。</li><li>分布式固有的复杂性：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延迟、分布式事务等都会带来巨大的问题。</li><li>接口调整成本高：微服务之间通过接口进行通信。如果修改某一个微服务的API，可能所有用到这个接口的微服务都需要进行调整。</li></ul><h2 id="1-4-Spring-Boot与微服务"><a href="#1-4-Spring-Boot与微服务" class="headerlink" title="1.4 Spring Boot与微服务"></a>1.4 Spring Boot与微服务</h2><ol><li>Spring boot不是微服务技术，Spring Cloud才是微服务技术。</li><li>spring boot只是一个用于加速开发spring应用的基础框架，简化工作，开发单块应用很适合。</li><li>如果要直接基于spring boot做微服务，相当于需要自己开发很多微服务的基础设施，比如基于zookeeper来实现服务注册和发现。</li></ol><h1 id="2、Spring-Boot入门"><a href="#2、Spring-Boot入门" class="headerlink" title="2、Spring Boot入门"></a>2、Spring Boot入门</h1><h2 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1-环境准备"></a>2.1-环境准备</h2><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_221”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.6.3</p><p>–IntelliJIDEA2019：IntelliJ IDEA 2019.3.2 x64、STS</p><h2 id="2-2-Hello-World"><a href="#2-2-Hello-World" class="headerlink" title="2.2-Hello World"></a>2.2-Hello World</h2><p>功能：浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><ul><li>创建一个Maven工程（jar包）</li><li>导入spring boot相关的依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li>编写一个启动类程序：用来启动Spring Boot应用</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>编写相关的Service和Controller</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>运行HelloWorld启动类进行测试</li><li>简化部署</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>使用这个插件将应用打成jar包，直接使用java -jar的命令进行执行；\</p><h2 id="2-3-Hello-World探究"><a href="#2-3-Hello-World探究" class="headerlink" title="2.3-Hello World探究"></a>2.3-Hello World探究</h2><h3 id="2-3-1-Pom-xml文件"><a href="#2-3-1-Pom-xml文件" class="headerlink" title="2.3.1-Pom.xml文件"></a>2.3.1-Pom.xml文件</h3><ol><li>父项目</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他的父项目是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他来真正管理Spring Boot应用里面的所有依赖版本；</code></pre><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><ol start="2"><li>导入的依赖（启动器）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2-3-2-主程序类（主入口类）"><a href="#2-3-2-主程序类（主入口类）" class="headerlink" title="2.3.2-主程序类（主入口类）"></a>2.3.2-主程序类（主入口类）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>@SpringBootApplication:</strong> Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span></code></pre><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p> 标注在某个类上，表示这是一个Spring Boot的配置类；@SpringBootConfiguration继承自@Configuration，二者功能也一致，标注当前类是配置类，<br>并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到spring容器中，并且实例名就是方法名。</p><p> @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p> 配置类 —– 配置文件；配置类也是容器中的一个组件；@Component，@Configuration注解中是包含@Component注解的，被@Configuration修饰的类被定义为一个Spring容器（应用上下文）</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p> 以前我们需要配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能；这样自动配置才能生效；<br><br><br>SpringBoot一个最核心的观点就是，约定大于配置，这种看似降低了灵活度的方法，却大大简化了SpringBoot的开发过程。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>    String ENABLED_OVERRIDE_PROPERTY <span class="token operator">=</span> <span class="token string">"spring.boot.enableautoconfiguration"</span><span class="token punctuation">;</span></code></pre><p>@<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;​ @<strong>Import(AutoConfigurationPackages.Registrar.class)</strong>：</p><p> Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p> <strong>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</strong></p><p> @<strong>Import(EnableAutoConfigurationImportSelector.class)</strong>；</p><p> 给容器中导入组件,在这个类中，提供了一个getCandidateConfigurations()方法用来加载配置文件。借助Spring提供的工具类SpringFactories的loadFactoryNames()方法加载配置文件。扫描的默认路径位于META-INF/spring.factories中。</p><p> <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p> 会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p> <strong>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)</strong>；</p><p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><h2 id="2-4-使用Spring-Initializer快速创建Spring-Boot项目"><a href="#2-4-使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="2.4 -使用Spring Initializer快速创建Spring Boot项目"></a>2.4 -使用Spring Initializer快速创建Spring Boot项目</h2><p>IDEA：使用 Spring Initializer快速创建项目<br>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><p>主程序已经生成好了，我们只需要我们自己的逻辑<br>resources文件夹中目录结构<br>static：保存所有的静态资源； js css images；<br>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；<br>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</p><h2 id="2-5-配置文件"><a href="#2-5-配置文件" class="headerlink" title="2.5-配置文件"></a>2.5-配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p> YAML A Markup Language：是一个标记语言</p><p> YAML isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p> 以前的配置文件；大多都使用的是 xxxx.xml文件；</p><p> YAML：以数据为中心，比json、xml等更适合做配置文件；</p><p> YAML：配置例子</p><pre class=" language-yml"><code class="language-yml">server:  port: 8081</code></pre><p>XML：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8081<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><h2 id="2-6-Yaml语法"><a href="#2-6-Yaml语法" class="headerlink" title="2.6-Yaml语法"></a>2.6-Yaml语法</h2><h3 id="2-6-1-基本语法"><a href="#2-6-1-基本语法" class="headerlink" title="2.6.1-基本语法"></a>2.6.1-基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello</code></pre><p>属性和值也是大小写敏感；</p><h3 id="2-6-2-值的写法"><a href="#2-6-2-值的写法" class="headerlink" title="2.6.2-值的写法"></a>2.6.2-值的写法</h3><p>字面量：普通的值（数字，字符串，布尔）<br>​ k: v：字面直接来写；</p><p> 字符串默认不用加上单引号或者双引号；</p><p> “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><ul><li><p>name: “zhangsan \n lisi”：输出；zhangsan 换行 lisi</p><p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p></li><li><p>name: ‘zhangsan \n lisi’：输出；zhangsan \n lisi</p></li></ul><p>对象、Map（属性和值）（键值对）：<br>​ k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p> 对象还是k: v的方式</p><pre class=" language-yml"><code class="language-yml">friends:    lastName: zhangsan    age: 20</code></pre><p>行内写法：</p><pre class=" language-yml"><code class="language-yml">friends: {lastName: zhangsan,age: 18}</code></pre><p>数组（List、Set）：<br>用- 值表示数组中的一个元素</p><pre class=" language-yml"><code class="language-yml">pets: - cat - dog - pig</code></pre><p>行内写法：</p><pre class=" language-yml"><code class="language-yml">pets: [cat,dog,pig]</code></pre><h2 id="2-7-配置文件值注入"><a href="#2-7-配置文件值注入" class="headerlink" title="2.7-配置文件值注入"></a>2.7-配置文件值注入</h2><ul><li>配置文件：</li></ul><pre class=" language-yml"><code class="language-yml">person:    lastName: hello    age: 18    boss: false    birth: 2017/12/12    maps: {k1: v1,k2: 12}    lists:      - lisi      - zhaoliu    dog:      name: 小狗      age: 12</code></pre><ul><li>JavaBean</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2-7-1-Value获取值和-ConfigurationProperties获取值比较"><a href="#2-7-1-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2.7.1- @Value获取值和@ConfigurationProperties获取值比较"></a>2.7.1- @Value获取值和@ConfigurationProperties获取值比较</h3><table><thead><tr><th>header 1</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个制定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><ul><li>松散语法<br><ol><li>person.firstName: 使用标准模式</li><li>person.first-name: 大写用-</li><li>person.first_name: 大写用_</li><li>PERSON_FIRST_NAME: 推荐属性使用这种写法</li></ol></li></ul><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h3 id="2-7-2-配置文件注入值数据校验"><a href="#2-7-2-配置文件注入值数据校验" class="headerlink" title="2.7.2-配置文件注入值数据校验"></a>2.7.2-配置文件注入值数据校验</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>    <span class="token annotation punctuation">@Email</span>    <span class="token comment" spellcheck="true">//@Value("${person.last-name}")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><h3 id="2-7-3-PropertySource-amp-ImportResource-amp-Bean"><a href="#2-7-3-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="2.7.3-@PropertySource&amp;@ImportResource&amp;@Bean"></a>2.7.3-@PropertySource&amp;@ImportResource&amp;@Bean</h3><ul><li>@<strong>PropertySource</strong>：加载指定的属性文件（*.properties）到 Spring 的 Environment 中。</li></ul><ol><li>可以配合 @Value 和 @ConfigurationProperties 使用。<br>@PropertySource 和 @Value 组合使用，可以将自定义属性文件中的属性变量值注入到当前类的使用@Value注解的成员变量中。</li><li>@PropertySource 和 @ConfigurationProperties 组合使用，可以将属性文件与一个Java类绑定，将属性文件中的变量值注入到该Java类的成员变量中。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； *  @ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值； * */</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:person.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>   <span class="token comment" spellcheck="true">// @Email</span>    <span class="token comment" spellcheck="true">//@Value("${person.last-name}")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span></code></pre><ul><li>@ImportResource：导入Spring的配置文件，让配置文件里面的内容生效；</li></ul><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@ImportResource标注在一个配置类上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>导入Spring的配置文件让其生效</code></pre><p>不来编写Spring的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.springboot.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类@<strong>Configuration</strong>——&gt;Spring配置文件</p><p>2、使用@<strong>Bean给容器中添加组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * * 在配置文件中用&lt;bean>&lt;bean/>标签添加组件 * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置类@Bean给容器中添加组件了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-4-配置文件占位符"><a href="#2-7-4-配置文件占位符" class="headerlink" title="2.7.4-配置文件占位符"></a>2.7.4-配置文件占位符</h3><h4 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h4><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>random<span class="token punctuation">.</span>value<span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">}</span>$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">${person.hello:hello}_dog</span></code></pre><h2 id="2-8-Profile"><a href="#2-8-Profile" class="headerlink" title="2.8-Profile"></a>2.8-Profile</h2><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境</p><h3 id="2-8-1-多Profile文件"><a href="#2-8-1-多Profile文件" class="headerlink" title="2.8.1-多Profile文件"></a>2.8.1-多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml</p><ul><li>application-dev.properties、application-st.properties、application-prod.properties</li></ul><p>默认使用application.properties的配置；</p><h3 id="2-8-2-yml支持多文档块方式"><a href="#2-8-2-yml支持多文档块方式" class="headerlink" title="2.8.2-yml支持多文档块方式"></a>2.8.2-yml支持多文档块方式</h3><pre class=" language-yml"><code class="language-yml">server:  port: 8081spring:  profiles:    active: prod---server:  port: 8083spring:  profiles: dev---server:  port: 8084spring:  profiles: prod  #指定属于哪个环境</code></pre><h3 id="2-8-3-激活指定profile"><a href="#2-8-3-激活指定profile" class="headerlink" title="2.8.3-激活指定profile"></a>2.8.3-激活指定profile</h3><ol><li><p>在配置文件中指定 </p><p><code>spring.profiles.active=dev</code></p></li><li><p>命令行：</p><p>java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>可以直接在测试的时候，配置传入命令行参数</p></li><li><p>虚拟机参数；</p><p><code>-Dspring.profiles.active=dev</code></p></li></ol><h2 id="2-9-配置文件加载位置"><a href="#2-9-配置文件加载位置" class="headerlink" title="2.9-配置文件加载位置"></a>2.9-配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><ul><li><p>file：当前项目根路径（<strong>访问路径需要加上项目名</strong>）</p></li><li><p>classpath：类路径（resources）</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p></li></ul><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</p><p><code>我们还可以通过spring.config.location来改变默认的配置文件位置</code></p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=D:/application.properties</p><h2 id="2-10-外部配置加载顺序"><a href="#2-10-外部配置加载顺序" class="headerlink" title="2.10-外部配置加载顺序"></a>2.10-外部配置加载顺序</h2><p><code>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</code></p><p>1.命令行参数</p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087 –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p><code>由jar包外向jar包内进行寻找；</code></p><p><code>优先加载带profile</code></p><p>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p><p>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p><p><code>再来加载不带profile</code></p><p>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</p><p>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源：<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h1 id="3-自动配置原理"><a href="#3-自动配置原理" class="headerlink" title="3-自动配置原理"></a>3-自动配置原理</h1><p>配置文件到底能写什么？怎么写？自动配置原理；<br>参考官方文档<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件可以配置的属性参考</a></p><h2 id="3-1-自动配置原理"><a href="#3-1-自动配置原理" class="headerlink" title="3.1-自动配置原理"></a>3.1-自动配置原理</h2><p><strong>1. 当SpringBoot应用启动的时候，就从主方法里面进行启动的。</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAutoConfigApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootAutoConfigApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它主要加载了@SpringBootApplication注解主配置类，这个@SpringBootApplication注解主配置类里边最主要的功能就是SpringBoot开启了一个@EnableAutoConfiguration注解的自动配置功能。</p><p><strong>2. @EnableAutoConfiguration作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？ </li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> </code></pre><ul><li>可以查看selectImports()方法的内容；</li><li>List configurations = getCandidateConfigurations(annotationMetadata, attributes);获取候选的配置</li></ul><pre class=" language-properties"><code class="language-properties">SpringFactoriesLoader.loadFactoryNames()<span class="token attr-name">扫描所有jar包类路径下</span> <span class="token attr-value"> META-INF/spring.factories</span>把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</code></pre><p><strong>3. 导入了哪些组件呢？</strong><br><br>我们来看EnableAutoConfigurationImportSelector这个类的父类<code>selectImports</code>;</p><p>父类里面规定了一个方法叫selectImports这个方法，查看了<code>selectImports这个方法</code>里面的代码内容就能知道导入了哪些组件了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader                    <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span>                    attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>            configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>            configurations <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>            configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>            configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> configurations<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>configurations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><code>这个configurations它是获取候选的配置。</code></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span>        <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>这个configurations方法的作用就是利用SpringFactoriesLoader.loadFactoryNames从类路径下得到一个个资源</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factoryClass<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String factoryClassName <span class="token operator">=</span> factoryClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span> <span class="token operator">:</span>                    ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>4. 那么可以获取到哪些资源呢？</strong><br><br>它是扫描java <code>jar包类路径下</code>的“META-INF/spring.factories”这个文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * The location to look for factories.     * &lt;p>Can be present in multiple JAR files.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FACTORIES_RESOURCE_LOCATION <span class="token operator">=</span> <span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">;</span></code></pre><ul><li><strong>扫描到的这些文件作用</strong>：是把这个文件的url拿到之后并把这些urls每一个遍历，最终把这些文件整成一个properties对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factoryClass<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String factoryClassName <span class="token operator">=</span> factoryClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span> <span class="token operator">:</span>                    ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                URL url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Properties properties <span class="token operator">=</span> PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String factoryClassNames <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>factoryClassNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span></code></pre><p>然后它从properties对象里边获取一些值，把这些获取到的值来加载我们最终要返回的这个结果，这个结果就是我们要交给Spring容器中的所有组件，这相当于这factoryClassName就是我们传过来的Class的这个类名。</p><p>而传过来的Class是调用这个getSpringFactoriesLoaderFactoryClass()这个方法得到从properties中获取到EnableAutoConfiguration.class类名对应的值，然后把它们添加在容器中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>5. 然后来到第二个Spring<br>jar包的META-INF下的spring.factories这个文件找到配置所有EnableAutoConfiguration的值加入到Spring容器中</strong></p><pre class=" language-java"><code class="language-java"># Auto Configureorg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>EnableAutoConfiguration<span class="token operator">=</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>SpringApplicationAdminJmxAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>AopAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>RabbitAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>batch<span class="token punctuation">.</span>BatchAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cassandra<span class="token punctuation">.</span>CassandraAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>CloudAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurationPropertiesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>context<span class="token punctuation">.</span>MessageSourceAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>context<span class="token punctuation">.</span>PropertyPlaceholderAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>couchbase<span class="token punctuation">.</span>CouchbaseAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>PersistenceExceptionTranslationAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cassandra<span class="token punctuation">.</span>CassandraDataAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cassandra<span class="token punctuation">.</span>CassandraRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>couchbase<span class="token punctuation">.</span>CouchbaseDataAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>couchbase<span class="token punctuation">.</span>CouchbaseRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>ElasticsearchAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>ElasticsearchDataAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>ElasticsearchRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>JpaRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>LdapDataAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>LdapRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongo<span class="token punctuation">.</span>MongoDataAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongo<span class="token punctuation">.</span>MongoRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>Neo4jDataAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>Neo4jRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>solr<span class="token punctuation">.</span>SolrRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>RedisAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>RedisRepositoriesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rest<span class="token punctuation">.</span>RepositoryRestMvcAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>web<span class="token punctuation">.</span>SpringDataWebAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>jest<span class="token punctuation">.</span>JestAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>freemarker<span class="token punctuation">.</span>FreeMarkerAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>GsonAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>H2ConsoleAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>hateoas<span class="token punctuation">.</span>HypermediaAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>HazelcastAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>HazelcastJpaDependencyAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>info<span class="token punctuation">.</span>ProjectInfoAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>integration<span class="token punctuation">.</span>IntegrationAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>JacksonAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JdbcTemplateAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JndiDataSourceAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>XADataSourceAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceTransactionManagerAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>JmsAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>JmxAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>JndiConnectionFactoryAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>ActiveMQAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>artemis<span class="token punctuation">.</span>ArtemisAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>flyway<span class="token punctuation">.</span>FlywayAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>groovy<span class="token punctuation">.</span>template<span class="token punctuation">.</span>GroovyTemplateAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jersey<span class="token punctuation">.</span>JerseyAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jooq<span class="token punctuation">.</span>JooqAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>KafkaAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>EmbeddedLdapAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>LdapAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>liquibase<span class="token punctuation">.</span>LiquibaseAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>MailSenderAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>MailSenderValidatorAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>DeviceResolverAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>DeviceDelegatingViewResolverAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>SitePreferenceAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mongo<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>EmbeddedMongoAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mongo<span class="token punctuation">.</span>MongoAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mustache<span class="token punctuation">.</span>MustacheAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>HibernateJpaAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>reactor<span class="token punctuation">.</span>ReactorAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>SecurityAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>SecurityFilterAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>FallbackWebSecurityAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>OAuth2AutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>sendgrid<span class="token punctuation">.</span>SendGridAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SessionAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>social<span class="token punctuation">.</span>SocialWebAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>social<span class="token punctuation">.</span>FacebookAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>social<span class="token punctuation">.</span>LinkedInAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>social<span class="token punctuation">.</span>TwitterAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>solr<span class="token punctuation">.</span>SolrAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>ThymeleafAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>TransactionAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>jta<span class="token punctuation">.</span>JtaAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ValidationAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>DispatcherServletAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>EmbeddedServletContainerAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ErrorMvcAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>HttpEncodingAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>HttpMessageConvertersAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>MultipartAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ServerPropertiesAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>WebClientAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>WebMvcAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>WebSocketAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>WebSocketMessagingAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>webservices<span class="token punctuation">.</span>WebServicesAutoConfiguration</code></pre><p>每一个xxxAutoConfiguration类都是容器中的一个组件，并都加入到容器中。</p><p>加入到容器中之后的作用就是用它们来做自动配置，这就是Springboot自动配置之源，也就是自动配置的开始，只有这些自动配置类进入到容器中以后，接下来这个自动配置类才开始进行启动；<br></p><p><strong>6. 每一个自动配置类进行自动配置功能</strong><br></p><ul><li>以<strong>HttpEncodingAutoConfiguration</strong>(Http编码自动配置)为例解释自动配置原理；</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment" spellcheck="true">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token comment" spellcheck="true">//Spring底层@Conditional注解，根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span><span class="token comment" spellcheck="true">//即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> HttpEncodingProperties properties<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>      <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpEncodingProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>       <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>配置文件中该配置什么，我们就按照它的这个旨意，它要配spring.http.encoding这个属性，这个属性里边能配置什么值，就对应HttpEncodingProperties这个类来配置，所有的配置文件中能配置的属性都是在xxx.Properties类中封装着</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Charset of HTTP requests and responses. Added to the "Content-Type" header if not     * set explicitly.     */</span>    <span class="token keyword">private</span> Charset charset <span class="token operator">=</span> DEFAULT_CHARSET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Force the encoding to the configured charset on HTTP requests and responses.     */</span>    <span class="token keyword">private</span> Boolean force<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Force the encoding to the configured charset on HTTP requests. Defaults to true     * when "force" has not been specified.     */</span>    <span class="token keyword">private</span> Boolean forceRequest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Force the encoding to the configured charset on HTTP responses.     */</span>    <span class="token keyword">private</span> Boolean forceResponse<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Locale to Encoding mapping.     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Locale<span class="token punctuation">,</span> Charset<span class="token operator">></span> mapping<span class="token punctuation">;</span>    <span class="token keyword">public</span> Charset <span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCharset</span><span class="token punctuation">(</span>Charset charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>charset <span class="token operator">=</span> charset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isForce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>force<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForce</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> force<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>force <span class="token operator">=</span> force<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isForceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>forceRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForceRequest</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>forceRequest <span class="token operator">=</span> forceRequest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isForceResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>forceResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForceResponse</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>forceResponse <span class="token operator">=</span> forceResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Locale<span class="token punctuation">,</span> Charset<span class="token operator">></span> <span class="token function">getMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMapping</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Locale<span class="token punctuation">,</span> Charset<span class="token operator">></span> mapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mapping <span class="token operator">=</span> mapping<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>所以说配置文件能配置什么就可以参照某一个功能对应的这个属性类</code></p><p><strong>7. 这个HttpEncodingProperties类就是根据当前不同的条件判断，决定这个配置类是否生效。</strong></p><p>如果一旦生效了，所有的配置类都成功了，就给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，而这properties类里边的每一个属性又是和配置文件绑定的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>      <span class="token comment" spellcheck="true">//给容器中添加一个组件。</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//添加一个我们自己来new这个CharacterEncodingFilter，把这个filter添加过去，但是注意这个filter里边要获取字符集的名字（filter.setEncoding(this.properties.getCharset().name());)，你是UTF8编码还是什么编码，它要从properties中进行获取，意思就是这个组件的某些值需要从properties中获取</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们可以再深入的看一下properties</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span>           value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HttpEncodingProperties properties<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//它已经和SpringBoot配置文件进行映射了。</span>    <span class="token comment" spellcheck="true">//只有一个有参构造器</span>    <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpEncodingProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们看到properties是HttpEncodingProperties，也就是说HttpEncodingProperties这个对象的值它是获取配置文件的值的，所以我们在配置这个filter到底要用什么编码的时候是从properties获取的。</p><ul><li>而且值得注意的是：<br>这个HttpEncodingAutoConfiguration只有一个有参构造器，在只有一个有参构造器的情况下，参数的值就会从容器中拿</li></ul><p><strong>8. 而容器中它怎么去拿到呢？</strong></p><p>相当于是前面的这个<code>@EnableConfigurationProperties(HttpEncodingProperties.class) 注解</code>，这个@EnableConfigurationProperties注解的作用就是把HttpEncodingProperties.class和配置文件进行绑定起来并把HttpEncodingProperties加入到容器中。</p><p>接下来这个自动配置类，通过一个有参构造器把这个属性拿到，而这个属性已经和SpringBoot映射了，接下来要用什么编码，就是拿到HttpEncodingProperties这个类里边的属性。</p><p>所以SpringBoot能配置什么，它要设置编码，它是获取properties里边getCharset里边的name值。</p><p>filter.setEncoding(this.properties.getCharset().name());</p><p>所以就以此类推，配置一个Spring配置，就可以照着HttpEncodingProperties这里边的来配置。</p><p>比如在application.properties配置文件下配置一个http.encoding.enabled属性：</p><p><code>spring.http.encoding.enabled=true</code>  //能配置这个就相当于是我们之前的判断属性</p><p>还能配置其他的一些属性。</p><p>比如：<br><code>spring.http.encoding.charset=UTF-8</code></p><p>所以我们能够配置哪些属性，都是来源于这个功能的properties类</p><p>有了这个自动配置类，自动配置类就给容器中添加这个filter，然后这个filter就会起作用了。</p><p><code>需要把握几点：</code></p><ul><li>SpringBoot启动会加载大量的自动配置类</li><li>所要做的就是我们需要的功能SpringBoot有没有帮我们写好的自动配置类：</li><li>如果有就再来看这个自动配置类中到底配置了哪些组件（Springboot自动配置类里边只要我们要用的组件有，我们就不需要再来配置了，但是如果说没有我们所需要的组件，那么我们就需要自己来写一个配置类来把我们相应的组件配置起来）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性，而这些属性我们就可以在配置文件指定这些属性的值</li></ul><p><code>细节</code></p><h4 id="1-Conditional派生注解"><a href="#1-Conditional派生注解" class="headerlink" title="1. @Conditional派生注解"></a>1. @Conditional派生注解</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional派生注解</th><th>作用（判断是否满足当前条件）</th></tr></thead><tbody><tr><td>@@Conditional派生注解</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>NDI存在指定项</td></tr></tbody></table><p><code>自动配置类必须在一定的条件下才能生效；</code></p><p>我们怎么知道哪些自动配置类生效；</p><p>我们可以通过启用 <code>debug=true</code>属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre class=" language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>AUTO<span class="token operator">-</span>CONFIGURATION REPORT<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Positive matches<span class="token operator">:</span>（自动配置类启用的）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   DispatcherServletAutoConfiguration matched<span class="token operator">:</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> found required <span class="token keyword">class</span> <span class="token string">'org.springframework.web.servlet.DispatcherServlet'</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@ConditionalOnMissingClass</span> did not find unwanted <span class="token keyword">class</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> found <span class="token function">StandardServletEnvironment</span> <span class="token punctuation">(</span>OnWebApplicationCondition<span class="token punctuation">)</span>Negative matches<span class="token operator">:</span>（没有启动，没有匹配成功的自动配置类）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   ActiveMQAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'javax.jms.ConnectionFactory'</span><span class="token punctuation">,</span> <span class="token string">'org.apache.activemq.ActiveMQConnectionFactory'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>   AopAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'org.aspectj.lang.annotation.Aspect'</span><span class="token punctuation">,</span> <span class="token string">'org.aspectj.lang.reflect.Advice'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span></code></pre><h1 id="4-日志"><a href="#4-日志" class="headerlink" title="4-日志"></a>4-日志</h1><h2 id="4-1-日志框架"><a href="#4-1-日志框架" class="headerlink" title="4.1-日志框架"></a>4.1-日志框架</h2><p>小张；开发一个大型系统；</p><p> 1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p> 2、框架来记录系统的一些运行时信息；日志框架 ； zhanglogging.jar；</p><p> 3、高大上的几个功能？异步模式？自动归档？xxxx？ zhanglogging-good.jar？</p><p> 4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p> 5、JDBC—数据库驱动；</p><p> 写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p> 给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p>市面上的日志框架；</p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面（日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta Commons Logging）</del> SLF4j（Simple Logging Facade for Java） <del>jboss-logging</del></td><td>Log4j JUL（java.util.logging） Log4j2 Logback</td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面： SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p> <code>SpringBoot选用 SLF4j和logback；</code></p><h2 id="4-2-SLF4J的使用"><a href="#4-2-SLF4J的使用" class="headerlink" title="4.2-SLF4J的使用"></a>4.2-SLF4J的使用</h2><h3 id="4-2-1-如何在系统中使用SLF4J-参考-https-www-slf4j-org"><a href="#4-2-1-如何在系统中使用SLF4J-参考-https-www-slf4j-org" class="headerlink" title="4.2.1-如何在系统中使用SLF4J  参考-https://www.slf4j.org"></a>4.2.1-如何在系统中使用SLF4J  参考-<a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和 logback的实现jar</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件；</p><h3 id="4-2-2-遗留问题"><a href="#4-2-2-遗留问题" class="headerlink" title="4.2.2-遗留问题"></a>4.2.2-遗留问题</h3><p>Spring Boot：（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p>如何让系统中所有的日志都统一到slf4j；</p><p>1、将系统中其他日志框架先排除出去；</p><p>2、用中间包来替换原有的日志框架；</p><p>3、我们导入slf4j其他的实现</p><h2 id="4-3-SpringBoot使用日志"><a href="#4-3-SpringBoot使用日志" class="headerlink" title="4.3-SpringBoot使用日志"></a>4.3-SpringBoot使用日志</h2><ul><li>添加依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol><li>SpringBoot底层也是使用slf4j+logback的方式进行日志记录</li><li>SpringBoot也把其他的日志都替换成了slf4j；</li><li>中间替换包：</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LogFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J <span class="token operator">=</span> <span class="token string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> LogFactory logFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SLF4JLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</li></ol><p>例如：​ Spring框架用的是commons-logging；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><code>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</code></p><h2 id="4-4-日志的使用"><a href="#4-4-日志的使用" class="headerlink" title="4.4-日志的使用"></a>4.4-日志的使用</h2><h3 id="4-4-1-默认配置"><a href="#4-4-1-默认配置" class="headerlink" title="4.4-1 默认配置"></a>4.4-1 默认配置</h3><p>SpringBoot默认帮我们配好了日志</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//记录器</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println();</span>        <span class="token comment" spellcheck="true">//日志的级别；</span>        <span class="token comment" spellcheck="true">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span>        <span class="token comment" spellcheck="true">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是trace日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是debug日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是info日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是warn日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是error日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> 日志输出格式：        <span class="token operator">%</span>d表示日期时间，        <span class="token operator">%</span>thread表示线程名，        <span class="token operator">%</span><span class="token operator">-</span>5level：级别从左显示<span class="token number">5</span>个字符宽度        <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> 表示logger名字最长<span class="token number">50</span>个字符，否则按照句点分割。         <span class="token operator">%</span>msg：日志消息，        <span class="token operator">%</span>n是换行符    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">.</span>SSS<span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n</code></pre><p>SpringBoot修改日志的默认的配置</p><pre class=" language-java"><code class="language-java">logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>com<span class="token punctuation">.</span>atguigu<span class="token operator">=</span>trace#logging<span class="token punctuation">.</span>path<span class="token operator">=</span># 不指定路径在当前项目下生成springboot<span class="token punctuation">.</span>log日志# 可以指定完整的路径；#logging<span class="token punctuation">.</span>file<span class="token operator">=</span>G<span class="token operator">:</span><span class="token operator">/</span>springboot<span class="token punctuation">.</span>log# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring<span class="token punctuation">.</span>log 作为默认文件logging<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span>spring<span class="token operator">/</span>log#  在控制台输出的日志的格式logging<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>console<span class="token operator">=</span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd<span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n# 指定文件中日志输出的格式logging<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>file<span class="token operator">=</span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd<span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">==</span><span class="token operator">=</span> <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">==</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n</code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>none</td><td>none</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>none</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>none</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的spring.log文件中</td></tr></tbody></table><h3 id="4-4-2-指定配置"><a href="#4-4-2-指定配置" class="headerlink" title="4.4-2 指定配置"></a>4.4-2 指定配置</h3><p><strong>给类路径下放上每个日志框架自己的配置文件即可</strong>；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy, logback.xml or logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml or log4j2.xml</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p>logback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>      可以指定某段配置只在某个环境下生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><p>如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        日志输出格式：            %d表示日期时间，            %thread表示线程名，            %-5level：级别从左显示5个字符宽度            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。             %msg：日志消息，            %n是换行符        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p>no applicable action for [springProfile]</p><h3 id="4-4-3-切换日志框架"><a href="#4-4-3-切换日志框架" class="headerlink" title="4.4-3 切换日志框架"></a>4.4-3 切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p><ul><li>slf4j+log4j的方式；</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>切换为log4j2</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="5-Web开发"><a href="#5-Web开发" class="headerlink" title="5-Web开发"></a>5-Web开发</h1><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1-简介"></a>5.1-简介</h2><p>使用SpringBoot；</p><ul><li><p>创建SpringBoot应用，选中我们需要的模块；</p></li><li><p>SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</p></li><li><p>自己编写业务代码；</p></li></ul><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre class=" language-properties"><code class="language-properties">xxxxAutoConfiguration：帮我们给容器中自动配置组件；<span class="token attr-name">xxxxProperties</span><span class="token punctuation">:</span><span class="token attr-value">配置类来封装配置文件的内容；</span></code></pre><h2 id="5-2-SpringBoot对静态资源的映射规则"><a href="#5-2-SpringBoot对静态资源的映射规则" class="headerlink" title="5.2-SpringBoot对静态资源的映射规则"></a>5.2-SpringBoot对静态资源的映射规则</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.resources"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//可以设置和静态资源有关的参数，缓存时间等</span></code></pre><pre class=" language-java"><code class="language-java">WebMvcAuotConfiguration：        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Integer cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCachePeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">/</span><span class="token operator">/</span>静态资源文件夹映射            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span>配置欢迎页映射        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>                ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token operator">/</span><span class="token operator">/</span>配置喜欢的图标        <span class="token annotation punctuation">@Configuration</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.mvc.favicon.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FaviconConfiguration</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">FaviconConfiguration</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> SimpleUrlHandlerMapping <span class="token function">faviconHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SimpleUrlHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">/</span><span class="token operator">/</span>所有  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico                 mapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"**/favicon.ico"</span><span class="token punctuation">,</span>                        <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> ResourceHttpRequestHandler <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ResourceHttpRequestHandler requestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                requestHandler                        <span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> requestHandler<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>1、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；</p><p> webjars：以jar包的方式引入静态资源；</p><p>2、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</p><ul><li>加载顺序由上至下</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">"classpath</span><span class="token punctuation">:</span><span class="token attr-value">/META-INF/resources/", </span><span class="token attr-name">"classpath</span><span class="token punctuation">:</span><span class="token attr-value">/resources/",</span><span class="token attr-name">"classpath</span><span class="token punctuation">:</span><span class="token attr-value">/static/", </span><span class="token attr-name">"classpath</span><span class="token punctuation">:</span><span class="token attr-value">/public/" </span>"/"：当前项目的根路径</code></pre><p>3、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；</p><p>4、所有的 **/favicon.ico 都是在静态资源文件下找；</p><h2 id="5-3-模板引擎"><a href="#5-3-模板引擎" class="headerlink" title="5.3-模板引擎"></a>5.3-模板引擎</h2><p>模板引擎有JSP、Velocity、Freemarker、Thymeleaf等</p><p><strong>SpringBoot推荐的Thymeleaf，语法更简单，功能更强大；</strong></p><h3 id="5-3-1-引入thymeleaf"><a href="#5-3-1-引入thymeleaf" class="headerlink" title="5.3-1 引入thymeleaf"></a>5.3-1 引入thymeleaf</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-2-Thymeleaf使用"><a href="#5-3-2-Thymeleaf使用" class="headerlink" title="5.3-2 Thymeleaf使用"></a>5.3-2 Thymeleaf使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MimeType DEFAULT_CONTENT_TYPE <span class="token operator">=</span> MimeType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span></code></pre><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><ol><li>导入thymeleaf的名称空间</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>使用thymeleaf语法</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>成功！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--th:text 将div里面的文本内容设置为 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是显示欢迎信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="5-3-3-thymeleaf语法规则"><a href="#5-3-3-thymeleaf语法规则" class="headerlink" title="5.3-3 thymeleaf语法规则"></a>5.3-3 thymeleaf语法规则</h3><ol><li>th:text；改变当前元素里面的文本内容；<code>th：任意html属性；</code>来替换原生属性的值</li><li>表达式<br><a href="https://fanlychie.github.io/post/thymeleaf.html" target="_blank" rel="noopener">详见此博客</a></li></ol><h2 id="5-4-SpringMVC自动配置"><a href="#5-4-SpringMVC自动配置" class="headerlink" title="5.4-SpringMVC自动配置"></a>5.4-SpringMVC自动配置</h2><h3 id="5-4-1-Spring-MVC-auto-configuration"><a href="#5-4-1-Spring-MVC-auto-configuration" class="headerlink" title="5.4-1 Spring MVC auto-configuration"></a>5.4-1 Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<code>（WebMvcAutoConfiguration）</code></p><ul><li>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；</li></ul></li><li>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</li><li>Static index.html support. 静态首页访问</li><li>Custom Favicon support (see below). favicon.ico</li><li>自动注册了 of Converter, GenericConverter, Formatter beans.<ul><li>Converter：转换器； public String hello(User user)：类型转换使用Converter</li><li>Formatter 格式化器； 2019.12.17===Date；</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"date-format"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在文件中配置日期格式化的规则</span>        <span class="token keyword">public</span> Formatter<span class="token operator">&lt;</span>Date<span class="token operator">></span> <span class="token function">dateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化组件</span>        <span class="token punctuation">}</span></code></pre><p> 自己添加的格式化器转换器，我们只需要放在容器中即可</p><ul><li>Support for HttpMessageConverters (see below).<ul><li>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</li><li>HttpMessageConverters 是从容器中确定；获取所有的HttpMessageConverter；</li></ul></li></ul><p>自己给容器中添加<code>HttpMessageConverter</code>，只需要将自己的组件注册容器中（@Bean,@Component）</p><ul><li>Automatic registration of MessageCodesResolver (see below).定义错误代码生成规则</li><li>Automatic use of a ConfigurableWebBindingInitializer bean (see below).</li></ul><p>我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）</p><pre class=" language-properties"><code class="language-properties">初始化WebDataBinder；<span class="token attr-name">请求数据</span><span class="token punctuation">=</span><span class="token attr-value">====JavaBean；</span></code></pre><h3 id="5-4-2-扩展SpringMVC"><a href="#5-4-2-扩展SpringMVC" class="headerlink" title="5.4-2 扩展SpringMVC"></a>5.4-2 扩展SpringMVC</h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>编写一个配置类（@Configuration），是<code>WebMvcConfigurerAdapter</code>类型；不能标注@EnableWebMvc;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><ol><li>WebMvcAutoConfiguration是SpringMVC的自动配置类</li><li>在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)</li></ol><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnableWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcConfigurerComposite configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//从容器中获取所有的WebMvcConfigurer</span>      <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>WebMvcConfigurer<span class="token operator">></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span>                <span class="token annotation punctuation">@Override</span>             <span class="token comment" spellcheck="true">// public void addViewControllers(ViewControllerRegistry registry) {</span>              <span class="token comment" spellcheck="true">//    for (WebMvcConfigurer delegate : this.delegates) {</span>               <span class="token comment" spellcheck="true">//       delegate.addViewControllers(registry);</span>               <span class="token comment" spellcheck="true">//   }</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ol start="3"><li><p>容器中所有的WebMvcConfigurer都会一起起作用；</p></li><li><p>我们的配置类也会被调用；</p><p>效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p></li></ol><h3 id="5-4-3-全面接管SpringMVC"><a href="#5-4-3-全面接管SpringMVC" class="headerlink" title="5.4-3 全面接管SpringMVC"></a>5.4-3 全面接管SpringMVC</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><ol><li>@EnableWebMvc的核心</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span></code></pre><ol start="2"><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span></code></pre></li><li></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        WebMvcConfigurerAdapter<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><ol start="4"><li><p>@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p></li><li><p>导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p></li></ol><h3 id="5-4-4-如何修改SpringBoot的默认配置"><a href="#5-4-4-如何修改SpringBoot的默认配置" class="headerlink" title="5.4-4 如何修改SpringBoot的默认配置"></a>5.4-4 如何修改SpringBoot的默认配置</h3><p>模式：</p><ol><li>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</li><li>在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</li><li>在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</li></ol><h2 id="5-5-Restful-CRUD"><a href="#5-5-Restful-CRUD" class="headerlink" title="5.5 Restful CRUD"></a>5.5 Restful CRUD</h2><h3 id="5-5-1-默认访问首页"><a href="#5-5-1-默认访问首页" class="headerlink" title="5.5-1 默认访问首页"></a>5.5-1 默认访问首页</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token comment" spellcheck="true">//@EnableWebMvc   不要接管SpringMVC</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-5-2-国际化"><a href="#5-5-2-国际化" class="headerlink" title="5.5-2 国际化"></a>5.5-2 国际化</h3><ol><li>编写国际化配置文件；</li><li>使用ResourceBundleMessageSource管理国际化资源文件</li><li>在页面使用fmt:message取出国际化内容</li></ol><p><strong>步骤：</strong></p><ul><li>编写国际化配置文件，抽取页面需要显示的国际化消息</li><li>SpringBoot自动配置好了管理国际化资源文件的组件</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//我们的配置文件可以直接放在类路径下叫messages.properties；</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置国际化资源文件的基础名（去掉语言国家代码的）</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>                    StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackToSystemLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setCacheSeconds</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>alwaysUseMessageFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>去页面获取国际化的值</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/webjars/bootstrap/4.0.0/css/bootstrap.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/img/bootstrap-solid.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.tip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> [[#{login.remember}]]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.btn}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p><strong>原理：</strong></p><p> 国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties                    <span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre><ul><li>点击链接切换国际化</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 可以在连接上携带区域信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String l <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-5-3-登陆"><a href="#5-5-3-登陆" class="headerlink" title="5.5-3 登陆"></a>5.5-3 登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><ul><li>禁用模板引擎的缓存</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 禁用缓存</span><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false </span></code></pre><ul><li>页面修改完成以后ctrl+f9：重新编译；</li></ul><p>登陆错误消息的显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #strings.isEmpty(msg)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="5-5-4-拦截器进行登陆检查"><a href="#5-5-4-拦截器进行登陆检查" class="headerlink" title="5.5-4 拦截器进行登陆检查"></a>5.5-4 拦截器进行登陆检查</h3><ul><li><strong>拦截器</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 登陆检查， */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//目标方法执行之前</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//未登陆，返回登陆页面</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"没有权限请先登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//已登陆，放行请求</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>注册拦截器</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"dashboard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//注册拦截器</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//super.addInterceptors(registry);</span>                <span class="token comment" spellcheck="true">//静态资源；  *.css , *.js</span>                <span class="token comment" spellcheck="true">//SpringBoot已经做好了静态资源映射</span>                registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-5-5-CRUD-员工列表"><a href="#5-5-5-CRUD-员工列表" class="headerlink" title="5.5-5 CRUD-员工列表"></a>5.5-5 CRUD-员工列表</h3><p>实验要求：</p><p><strong>RestfulCRUD：CRUD满足Rest风格；</strong></p><p>URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作</p><p><strong>| 普通CRUD（uri来区分操作） | RestfulCRUD</strong></p><p>—|—|—<br>查询 | getEmp | emp—GET<br>添加 | addEmp?xxx | emp—POST<br>修改 | updateEmp?id=xxx&amp;xxx=xx | emp/{id}—PUT<br>删除 | deleteEmp?id=1 | emp/{id}—DELETE</p><h1 id="6-错误处理机制"><a href="#6-错误处理机制" class="headerlink" title="6-错误处理机制"></a>6-错误处理机制</h1><h2 id="6-1-SpringBoot默认的错误处理机制"><a href="#6-1-SpringBoot默认的错误处理机制" class="headerlink" title="6.1-SpringBoot默认的错误处理机制"></a>6.1-SpringBoot默认的错误处理机制</h2><p>默认效果：</p><ol><li><p>浏览器，返回一个默认的错误页面</p><p><img src="/2019/12/25/springboot-bi-ji-yi/%E9%94%99%E8%AF%AF.png" alt="错误"></p></li></ol><p>浏览器发送请求的请求头：</p><p><img src="/2019/12/25/springboot-bi-ji-yi/%E8%AF%B7%E6%B1%82%E5%A4%B4.png" alt="请求头"></p><ol start="2"><li><p>如果是其他客户端，默认响应一个json数据</p><p><strong>原理：</strong></p><p> 可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p></li></ol><p>   <strong>给容器中添加了以下组件</strong></p><p>   1、DefaultErrorAttributes：</p><pre class=" language-java"><code class="language-java">   帮我们在页面共享信息；   <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>RequestAttributes requestAttributes<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> errorAttributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           errorAttributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"timestamp"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">addStatus</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">addErrorDetails</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">addPath</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> errorAttributes<span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><pre><code>2、BasicErrorController：处理默认/error请求</code></pre><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Controller</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"${server.error.path:${error.path:/error}}"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicErrorController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractErrorController</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>produces <span class="token operator">=</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span>       <span class="token keyword">public</span> ModelAndView <span class="token function">errorHtml</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>               HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>           HttpStatus status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>                   request<span class="token punctuation">,</span> <span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>TEXT_HTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//去哪个页面作为错误页面；包含页面地址和页面内容</span>           ModelAndView modelAndView <span class="token operator">=</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">:</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@RequestMapping</span>       <span class="token annotation punctuation">@ResponseBody</span>    <span class="token comment" spellcheck="true">//产生json数据，其他客户端来到这个方法处理；</span>       <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">error</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                   <span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           HttpStatus status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><pre><code>3、ErrorPageCustomizer：</code></pre><pre><code>       @Value(&quot;${error.path:/error}&quot;)       private String path = &quot;/error&quot;;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</code></pre><pre><code>4、DefaultErrorViewResolver：</code></pre><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> ModelAndView <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span>               Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>           ModelAndView modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">private</span> ModelAndView <span class="token function">resolve</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//默认SpringBoot可以去找到一个页面？  error/404</span>           String errorViewName <span class="token operator">=</span> <span class="token string">"error/"</span> <span class="token operator">+</span> viewName<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//模板引擎可以解析这个页面地址就用模板引擎解析</span>           TemplateAvailabilityProvider provider <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateAvailabilityProviders                   <span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span>               <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span>           <span class="token keyword">return</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><pre><code>步骤：一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被**BasicErrorController**处理；1）响应页面；去哪个页面是由**DefaultErrorViewResolver**解析得到的；</code></pre><pre class=" language-java"><code class="language-java">   <span class="token keyword">protected</span> ModelAndView <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>         HttpServletResponse response<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//所有的ErrorViewResolver得到ModelAndView</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>ErrorViewResolver resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorViewResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ModelAndView modelAndView <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="6-2-如果定制错误响应："><a href="#6-2-如果定制错误响应：" class="headerlink" title="6.2-如果定制错误响应："></a>6.2-如果定制错误响应：</h2><h3 id="6-2-1-如何定制错误的页面；"><a href="#6-2-1-如何定制错误的页面；" class="headerlink" title="6.2-1 如何定制错误的页面；"></a><strong>6.2-1 如何定制错误的页面；</strong></h3><ol><li>有模板引擎的情况下；error/状态码; </li></ol><p>【将错误页面命名为 错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到 对应的页面；</p><p> 我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；</p><p> 页面能获取的信息；</p><p> timestamp：时间戳</p><p> status：状态码</p><p> error：错误提示</p><p> exception：异常对象</p><p> message：异常消息</p><p> errors：JSR303数据校验的错误都在这里</p><ol start="2"><li><p>没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p></li><li><p>以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p></li></ol><h3 id="6-2-2-如何定制错误的json数据；"><a href="#6-2-2-如何定制错误的json数据；" class="headerlink" title="6.2-2. 如何定制错误的json数据；"></a>6.2-2. 如何定制错误的json数据；</h3><ol><li>自定义异常处理&amp;返回定制json数据；</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"user.notexist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//没有自适应效果...</span></code></pre><ol start="2"><li>转发到/error进行自适应响应效果处理</li></ol><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span>        <span class="token comment" spellcheck="true">/**         * Integer statusCode = (Integer) request         .getAttribute("javax.servlet.error.status_code");         */</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"user.notexist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转发到/error</span>        <span class="token keyword">return</span> <span class="token string">"forward:/error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="6-2-3-将我们的定制数据携带出去；"><a href="#6-2-3-将我们的定制数据携带出去；" class="headerlink" title="6.2-3 将我们的定制数据携带出去；"></a>6.2-3 将我们的定制数据携带出去；</h3><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p> 1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p> 2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p> 容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//给容器中加入我们自己定义的ErrorAttributes</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyErrorAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>RequestAttributes requestAttributes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span><span class="token string">"fangfpeng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><h1 id="7-配置嵌入式的Servlet容器"><a href="#7-配置嵌入式的Servlet容器" class="headerlink" title="7- 配置嵌入式的Servlet容器"></a>7- 配置嵌入式的Servlet容器</h1><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><h3 id="7-1-如何定制和修改Servlet容器的相关配置"><a href="#7-1-如何定制和修改Servlet容器的相关配置" class="headerlink" title="7.1  如何定制和修改Servlet容器的相关配置"></a>7.1  如何定制和修改Servlet容器的相关配置</h3><ol><li><p>修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）</p><pre class=" language-java"><code class="language-java">server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8081</span>server<span class="token punctuation">.</span>context<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>crudserver<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>uri<span class="token operator">-</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token comment" spellcheck="true">//通用的Servlet容器设置</span>server<span class="token punctuation">.</span>xxx<span class="token comment" spellcheck="true">//Tomcat的设置</span>server<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>xxx</code></pre></li></ol><ol start="2"><li><p>编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>  <span class="token comment" spellcheck="true">//一定要将这个定制器加入到容器中</span><span class="token keyword">public</span> EmbeddedServletContainerCustomizer <span class="token function">embeddedServletContainerCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedServletContainerCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定制嵌入式的Servlet容器相关的规则</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableEmbeddedServletContainer container<span class="token punctuation">)</span> <span class="token punctuation">{</span>            container<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="7-2-注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#7-2-注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="7.2  注册Servlet三大组件【Servlet、Filter、Listener】"></a>7.2  注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p><code>ServletRegistrationBean：</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注册三大组件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>FilterRegistrationBean：</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FilterRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span><span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ServletListenerRegistrationBean：</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletListenerRegistrationBean <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletListenerRegistrationBean<span class="token operator">&lt;</span>MyListener<span class="token operator">></span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">dispatcherServletRegistration</span><span class="token punctuation">(</span>      DispatcherServlet dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ServletRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>         dispatcherServlet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties<span class="token punctuation">.</span><span class="token function">getServletMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span>    <span class="token comment" spellcheck="true">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span>   registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>   registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      registration<span class="token punctuation">.</span><span class="token function">setMultipartConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> registration<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-替换为其他嵌入式Servlet容器"><a href="#7-3-替换为其他嵌入式Servlet容器" class="headerlink" title="7.3  替换为其他嵌入式Servlet容器"></a>7.3  替换为其他嵌入式Servlet容器</h3><p>默认支持：</p><ul><li>Tomcat（默认使用）</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>Jetty</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="7-4-嵌入式Servlet容器自动配置原理"><a href="#7-4-嵌入式Servlet容器自动配置原理" class="headerlink" title="7.4  嵌入式Servlet容器自动配置原理"></a>7.4  嵌入式Servlet容器自动配置原理</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span><span class="token comment" spellcheck="true">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span><span class="token comment" spellcheck="true">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedServletContainerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前是否引入了Tomcat依赖；</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="token function">tomcatEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Jetty is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Server<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Loader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            WebAppContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedJetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> JettyEmbeddedServletContainerFactory <span class="token function">jettyEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Undertow is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SslClientAuthMode<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedUndertow</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="token function">undertowEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UndertowEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ol><li><p>EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmbeddedServletContainerFactory</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//获取嵌入式的Servlet容器</span>   EmbeddedServletContainer <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>         ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li>EmbeddedServletContainer：（嵌入式的Servlet容器）</li></ol><ol start="3"><li>以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> EmbeddedServletContainer <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>      ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个Tomcat</span>   Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置Tomcat的基本环节</span>   File baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory         <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Connector connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接器,引擎等等</span>   tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span>   <span class="token keyword">return</span> <span class="token function">getTomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="8-SpringBoot与数据访问"><a href="#8-SpringBoot与数据访问" class="headerlink" title="8-SpringBoot与数据访问"></a>8-SpringBoot与数据访问</h1><h2 id="8-1-JDBC"><a href="#8-1-JDBC" class="headerlink" title="8.1  JDBC"></a>8.1  JDBC</h2><ol><li><p>加入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql://192.168.15.22:3306/jdbc    driver-class-name: com.mysql.jdbc.Driver</code></pre><ul><li><p>效果：</p><p> 默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><p> 数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p></li></ul><p>（1）参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>（2）SpringBoot默认可以支持；</p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DataSource、HikariDataSource、BasicDataSource、</code></pre><p>（3）自定义数据源类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Generic DataSource configuration. */</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span>      <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）<strong>DataSourceInitializer：ApplicationListener</strong>；</p><ul><li><p>作用</p><p>a、runSchemaScripts();运行建表语句；</p><p>b、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><pre class=" language-properties"><code class="language-properties">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；<span class="token attr-name">可以使用</span> <span class="token attr-value">  </span><span class="token attr-name">    schema</span><span class="token punctuation">:</span><span class="token attr-name">      -</span> <span class="token attr-value">classpath:department.sql</span>      指定位置</code></pre></li></ul><p>（5）操作数据库：自动配置了JdbcTemplate操作数据库</p></li></ol><h2 id="8-2-整合Druid数据源"><a href="#8-2-整合Druid数据源" class="headerlink" title="8.2  整合Druid数据源"></a>8.2  整合Druid数据源</h2><ul><li>导入druid数据源</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这两参数是为了把我们自己的bean绑定起来</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置文件的路径</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Druid的监控</span>    <span class="token comment" spellcheck="true">//1、配置一个管理后台的Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册一个servlet. StaViewServlet就是进入后台管理的Servlet</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理diuid下面的所有请求就进入了管理后台</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//密码</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认就是允许所有访问 在StaViewServlet里面的参数</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span><span class="token string">"192.168.15.21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拒绝这个路径访问</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2、配置一个web监控的filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册一个Filter</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置初始化参数</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排除那些请求</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拦截所有请求</span>        <span class="token keyword">return</span>  bean<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加在bean中</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="8-3-整合MyBatis"><a href="#8-3-整合MyBatis" class="headerlink" title="8.3  整合MyBatis"></a>8.3  整合MyBatis</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><code>步骤：</code></p><ol><li><p>配置数据源相关属性（见上一节Druid）</p></li><li><p>给数据库建表</p></li><li><p>创建JavaBean</p></li><li><p><strong>注解版</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定这是一个操作数据库的mapper</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">getDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取到自增的主键,是否是自增=true ,那个是主键 id</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into department(departmentName) values(#{departmentName})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update department set departmentName=#{departmentName} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//配置驼峰命名 法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>Configuration configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>                configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用MapperScan批量扫描所有的Mapper接口；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.atguigu.springboot.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBoot06DataMybatisApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBoot06DataMybatisApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>配置文件版</p><pre class=" language-yml"><code class="language-yml">mybatis:  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置  mapper-locations: classpath:mybatis/mapper/*.xml  指定sql映射文件的位置</code></pre><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p></li></ol><h2 id="8-4-整合SpringData-JPA"><a href="#8-4-整合SpringData-JPA" class="headerlink" title="8.4  整合SpringData JPA"></a>8.4  整合SpringData JPA</h2><h3 id="8-4-1-SpringData简介"><a href="#8-4-1-SpringData简介" class="headerlink" title="8.4-1  SpringData简介"></a>8.4-1  SpringData简介</h3><p><img src="/2019/12/25/springboot-bi-ji-yi/jpa.png" alt="jpa"></p><h3 id="8-4-2-整合SpringData-JPA"><a href="#8-4-2-整合SpringData-JPA" class="headerlink" title="8.4-2  整合SpringData JPA"></a>8.4-2  整合SpringData JPA</h3><ol><li><p>编写一个实体类（bean）和数据表进行映射，并且配置好映射关系</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用JPA注解配置映射关系</span><span class="token annotation punctuation">@Entity</span> <span class="token comment" spellcheck="true">//告诉JPA这是一个实体类（和数据表映射的类）</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tbl_user"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span> <span class="token comment" spellcheck="true">//这是一个主键</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自增主键</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这是和数据表对应的一个列</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span> <span class="token comment" spellcheck="true">//省略默认列名就是属性名</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span></code></pre></li><li><p>编写一个Dao接口来操作实体类对应的数据表（Repository）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//继承JpaRepository来完成对数据库的操作</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>基本的配置JpaProperties</p><pre class=" language-yml"><code class="language-yml">spring:   jpa:    hibernate:            #更新或者创建数据表结构      ddl-auto: update        #控制台显示SQL    show-sql: true</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
